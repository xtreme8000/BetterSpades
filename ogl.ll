; ModuleID = 'main.c'
target datalayout = "e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128"
target triple = "i386-pc-linux-gnu"

%struct.kv6_t = type { i16, i16, i16, float, float, float, i8, i32, i8*, i16*, i32* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i32, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i32, i32, [40 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

@chunk_geometry_rebuild = global i8 0, align 1
@chunk_geometry_rebuild_state = global i32 0, align 4
@chunk_display_lists = global [1024 x i32] zeroinitializer, align 4
@chunk_display_lists_shadowed = global [1024 x i32] zeroinitializer, align 4
@chunk_max_height = global [1024 x i32] zeroinitializer, align 4
@chunk_last_update = global [1024 x i32] zeroinitializer, align 4
@chunk_geometry_changed = global [1024 x i32] zeroinitializer, align 4
@chunk_geometry_changed_lenght = global i32 0, align 4
@chunk_lighting_changed = global [1024 x i32] zeroinitializer, align 4
@chunk_lighting_changed_lenght = global i32 0, align 4
@chunk_render_mode = global i8 0, align 1
@map_colors = global i64* null, align 4
@map_size_x = global i32 0, align 4
@map_size_y = global i32 0, align 4
@map_size_z = global i32 0, align 4
@map_checked_voxels_x = global [8192 x i32] zeroinitializer, align 4
@map_checked_voxels_y = global [8192 x i32] zeroinitializer, align 4
@map_checked_voxels_z = global [8192 x i32] zeroinitializer, align 4
@map_checked_voxels_index = global i32 0, align 4
@map_ground_connected_result = global i8 0, align 1
@tent = global %struct.kv6_t zeroinitializer, align 4
@gun = global %struct.kv6_t zeroinitializer, align 4
@overlay_textures_id = global [128 x i32] zeroinitializer, align 4
@overlay_textures_data = global [128 x i32] zeroinitializer, align 4
@kv6_name = global [128 x i32] zeroinitializer, align 4
@kv6_model = global [128 x %struct.kv6_t*] zeroinitializer, align 4
@frustum = global [6 x [4 x float]] zeroinitializer, align 16
@camera_rot_x = global float 0x400051EB80000000, align 4
@camera_rot_y = global float 0x3FFCA3D700000000, align 4
@camera_x = global float 2.560000e+02, align 4
@camera_y = global float 6.000000e+01, align 4
@camera_z = global float 2.560000e+02, align 4
@camera_fov = global float 7.000000e+01, align 4
@camera_size = global float 0x3FE99999A0000000, align 4
@camera_height = global float 0x3FE99999A0000000, align 4
@camera_eye_height = global float 0.000000e+00, align 4
@camera_movement_x = global float 0.000000e+00, align 4
@camera_movement_y = global float 0.000000e+00, align 4
@camera_movement_z = global float 0.000000e+00, align 4
@camera_speed = global float 3.200000e+01, align 4
@camera_last_key = global i32 0, align 4
@settings = global { i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] } { i8 0, i8 0, i8 0, i8 0, float 0.000000e+00, i32 0, i32 0, i8 0, [3 x i8] undef }, align 4
@uniform_point_size = global i32 0, align 4
@uniform_near_plane_height = global i32 0, align 4
@uniform_camera_x = global i32 0, align 4
@uniform_camera_z = global i32 0, align 4
@uniform_fog_distance = global i32 0, align 4
@uniform_map_size_x = global i32 0, align 4
@uniform_map_size_z = global i32 0, align 4
@uniform_fog_color = global i32 0, align 4
@uniform_setting_color_correction = global i32 0, align 4
@uniform_draw_ui = global i32 0, align 4
@glPointParameterfv = global void (i32, float*)* null, align 4
@glPointParameterf = global void (i32, float)* null, align 4
@glCreateShader = global i32 (i32)* null, align 4
@glShaderSource = global void (i32, i32, i8**, i32*)* null, align 4
@glCompileShader = global void (i32)* null, align 4
@glCreateProgram = global i32 ()* null, align 4
@glAttachShader = global void (i32, i32)* null, align 4
@glLinkProgram = global void (i32)* null, align 4
@glUseProgram = global void (i32)* null, align 4
@glGetUniformLocation = global i32 (i32, i8*)* null, align 4
@glUniform1f = global void (i32, float)* null, align 4
@glUniform4f = global void (i32, float, float, float, float)* null, align 4
@glUniform1i = global void (i32, i32)* null, align 4
@color_correction = global [12288 x i8] cj\14\17j$\17j;\17jZ\17j\8A\17j\AE\17j\C7\17j\D4\17j\DD\17j\E4\17j\E9\17j\EE\17j\EF\17j\F3\17j\F6\17j\10\17j\14\17j$\17j;\17jZ\17j\8A\17j\AE\17j\C7\17j\D4\17j\DD\17j\E4\17j\E9\17j\EE\17j\EF\17j\F3\17j\F6\17j\10$j\14$j$$j;$jZ$j\8A$j\AE$j\C7$j\D4$j\DD$j\E4$j\E9$j\EE$j\EF$j\F3$j\F6$j\102j\142j$2j;2jZ2j\8A2j\AE2j\C72j\D42j\DD2j\E42j\E92j\EE2j\EF2j\F32j\F62j\10Dj\14Dj$Dj;DjZDj\8ADj\AEDj\C7Dj\D4Dj\DDDj\E4Dj\E9Dj\EEDj\EFDj\F3Dj\F6Dj\10]j\14]j$]j;]jZ]j\8A]j\AE]j\C7]j\D4]j\DD]j\E4]j\E9]j\EE]j\EF]j\F3]j\F6]j\10\7Fj\14\7Fj$\7Fj;\7FjZ\7Fj\8A\7Fj\AE\7Fj\C7\7Fj\D4\7Fj\DD\7Fj\E4\7Fj\E9\7Fj\EE\7Fj\EF\7Fj\F3\7Fj\F6\7Fj\10\A6j\14\A6j$\A6j;\A6jZ\A6j\8A\A6j\AE\A6j\C7\A6j\D4\A6j\DD\A6j\E4\A6j\E9\A6j\EE\A6j\EF\A6j\F3\A6j\F6\A6j\10\C2j\14\C2j$\C2j;\C2jZ\C2j\8A\C2j\AE\C2j\C7\C2j\D4\C2j\DD\C2j\E4\C2j\E9\C2j\EE\C2j\EF\C2j\F3\C2j\F6\C2j\10\D5j\14\D5j$\D5j;\D5jZ\D5j\8A\D5j\AE\D5j\C7\D5j\D4\D5j\DD\D5j\E4\D5j\E9\D5j\EE\D5j\EF\D5j\F3\D5j\F6\D5j\10\DFj\14\DFj$\DFj;\DFjZ\DFj\8A\DFj\AE\DFj\C7\DFj\D4\DFj\DD\DFj\E4\DFj\E9\DFj\EE\DFj\EF\DFj\F3\DFj\F6\DFj\10\E6j\14\E6j$\E6j;\E6jZ\E6j\8A\E6j\AE\E6j\C7\E6j\D4\E6j\DD\E6j\E4\E6j\E9\E6j\EE\E6j\EF\E6j\F3\E6j\F6\E6j\10\ECj\14\ECj$\ECj;\ECjZ\ECj\8A\ECj\AE\ECj\C7\ECj\D4\ECj\DD\ECj\E4\ECj\E9\ECj\EE\ECj\EF\ECj\F3\ECj\F6\ECj\10\F0j\14\F0j$\F0j;\F0jZ\F0j\8A\F0j\AE\F0j\C7\F0j\D4\F0j\DD\F0j\E4\F0j\E9\F0j\EE\F0j\EF\F0j\F3\F0j\F6\F0j\10\F3j\14\F3j$\F3j;\F3jZ\F3j\8A\F3j\AE\F3j\C7\F3j\D4\F3j\DD\F3j\E4\F3j\E9\F3j\EE\F3j\EF\F3j\F3\F3j\F6\F3j\10\F6j\14\F6j$\F6j;\F6jZ\F6j\8A\F6j\AE\F6j\C7\F6j\D4\F6j\DD\F6j\E4\F6j\E9\F6j\EE\F6j\EF\F6j\F3\F6j\F6\F6j\10\17\8D\14\17\8D$\17\8D;\17\8DZ\17\8D\8A\17\8D\AE\17\8D\C7\17\8D\D4\17\8D\DD\17\8D\E4\17\8D\E9\17\8D\EE\17\8D\EF\17\8D\F3\17\8D\F6\17\8D\10\17\8D\14\17\8D$\17\8D;\17\8DZ\17\8D\8A\17\8D\AE\17\8D\C7\17\8D\D4\17\8D\DD\17\8D\E4\17\8D\E9\17\8D\EE\17\8D\EF\17\8D\F3\17\8D\F6\17\8D\10$\8D\14$\8D$$\8D;$\8DZ$\8D\8A$\8D\AE$\8D\C7$\8D\D4$\8D\DD$\8D\E4$\8D\E9$\8D\EE$\8D\EF$\8D\F3$\8D\F6$\8D\102\8D\142\8D$2\8D;2\8DZ2\8D\8A2\8D\AE2\8D\C72\8D\D42\8D\DD2\8D\E42\8D\E92\8D\EE2\8D\EF2\8D\F32\8D\F62\8D\10D\8D\14D\8D$D\8D;D\8DZD\8D\8AD\8D\AED\8D\C7D\8D\D4D\8D\DDD\8D\E4D\8D\E9D\8D\EED\8D\EFD\8D\F3D\8D\F6D\8D\10]\8D\14]\8D$]\8D;]\8DZ]\8D\8A]\8D\AE]\8D\C7]\8D\D4]\8D\DD]\8D\E4]\8D\E9]\8D\EE]\8D\EF]\8D\F3]\8D\F6]\8D\10\7F\8D\14\7F\8D$\7F\8D;\7F\8DZ\7F\8D\8A\7F\8D\AE\7F\8D\C7\7F\8D\D4\7F\8D\DD\7F\8D\E4\7F\8D\E9\7F\8D\EE\7F\8D\EF\7F\8D\F3\7F\8D\F6\7F\8D\10\A6\8D\14\A6\8D$\A6\8D;\A6\8DZ\A6\8D\8A\A6\8D\AE\A6\8D\C7\A6\8D\D4\A6\8D\DD\A6\8D\E4\A6\8D\E9\A6\8D\EE\A6\8D\EF\A6\8D\F3\A6\8D\F6\A6\8D\10\C2\8D\14\C2\8D$\C2\8D;\C2\8DZ\C2\8D\8A\C2\8D\AE\C2\8D\C7\C2\8D\D4\C2\8D\DD\C2\8D\E4\C2\8D\E9\C2\8D\EE\C2\8D\EF\C2\8D\F3\C2\8D\F6\C2\8D\10\D5\8D\14\D5\8D$\D5\8D;\D5\8DZ\D5\8D\8A\D5\8D\AE\D5\8D\C7\D5\8D\D4\D5\8D\DD\D5\8D\E4\D5\8D\E9\D5\8D\EE\D5\8D\EF\D5\8D\F3\D5\8D\F6\D5\8D\10\DF\8D\14\DF\8D$\DF\8D;\DF\8DZ\DF\8D\8A\DF\8D\AE\DF\8D\C7\DF\8D\D4\DF\8D\DD\DF\8D\E4\DF\8D\E9\DF\8D\EE\DF\8D\EF\DF\8D\F3\DF\8D\F6\DF\8D\10\E6\8D\14\E6\8D$\E6\8D;\E6\8DZ\E6\8D\8A\E6\8D\AE\E6\8D\C7\E6\8D\D4\E6\8D\DD\E6\8D\E4\E6\8D\E9\E6\8D\EE\E6\8D\EF\E6\8D\F3\E6\8D\F6\E6\8D\10\EC\8D\14\EC\8D$\EC\8D;\EC\8DZ\EC\8D\8A\EC\8D\AE\EC\8D\C7\EC\8D\D4\EC\8D\DD\EC\8D\E4\EC\8D\E9\EC\8D\EE\EC\8D\EF\EC\8D\F3\EC\8D\F6\EC\8D\10\F0\8D\14\F0\8D$\F0\8D;\F0\8DZ\F0\8D\8A\F0\8D\AE\F0\8D\C7\F0\8D\D4\F0\8D\DD\F0\8D\E4\F0\8D\E9\F0\8D\EE\F0\8D\EF\F0\8D\F3\F0\8D\F6\F0\8D\10\F3\8D\14\F3\8D$\F3\8D;\F3\8DZ\F3\8D\8A\F3\8D\AE\F3\8D\C7\F3\8D\D4\F3\8D\DD\F3\8D\E4\F3\8D\E9\F3\8D\EE\F3\8D\EF\F3\8D\F3\F3\8D\F6\F3\8D\10\F6\8D\14\F6\8D$\F6\8D;\F6\8DZ\F6\8D\8A\F6\8D\AE\F6\8D\C7\F6\8D\D4\F6\8D\DD\F6\8D\E4\F6\8D\E9\F6\8D\EE\F6\8D\EF\F6\8D\F3\F6\8D\F6\F6\8D\10\17\AD\14\17\AD$\17\AD;\17\ADZ\17\AD\8A\17\AD\AE\17\AD\C7\17\AD\D4\17\AD\DD\17\AD\E4\17\AD\E9\17\AD\EE\17\AD\EF\17\AD\F3\17\AD\F6\17\AD\10\17\AD\14\17\AD$\17\AD;\17\ADZ\17\AD\8A\17\AD\AE\17\AD\C7\17\AD\D4\17\AD\DD\17\AD\E4\17\AD\E9\17\AD\EE\17\AD\EF\17\AD\F3\17\AD\F6\17\AD\10$\AD\14$\AD$$\AD;$\ADZ$\AD\8A$\AD\AE$\AD\C7$\AD\D4$\AD\DD$\AD\E4$\AD\E9$\AD\EE$\AD\EF$\AD\F3$\AD\F6$\AD\102\AD\142\AD$2\AD;2\ADZ2\AD\8A2\AD\AE2\AD\C72\AD\D42\AD\DD2\AD\E42\AD\E92\AD\EE2\AD\EF2\AD\F32\AD\F62\AD\10D\AD\14D\AD$D\AD;D\ADZD\AD\8AD\AD\AED\AD\C7D\AD\D4D\AD\DDD\AD\E4D\AD\E9D\AD\EED\AD\EFD\AD\F3D\AD\F6D\AD\10]\AD\14]\AD$]\AD;]\ADZ]\AD\8A]\AD\AE]\AD\C7]\AD\D4]\AD\DD]\AD\E4]\AD\E9]\AD\EE]\AD\EF]\AD\F3]\AD\F6]\AD\10\7F\AD\14\7F\AD$\7F\AD;\7F\ADZ\7F\AD\8A\7F\AD\AE\7F\AD\C7\7F\AD\D4\7F\AD\DD\7F\AD\E4\7F\AD\E9\7F\AD\EE\7F\AD\EF\7F\AD\F3\7F\AD\F6\7F\AD\10\A6\AD\14\A6\AD$\A6\AD;\A6\ADZ\A6\AD\8A\A6\AD\AE\A6\AD\C7\A6\AD\D4\A6\AD\DD\A6\AD\E4\A6\AD\E9\A6\AD\EE\A6\AD\EF\A6\AD\F3\A6\AD\F6\A6\AD\10\C2\AD\14\C2\AD$\C2\AD;\C2\ADZ\C2\AD\8A\C2\AD\AE\C2\AD\C7\C2\AD\D4\C2\AD\DD\C2\AD\E4\C2\AD\E9\C2\AD\EE\C2\AD\EF\C2\AD\F3\C2\AD\F6\C2\AD\10\D5\AD\14\D5\AD$\D5\AD;\D5\ADZ\D5\AD\8A\D5\AD\AE\D5\AD\C7\D5\AD\D4\D5\AD\DD\D5\AD\E4\D5\AD\E9\D5\AD\EE\D5\AD\EF\D5\AD\F3\D5\AD\F6\D5\AD\10\DF\AD\14\DF\AD$\DF\AD;\DF\ADZ\DF\AD\8A\DF\AD\AE\DF\AD\C7\DF\AD\D4\DF\AD\DD\DF\AD\E4\DF\AD\E9\DF\AD\EE\DF\AD\EF\DF\AD\F3\DF\AD\F6\DF\AD\10\E6\AD\14\E6\AD$\E6\AD;\E6\ADZ\E6\AD\8A\E6\AD\AE\E6\AD\C7\E6\AD\D4\E6\AD\DD\E6\AD\E4\E6\AD\E9\E6\AD\EE\E6\AD\EF\E6\AD\F3\E6\AD\F6\E6\AD\10\EC\AD\14\EC\AD$\EC\AD;\EC\ADZ\EC\AD\8A\EC\AD\AE\EC\AD\C7\EC\AD\D4\EC\AD\DD\EC\AD\E4\EC\AD\E9\EC\AD\EE\EC\AD\EF\EC\AD\F3\EC\AD\F6\EC\AD\10\F0\AD\14\F0\AD$\F0\AD;\F0\ADZ\F0\AD\8A\F0\AD\AE\F0\AD\C7\F0\AD\D4\F0\AD\DD\F0\AD\E4\F0\AD\E9\F0\AD\EE\F0\AD\EF\F0\AD\F3\F0\AD\F6\F0\AD\10\F3\AD\14\F3\AD$\F3\AD;\F3\ADZ\F3\AD\8A\F3\AD\AE\F3\AD\C7\F3\AD\D4\F3\AD\DD\F3\AD\E4\F3\AD\E9\F3\AD\EE\F3\AD\EF\F3\AD\F3\F3\AD\F6\F3\AD\10\F6\AD\14\F6\AD$\F6\AD;\F6\ADZ\F6\AD\8A\F6\AD\AE\F6\AD\C7\F6\AD\D4\F6\AD\DD\F6\AD\E4\F6\AD\E9\F6\AD\EE\F6\AD\EF\F6\AD\F3\F6\AD\F6\F6\AD\10\17\C8\14\17\C8$\17\C8;\17\C8Z\17\C8\8A\17\C8\AE\17\C8\C7\17\C8\D4\17\C8\DD\17\C8\E4\17\C8\E9\17\C8\EE\17\C8\EF\17\C8\F3\17\C8\F6\17\C8\10\17\C8\14\17\C8$\17\C8;\17\C8Z\17\C8\8A\17\C8\AE\17\C8\C7\17\C8\D4\17\C8\DD\17\C8\E4\17\C8\E9\17\C8\EE\17\C8\EF\17\C8\F3\17\C8\F6\17\C8\10$\C8\14$\C8$$\C8;$\C8Z$\C8\8A$\C8\AE$\C8\C7$\C8\D4$\C8\DD$\C8\E4$\C8\E9$\C8\EE$\C8\EF$\C8\F3$\C8\F6$\C8\102\C8\142\C8$2\C8;2\C8Z2\C8\8A2\C8\AE2\C8\C72\C8\D42\C8\DD2\C8\E42\C8\E92\C8\EE2\C8\EF2\C8\F32\C8\F62\C8\10D\C8\14D\C8$D\C8;D\C8ZD\C8\8AD\C8\AED\C8\C7D\C8\D4D\C8\DDD\C8\E4D\C8\E9D\C8\EED\C8\EFD\C8\F3D\C8\F6D\C8\10]\C8\14]\C8$]\C8;]\C8Z]\C8\8A]\C8\AE]\C8\C7]\C8\D4]\C8\DD]\C8\E4]\C8\E9]\C8\EE]\C8\EF]\C8\F3]\C8\F6]\C8\10\7F\C8\14\7F\C8$\7F\C8;\7F\C8Z\7F\C8\8A\7F\C8\AE\7F\C8\C7\7F\C8\D4\7F\C8\DD\7F\C8\E4\7F\C8\E9\7F\C8\EE\7F\C8\EF\7F\C8\F3\7F\C8\F6\7F\C8\10\A6\C8\14\A6\C8$\A6\C8;\A6\C8Z\A6\C8\8A\A6\C8\AE\A6\C8\C7\A6\C8\D4\A6\C8\DD\A6\C8\E4\A6\C8\E9\A6\C8\EE\A6\C8\EF\A6\C8\F3\A6\C8\F6\A6\C8\10\C2\C8\14\C2\C8$\C2\C8;\C2\C8Z\C2\C8\8A\C2\C8\AE\C2\C8\C7\C2\C8\D4\C2\C8\DD\C2\C8\E4\C2\C8\E9\C2\C8\EE\C2\C8\EF\C2\C8\F3\C2\C8\F6\C2\C8\10\D5\C8\14\D5\C8$\D5\C8;\D5\C8Z\D5\C8\8A\D5\C8\AE\D5\C8\C7\D5\C8\D4\D5\C8\DD\D5\C8\E4\D5\C8\E9\D5\C8\EE\D5\C8\EF\D5\C8\F3\D5\C8\F6\D5\C8\10\DF\C8\14\DF\C8$\DF\C8;\DF\C8Z\DF\C8\8A\DF\C8\AE\DF\C8\C7\DF\C8\D4\DF\C8\DD\DF\C8\E4\DF\C8\E9\DF\C8\EE\DF\C8\EF\DF\C8\F3\DF\C8\F6\DF\C8\10\E6\C8\14\E6\C8$\E6\C8;\E6\C8Z\E6\C8\8A\E6\C8\AE\E6\C8\C7\E6\C8\D4\E6\C8\DD\E6\C8\E4\E6\C8\E9\E6\C8\EE\E6\C8\EF\E6\C8\F3\E6\C8\F6\E6\C8\10\EC\C8\14\EC\C8$\EC\C8;\EC\C8Z\EC\C8\8A\EC\C8\AE\EC\C8\C7\EC\C8\D4\EC\C8\DD\EC\C8\E4\EC\C8\E9\EC\C8\EE\EC\C8\EF\EC\C8\F3\EC\C8\F6\EC\C8\10\F0\C8\14\F0\C8$\F0\C8;\F0\C8Z\F0\C8\8A\F0\C8\AE\F0\C8\C7\F0\C8\D4\F0\C8\DD\F0\C8\E4\F0\C8\E9\F0\C8\EE\F0\C8\EF\F0\C8\F3\F0\C8\F6\F0\C8\10\F3\C8\14\F3\C8$\F3\C8;\F3\C8Z\F3\C8\8A\F3\C8\AE\F3\C8\C7\F3\C8\D4\F3\C8\DD\F3\C8\E4\F3\C8\E9\F3\C8\EE\F3\C8\EF\F3\C8\F3\F3\C8\F6\F3\C8\10\F6\C8\14\F6\C8$\F6\C8;\F6\C8Z\F6\C8\8A\F6\C8\AE\F6\C8\C7\F6\C8\D4\F6\C8\DD\F6\C8\E4\F6\C8\E9\F6\C8\EE\F6\C8\EF\F6\C8\F3\F6\C8\F6\F6\C8\10\17\D8\14\17\D8$\17\D8;\17\D8Z\17\D8\8A\17\D8\AE\17\D8\C7\17\D8\D4\17\D8\DD\17\D8\E4\17\D8\E9\17\D8\EE\17\D8\EF\17\D8\F3\17\D8\F6\17\D8\10\17\D8\14\17\D8$\17\D8;\17\D8Z\17\D8\8A\17\D8\AE\17\D8\C7\17\D8\D4\17\D8\DD\17\D8\E4\17\D8\E9\17\D8\EE\17\D8\EF\17\D8\F3\17\D8\F6\17\D8\10$\D8\14$\D8$$\D8;$\D8Z$\D8\8A$\D8\AE$\D8\C7$\D8\D4$\D8\DD$\D8\E4$\D8\E9$\D8\EE$\D8\EF$\D8\F3$\D8\F6$\D8\102\D8\142\D8$2\D8;2\D8Z2\D8\8A2\D8\AE2\D8\C72\D8\D42\D8\DD2\D8\E42\D8\E92\D8\EE2\D8\EF2\D8\F32\D8\F62\D8\10D\D8\14D\D8$D\D8;D\D8ZD\D8\8AD\D8\AED\D8\C7D\D8\D4D\D8\DDD\D8\E4D\D8\E9D\D8\EED\D8\EFD\D8\F3D\D8\F6D\D8\10]\D8\14]\D8$]\D8;]\D8Z]\D8\8A]\D8\AE]\D8\C7]\D8\D4]\D8\DD]\D8\E4]\D8\E9]\D8\EE]\D8\EF]\D8\F3]\D8\F6]\D8\10\7F\D8\14\7F\D8$\7F\D8;\7F\D8Z\7F\D8\8A\7F\D8\AE\7F\D8\C7\7F\D8\D4\7F\D8\DD\7F\D8\E4\7F\D8\E9\7F\D8\EE\7F\D8\EF\7F\D8\F3\7F\D8\F6\7F\D8\10\A6\D8\14\A6\D8$\A6\D8;\A6\D8Z\A6\D8\8A\A6\D8\AE\A6\D8\C7\A6\D8\D4\A6\D8\DD\A6\D8\E4\A6\D8\E9\A6\D8\EE\A6\D8\EF\A6\D8\F3\A6\D8\F6\A6\D8\10\C2\D8\14\C2\D8$\C2\D8;\C2\D8Z\C2\D8\8A\C2\D8\AE\C2\D8\C7\C2\D8\D4\C2\D8\DD\C2\D8\E4\C2\D8\E9\C2\D8\EE\C2\D8\EF\C2\D8\F3\C2\D8\F6\C2\D8\10\D5\D8\14\D5\D8$\D5\D8;\D5\D8Z\D5\D8\8A\D5\D8\AE\D5\D8\C7\D5\D8\D4\D5\D8\DD\D5\D8\E4\D5\D8\E9\D5\D8\EE\D5\D8\EF\D5\D8\F3\D5\D8\F6\D5\D8\10\DF\D8\14\DF\D8$\DF\D8;\DF\D8Z\DF\D8\8A\DF\D8\AE\DF\D8\C7\DF\D8\D4\DF\D8\DD\DF\D8\E4\DF\D8\E9\DF\D8\EE\DF\D8\EF\DF\D8\F3\DF\D8\F6\DF\D8\10\E6\D8\14\E6\D8$\E6\D8;\E6\D8Z\E6\D8\8A\E6\D8\AE\E6\D8\C7\E6\D8\D4\E6\D8\DD\E6\D8\E4\E6\D8\E9\E6\D8\EE\E6\D8\EF\E6\D8\F3\E6\D8\F6\E6\D8\10\EC\D8\14\EC\D8$\EC\D8;\EC\D8Z\EC\D8\8A\EC\D8\AE\EC\D8\C7\EC\D8\D4\EC\D8\DD\EC\D8\E4\EC\D8\E9\EC\D8\EE\EC\D8\EF\EC\D8\F3\EC\D8\F6\EC\D8\10\F0\D8\14\F0\D8$\F0\D8;\F0\D8Z\F0\D8\8A\F0\D8\AE\F0\D8\C7\F0\D8\D4\F0\D8\DD\F0\D8\E4\F0\D8\E9\F0\D8\EE\F0\D8\EF\F0\D8\F3\F0\D8\F6\F0\D8\10\F3\D8\14\F3\D8$\F3\D8;\F3\D8Z\F3\D8\8A\F3\D8\AE\F3\D8\C7\F3\D8\D4\F3\D8\DD\F3\D8\E4\F3\D8\E9\F3\D8\EE\F3\D8\EF\F3\D8\F3\F3\D8\F6\F3\D8\10\F6\D8\14\F6\D8$\F6\D8;\F6\D8Z\F6\D8\8A\F6\D8\AE\F6\D8\C7\F6\D8\D4\F6\D8\DD\F6\D8\E4\F6\D8\E9\F6\D8\EE\F6\D8\EF\F6\D8\F3\F6\D8\F6\F6\D8\10\17\E3\14\17\E3$\17\E3;\17\E3Z\17\E3\8A\17\E3\AE\17\E3\C7\17\E3\D4\17\E3\DD\17\E3\E4\17\E3\E9\17\E3\EE\17\E3\EF\17\E3\F3\17\E3\F6\17\E3\10\17\E3\14\17\E3$\17\E3;\17\E3Z\17\E3\8A\17\E3\AE\17\E3\C7\17\E3\D4\17\E3\DD\17\E3\E4\17\E3\E9\17\E3\EE\17\E3\EF\17\E3\F3\17\E3\F6\17\E3\10$\E3\14$\E3$$\E3;$\E3Z$\E3\8A$\E3\AE$\E3\C7$\E3\D4$\E3\DD$\E3\E4$\E3\E9$\E3\EE$\E3\EF$\E3\F3$\E3\F6$\E3\102\E3\142\E3$2\E3;2\E3Z2\E3\8A2\E3\AE2\E3\C72\E3\D42\E3\DD2\E3\E42\E3\E92\E3\EE2\E3\EF2\E3\F32\E3\F62\E3\10D\E3\14D\E3$D\E3;D\E3ZD\E3\8AD\E3\AED\E3\C7D\E3\D4D\E3\DDD\E3\E4D\E3\E9D\E3\EED\E3\EFD\E3\F3D\E3\F6D\E3\10]\E3\14]\E3$]\E3;]\E3Z]\E3\8A]\E3\AE]\E3\C7]\E3\D4]\E3\DD]\E3\E4]\E3\E9]\E3\EE]\E3\EF]\E3\F3]\E3\F6]\E3\10\7F\E3\14\7F\E3$\7F\E3;\7F\E3Z\7F\E3\8A\7F\E3\AE\7F\E3\C7\7F\E3\D4\7F\E3\DD\7F\E3\E4\7F\E3\E9\7F\E3\EE\7F\E3\EF\7F\E3\F3\7F\E3\F6\7F\E3\10\A6\E3\14\A6\E3$\A6\E3;\A6\E3Z\A6\E3\8A\A6\E3\AE\A6\E3\C7\A6\E3\D4\A6\E3\DD\A6\E3\E4\A6\E3\E9\A6\E3\EE\A6\E3\EF\A6\E3\F3\A6\E3\F6\A6\E3\10\C2\E3\14\C2\E3$\C2\E3;\C2\E3Z\C2\E3\8A\C2\E3\AE\C2\E3\C7\C2\E3\D4\C2\E3\DD\C2\E3\E4\C2\E3\E9\C2\E3\EE\C2\E3\EF\C2\E3\F3\C2\E3\F6\C2\E3\10\D5\E3\14\D5\E3$\D5\E3;\D5\E3Z\D5\E3\8A\D5\E3\AE\D5\E3\C7\D5\E3\D4\D5\E3\DD\D5\E3\E4\D5\E3\E9\D5\E3\EE\D5\E3\EF\D5\E3\F3\D5\E3\F6\D5\E3\10\DF\E3\14\DF\E3$\DF\E3;\DF\E3Z\DF\E3\8A\DF\E3\AE\DF\E3\C7\DF\E3\D4\DF\E3\DD\DF\E3\E4\DF\E3\E9\DF\E3\EE\DF\E3\EF\DF\E3\F3\DF\E3\F6\DF\E3\10\E6\E3\14\E6\E3$\E6\E3;\E6\E3Z\E6\E3\8A\E6\E3\AE\E6\E3\C7\E6\E3\D4\E6\E3\DD\E6\E3\E4\E6\E3\E9\E6\E3\EE\E6\E3\EF\E6\E3\F3\E6\E3\F6\E6\E3\10\EC\E3\14\EC\E3$\EC\E3;\EC\E3Z\EC\E3\8A\EC\E3\AE\EC\E3\C7\EC\E3\D4\EC\E3\DD\EC\E3\E4\EC\E3\E9\EC\E3\EE\EC\E3\EF\EC\E3\F3\EC\E3\F6\EC\E3\10\F0\E3\14\F0\E3$\F0\E3;\F0\E3Z\F0\E3\8A\F0\E3\AE\F0\E3\C7\F0\E3\D4\F0\E3\DD\F0\E3\E4\F0\E3\E9\F0\E3\EE\F0\E3\EF\F0\E3\F3\F0\E3\F6\F0\E3\10\F3\E3\14\F3\E3$\F3\E3;\F3\E3Z\F3\E3\8A\F3\E3\AE\F3\E3\C7\F3\E3\D4\F3\E3\DD\F3\E3\E4\F3\E3\E9\F3\E3\EE\F3\E3\EF\F3\E3\F3\F3\E3\F6\F3\E3\10\F6\E3\14\F6\E3$\F6\E3;\F6\E3Z\F6\E3\8A\F6\E3\AE\F6\E3\C7\F6\E3\D4\F6\E3\DD\F6\E3\E4\F6\E3\E9\F6\E3\EE\F6\E3\EF\F6\E3\F3\F6\E3\F6\F6\E3\10\17\E8\14\17\E8$\17\E8;\17\E8Z\17\E8\8A\17\E8\AE\17\E8\C7\17\E8\D4\17\E8\DD\17\E8\E4\17\E8\E9\17\E8\EE\17\E8\EF\17\E8\F3\17\E8\F6\17\E8\10\17\E8\14\17\E8$\17\E8;\17\E8Z\17\E8\8A\17\E8\AE\17\E8\C7\17\E8\D4\17\E8\DD\17\E8\E4\17\E8\E9\17\E8\EE\17\E8\EF\17\E8\F3\17\E8\F6\17\E8\10$\E8\14$\E8$$\E8;$\E8Z$\E8\8A$\E8\AE$\E8\C7$\E8\D4$\E8\DD$\E8\E4$\E8\E9$\E8\EE$\E8\EF$\E8\F3$\E8\F6$\E8\102\E8\142\E8$2\E8;2\E8Z2\E8\8A2\E8\AE2\E8\C72\E8\D42\E8\DD2\E8\E42\E8\E92\E8\EE2\E8\EF2\E8\F32\E8\F62\E8\10D\E8\14D\E8$D\E8;D\E8ZD\E8\8AD\E8\AED\E8\C7D\E8\D4D\E8\DDD\E8\E4D\E8\E9D\E8\EED\E8\EFD\E8\F3D\E8\F6D\E8\10]\E8\14]\E8$]\E8;]\E8Z]\E8\8A]\E8\AE]\E8\C7]\E8\D4]\E8\DD]\E8\E4]\E8\E9]\E8\EE]\E8\EF]\E8\F3]\E8\F6]\E8\10\7F\E8\14\7F\E8$\7F\E8;\7F\E8Z\7F\E8\8A\7F\E8\AE\7F\E8\C7\7F\E8\D4\7F\E8\DD\7F\E8\E4\7F\E8\E9\7F\E8\EE\7F\E8\EF\7F\E8\F3\7F\E8\F6\7F\E8\10\A6\E8\14\A6\E8$\A6\E8;\A6\E8Z\A6\E8\8A\A6\E8\AE\A6\E8\C7\A6\E8\D4\A6\E8\DD\A6\E8\E4\A6\E8\E9\A6\E8\EE\A6\E8\EF\A6\E8\F3\A6\E8\F6\A6\E8\10\C2\E8\14\C2\E8$\C2\E8;\C2\E8Z\C2\E8\8A\C2\E8\AE\C2\E8\C7\C2\E8\D4\C2\E8\DD\C2\E8\E4\C2\E8\E9\C2\E8\EE\C2\E8\EF\C2\E8\F3\C2\E8\F6\C2\E8\10\D5\E8\14\D5\E8$\D5\E8;\D5\E8Z\D5\E8\8A\D5\E8\AE\D5\E8\C7\D5\E8\D4\D5\E8\DD\D5\E8\E4\D5\E8\E9\D5\E8\EE\D5\E8\EF\D5\E8\F3\D5\E8\F6\D5\E8\10\DF\E8\14\DF\E8$\DF\E8;\DF\E8Z\DF\E8\8A\DF\E8\AE\DF\E8\C7\DF\E8\D4\DF\E8\DD\DF\E8\E4\DF\E8\E9\DF\E8\EE\DF\E8\EF\DF\E8\F3\DF\E8\F6\DF\E8\10\E6\E8\14\E6\E8$\E6\E8;\E6\E8Z\E6\E8\8A\E6\E8\AE\E6\E8\C7\E6\E8\D4\E6\E8\DD\E6\E8\E4\E6\E8\E9\E6\E8\EE\E6\E8\EF\E6\E8\F3\E6\E8\F6\E6\E8\10\EC\E8\14\EC\E8$\EC\E8;\EC\E8Z\EC\E8\8A\EC\E8\AE\EC\E8\C7\EC\E8\D4\EC\E8\DD\EC\E8\E4\EC\E8\E9\EC\E8\EE\EC\E8\EF\EC\E8\F3\EC\E8\F6\EC\E8\10\F0\E8\14\F0\E8$\F0\E8;\F0\E8Z\F0\E8\8A\F0\E8\AE\F0\E8\C7\F0\E8\D4\F0\E8\DD\F0\E8\E4\F0\E8\E9\F0\E8\EE\F0\E8\EF\F0\E8\F3\F0\E8\F6\F0\E8\10\F3\E8\14\F3\E8$\F3\E8;\F3\E8Z\F3\E8\8A\F3\E8\AE\F3\E8\C7\F3\E8\D4\F3\E8\DD\F3\E8\E4\F3\E8\E9\F3\E8\EE\F3\E8\EF\F3\E8\F3\F3\E8\F6\F3\E8\10\F6\E8\14\F6\E8$\F6\E8;\F6\E8Z\F6\E8\8A\F6\E8\AE\F6\E8\C7\F6\E8\D4\F6\E8\DD\F6\E8\E4\F6\E8\E9\F6\E8\EE\F6\E8\EF\F6\E8\F3\F6\E8\F6\F6\E8\10\17\EF\14\17\EF$\17\EF;\17\EFZ\17\EF\8A\17\EF\AE\17\EF\C7\17\EF\D4\17\EF\DD\17\EF\E4\17\EF\E9\17\EF\EE\17\EF\EF\17\EF\F3\17\EF\F6\17\EF\10\17\EF\14\17\EF$\17\EF;\17\EFZ\17\EF\8A\17\EF\AE\17\EF\C7\17\EF\D4\17\EF\DD\17\EF\E4\17\EF\E9\17\EF\EE\17\EF\EF\17\EF\F3\17\EF\F6\17\EF\10$\EF\14$\EF$$\EF;$\EFZ$\EF\8A$\EF\AE$\EF\C7$\EF\D4$\EF\DD$\EF\E4$\EF\E9$\EF\EE$\EF\EF$\EF\F3$\EF\F6$\EF\102\EF\142\EF$2\EF;2\EFZ2\EF\8A2\EF\AE2\EF\C72\EF\D42\EF\DD2\EF\E42\EF\E92\EF\EE2\EF\EF2\EF\F32\EF\F62\EF\10D\EF\14D\EF$D\EF;D\EFZD\EF\8AD\EF\AED\EF\C7D\EF\D4D\EF\DDD\EF\E4D\EF\E9D\EF\EED\EF\EFD\EF\F3D\EF\F6D\EF\10]\EF\14]\EF$]\EF;]\EFZ]\EF\8A]\EF\AE]\EF\C7]\EF\D4]\EF\DD]\EF\E4]\EF\E9]\EF\EE]\EF\EF]\EF\F3]\EF\F6]\EF\10\7F\EF\14\7F\EF$\7F\EF;\7F\EFZ\7F\EF\8A\7F\EF\AE\7F\EF\C7\7F\EF\D4\7F\EF\DD\7F\EF\E4\7F\EF\E9\7F\EF\EE\7F\EF\EF\7F\EF\F3\7F\EF\F6\7F\EF\10\A6\EF\14\A6\EF$\A6\EF;\A6\EFZ\A6\EF\8A\A6\EF\AE\A6\EF\C7\A6\EF\D4\A6\EF\DD\A6\EF\E4\A6\EF\E9\A6\EF\EE\A6\EF\EF\A6\EF\F3\A6\EF\F6\A6\EF\10\C2\EF\14\C2\EF$\C2\EF;\C2\EFZ\C2\EF\8A\C2\EF\AE\C2\EF\C7\C2\EF\D4\C2\EF\DD\C2\EF\E4\C2\EF\E9\C2\EF\EE\C2\EF\EF\C2\EF\F3\C2\EF\F6\C2\EF\10\D5\EF\14\D5\EF$\D5\EF;\D5\EFZ\D5\EF\8A\D5\EF\AE\D5\EF\C7\D5\EF\D4\D5\EF\DD\D5\EF\E4\D5\EF\E9\D5\EF\EE\D5\EF\EF\D5\EF\F3\D5\EF\F6\D5\EF\10\DF\EF\14\DF\EF$\DF\EF;\DF\EFZ\DF\EF\8A\DF\EF\AE\DF\EF\C7\DF\EF\D4\DF\EF\DD\DF\EF\E4\DF\EF\E9\DF\EF\EE\DF\EF\EF\DF\EF\F3\DF\EF\F6\DF\EF\10\E6\EF\14\E6\EF$\E6\EF;\E6\EFZ\E6\EF\8A\E6\EF\AE\E6\EF\C7\E6\EF\D4\E6\EF\DD\E6\EF\E4\E6\EF\E9\E6\EF\EE\E6\EF\EF\E6\EF\F3\E6\EF\F6\E6\EF\10\EC\EF\14\EC\EF$\EC\EF;\EC\EFZ\EC\EF\8A\EC\EF\AE\EC\EF\C7\EC\EF\D4\EC\EF\DD\EC\EF\E4\EC\EF\E9\EC\EF\EE\EC\EF\EF\EC\EF\F3\EC\EF\F6\EC\EF\10\F0\EF\14\F0\EF$\F0\EF;\F0\EFZ\F0\EF\8A\F0\EF\AE\F0\EF\C7\F0\EF\D4\F0\EF\DD\F0\EF\E4\F0\EF\E9\F0\EF\EE\F0\EF\EF\F0\EF\F3\F0\EF\F6\F0\EF\10\F3\EF\14\F3\EF$\F3\EF;\F3\EFZ\F3\EF\8A\F3\EF\AE\F3\EF\C7\F3\EF\D4\F3\EF\DD\F3\EF\E4\F3\EF\E9\F3\EF\EE\F3\EF\EF\F3\EF\F3\F3\EF\F6\F3\EF\10\F6\EF\14\F6\EF$\F6\EF;\F6\EFZ\F6\EF\8A\F6\EF\AE\F6\EF\C7\F6\EF\D4\F6\EF\DD\F6\EF\E4\F6\EF\E9\F6\EF\EE\F6\EF\EF\F6\EF\F3\F6\EF\F6\F6\EF\10\17\F3\14\17\F3$\17\F3;\17\F3Z\17\F3\8A\17\F3\AE\17\F3\C7\17\F3\D4\17\F3\DD\17\F3\E4\17\F3\E9\17\F3\EE\17\F3\EF\17\F3\F3\17\F3\F6\17\F3\10\17\F3\14\17\F3$\17\F3;\17\F3Z\17\F3\8A\17\F3\AE\17\F3\C7\17\F3\D4\17\F3\DD\17\F3\E4\17\F3\E9\17\F3\EE\17\F3\EF\17\F3\F3\17\F3\F6\17\F3\10$\F3\14$\F3$$\F3;$\F3Z$\F3\8A$\F3\AE$\F3\C7$\F3\D4$\F3\DD$\F3\E4$\F3\E9$\F3\EE$\F3\EF$\F3\F3$\F3\F6$\F3\102\F3\142\F3$2\F3;2\F3Z2\F3\8A2\F3\AE2\F3\C72\F3\D42\F3\DD2\F3\E42\F3\E92\F3\EE2\F3\EF2\F3\F32\F3\F62\F3\10D\F3\14D\F3$D\F3;D\F3ZD\F3\8AD\F3\AED\F3\C7D\F3\D4D\F3\DDD\F3\E4D\F3\E9D\F3\EED\F3\EFD\F3\F3D\F3\F6D\F3\10]\F3\14]\F3$]\F3;]\F3Z]\F3\8A]\F3\AE]\F3\C7]\F3\D4]\F3\DD]\F3\E4]\F3\E9]\F3\EE]\F3\EF]\F3\F3]\F3\F6]\F3\10\7F\F3\14\7F\F3$\7F\F3;\7F\F3Z\7F\F3\8A\7F\F3\AE\7F\F3\C7\7F\F3\D4\7F\F3\DD\7F\F3\E4\7F\F3\E9\7F\F3\EE\7F\F3\EF\7F\F3\F3\7F\F3\F6\7F\F3\10\A6\F3\14\A6\F3$\A6\F3;\A6\F3Z\A6\F3\8A\A6\F3\AE\A6\F3\C7\A6\F3\D4\A6\F3\DD\A6\F3\E4\A6\F3\E9\A6\F3\EE\A6\F3\EF\A6\F3\F3\A6\F3\F6\A6\F3\10\C2\F3\14\C2\F3$\C2\F3;\C2\F3Z\C2\F3\8A\C2\F3\AE\C2\F3\C7\C2\F3\D4\C2\F3\DD\C2\F3\E4\C2\F3\E9\C2\F3\EE\C2\F3\EF\C2\F3\F3\C2\F3\F6\C2\F3\10\D5\F3\14\D5\F3$\D5\F3;\D5\F3Z\D5\F3\8A\D5\F3\AE\D5\F3\C7\D5\F3\D4\D5\F3\DD\D5\F3\E4\D5\F3\E9\D5\F3\EE\D5\F3\EF\D5\F3\F3\D5\F3\F6\D5\F3\10\DF\F3\14\DF\F3$\DF\F3;\DF\F3Z\DF\F3\8A\DF\F3\AE\DF\F3\C7\DF\F3\D4\DF\F3\DD\DF\F3\E4\DF\F3\E9\DF\F3\EE\DF\F3\EF\DF\F3\F3\DF\F3\F6\DF\F3\10\E6\F3\14\E6\F3$\E6\F3;\E6\F3Z\E6\F3\8A\E6\F3\AE\E6\F3\C7\E6\F3\D4\E6\F3\DD\E6\F3\E4\E6\F3\E9\E6\F3\EE\E6\F3\EF\E6\F3\F3\E6\F3\F6\E6\F3\10\EC\F3\14\EC\F3$\EC\F3;\EC\F3Z\EC\F3\8A\EC\F3\AE\EC\F3\C7\EC\F3\D4\EC\F3\DD\EC\F3\E4\EC\F3\E9\EC\F3\EE\EC\F3\EF\EC\F3\F3\EC\F3\F6\EC\F3\10\F0\F3\14\F0\F3$\F0\F3;\F0\F3Z\F0\F3\8A\F0\F3\AE\F0\F3\C7\F0\F3\D4\F0\F3\DD\F0\F3\E4\F0\F3\E9\F0\F3\EE\F0\F3\EF\F0\F3\F3\F0\F3\F6\F0\F3\10\F3\F3\14\F3\F3$\F3\F3;\F3\F3Z\F3\F3\8A\F3\F3\AE\F3\F3\C7\F3\F3\D4\F3\F3\DD\F3\F3\E4\F3\F3\E9\F3\F3\EE\F3\F3\EF\F3\F3\F3\F3\F3\F6\F3\F3\10\F6\F3\14\F6\F3$\F6\F3;\F6\F3Z\F6\F3\8A\F6\F3\AE\F6\F3\C7\F6\F3\D4\F6\F3\DD\F6\F3\E4\F6\F3\E9\F6\F3\EE\F6\F3\EF\F6\F3\F3\F6\F3\F6\F6\F3\10\17\F6\14\17\F6$\17\F6;\17\F6Z\17\F6\8A\17\F6\AE\17\F6\C7\17\F6\D4\17\F6\DD\17\F6\E4\17\F6\E9\17\F6\EE\17\F6\EF\17\F6\F3\17\F6\F6\17\F6\10\17\F6\14\17\F6$\17\F6;\17\F6Z\17\F6\8A\17\F6\AE\17\F6\C7\17\F6\D4\17\F6\DD\17\F6\E4\17\F6\E9\17\F6\EE\17\F6\EF\17\F6\F3\17\F6\F6\17\F6\10$\F6\14$\F6$$\F6;$\F6Z$\F6\8A$\F6\AE$\F6\C7$\F6\D4$\F6\DD$\F6\E4$\F6\E9$\F6\EE$\F6\EF$\F6\F3$\F6\F6$\F6\102\F6\142\F6$2\F6;2\F6Z2\F6\8A2\F6\AE2\F6\C72\F6\D42\F6\DD2\F6\E42\F6\E92\F6\EE2\F6\EF2\F6\F32\F6\F62\F6\10D\F6\14D\F6$D\F6;D\F6ZD\F6\8AD\F6\AED\F6\C7D\F6\D4D\F6\DDD\F6\E4D\F6\E9D\F6\EED\F6\EFD\F6\F3D\F6\F6D\F6\10]\F6\14]\F6$]\F6;]\F6Z]\F6\8A]\F6\AE]\F6\C7]\F6\D4]\F6\DD]\F6\E4]\F6\E9]\F6\EE]\F6\EF]\F6\F3]\F6\F6]\F6\10\7F\F6\14\7F\F6$\7F\F6;\7F\F6Z\7F\F6\8A\7F\F6\AE\7F\F6\C7\7F\F6\D4\7F\F6\DD\7F\F6\E4\7F\F6\E9\7F\F6\EE\7F\F6\EF\7F\F6\F3\7F\F6\F6\7F\F6\10\A6\F6\14\A6\F6$\A6\F6;\A6\F6Z\A6\F6\8A\A6\F6\AE\A6\F6\C7\A6\F6\D4\A6\F6\DD\A6\F6\E4\A6\F6\E9\A6\F6\EE\A6\F6\EF\A6\F6\F3\A6\F6\F6\A6\F6\10\C2\F6\14\C2\F6$\C2\F6;\C2\F6Z\C2\F6\8A\C2\F6\AE\C2\F6\C7\C2\F6\D4\C2\F6\DD\C2\F6\E4\C2\F6\E9\C2\F6\EE\C2\F6\EF\C2\F6\F3\C2\F6\F6\C2\F6\10\D5\F6\14\D5\F6$\D5\F6;\D5\F6Z\D5\F6\8A\D5\F6\AE\D5\F6\C7\D5\F6\D4\D5\F6\DD\D5\F6\E4\D5\F6\E9\D5\F6\EE\D5\F6\EF\D5\F6\F3\D5\F6\F6\D5\F6\10\DF\F6\14\DF\F6$\DF\F6;\DF\F6Z\DF\F6\8A\DF\F6\AE\DF\F6\C7\DF\F6\D4\DF\F6\DD\DF\F6\E4\DF\F6\E9\DF\F6\EE\DF\F6\EF\DF\F6\F3\DF\F6\F6\DF\F6\10\E6\F6\14\E6\F6$\E6\F6;\E6\F6Z\E6\F6\8A\E6\F6\AE\E6\F6\C7\E6\F6\D4\E6\F6\DD\E6\F6\E4\E6\F6\E9\E6\F6\EE\E6\F6\EF\E6\F6\F3\E6\F6\F6\E6\F6\10\EC\F6\14\EC\F6$\EC\F6;\EC\F6Z\EC\F6\8A\EC\F6\AE\EC\F6\C7\EC\F6\D4\EC\F6\DD\EC\F6\E4\EC\F6\E9\EC\F6\EE\EC\F6\EF\EC\F6\F3\EC\F6\F6\EC\F6\10\F0\F6\14\F0\F6$\F0\F6;\F0\F6Z\F0\F6\8A\F0\F6\AE\F0\F6\C7\F0\F6\D4\F0\F6\DD\F0\F6\E4\F0\F6\E9\F0\F6\EE\F0\F6\EF\F0\F6\F3\F0\F6\F6\F0\F6\10\F3\F6\14\F3\F6$\F3\F6;\F3\F6Z\F3\F6\8A\F3\F6\AE\F3\F6\C7\F3\F6\D4\F3\F6\DD\F3\F6\E4\F3\F6\E9\F3\F6\EE\F3\F6\EF\F3\F6\F3\F3\F6\F6\F3\F6\10\F6\F6\14\F6\F6$\F6\F6;\F6\F6Z\F6\F6\8A\F6\F6\AE\F6\F6\C7\F6\F6\D4\F6\F6\DD\F6\F6\E4\F6\F6\E9\F6\F6\EE\F6\F6\EF\F6\F6\F3\F6\F6\F6\F6\F6", align 1
@texture_color_correction = global i32 0, align 4
@time_last_frame = global i32 0, align 4
@fps_max = global float 0.000000e+00, align 4
@fps_min = global float 1.000000e+04, align 4
@fps_last = global [100 x float] zeroinitializer, align 4
@per_last = global [100 x float] zeroinitializer, align 4
@fps_last_update = global i32 0, align 4
@chunks_to_draw_x = global [2500 x i32] zeroinitializer, align 4
@chunks_to_draw_y = global [2500 x i32] zeroinitializer, align 4
@.str = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@wireframe_x = global float 0.000000e+00, align 4
@wireframe_y = global float 0.000000e+00, align 4
@wireframe_z = global float 0.000000e+00, align 4
@texture_checkerboard = global i32 0, align 4
@.str1 = private unnamed_addr constant [19 x i8] c"glPointParameterfv\00", align 1
@.str2 = private unnamed_addr constant [15 x i8] c"glCreateShader\00", align 1
@.str3 = private unnamed_addr constant [15 x i8] c"glShaderSource\00", align 1
@.str4 = private unnamed_addr constant [16 x i8] c"glCompileShader\00", align 1
@.str5 = private unnamed_addr constant [16 x i8] c"glCreateProgram\00", align 1
@.str6 = private unnamed_addr constant [15 x i8] c"glAttachShader\00", align 1
@.str7 = private unnamed_addr constant [14 x i8] c"glLinkProgram\00", align 1
@.str8 = private unnamed_addr constant [13 x i8] c"glUseProgram\00", align 1
@.str9 = private unnamed_addr constant [21 x i8] c"glGetUniformLocation\00", align 1
@.str10 = private unnamed_addr constant [12 x i8] c"glUniform1f\00", align 1
@.str11 = private unnamed_addr constant [12 x i8] c"glUniform4f\00", align 1
@.str12 = private unnamed_addr constant [12 x i8] c"glUniform1i\00", align 1
@.str13 = private unnamed_addr constant [14 x i8] c"vertex.shader\00", align 1
@.str14 = private unnamed_addr constant [16 x i8] c"fragment.shader\00", align 1
@.str15 = private unnamed_addr constant [11 x i8] c"point_size\00", align 1
@.str16 = private unnamed_addr constant [18 x i8] c"near_plane_height\00", align 1
@.str17 = private unnamed_addr constant [9 x i8] c"camera_x\00", align 1
@.str18 = private unnamed_addr constant [9 x i8] c"camera_z\00", align 1
@.str19 = private unnamed_addr constant [13 x i8] c"fog_distance\00", align 1
@.str20 = private unnamed_addr constant [11 x i8] c"max_size_x\00", align 1
@.str21 = private unnamed_addr constant [11 x i8] c"max_size_z\00", align 1
@.str22 = private unnamed_addr constant [10 x i8] c"fog_color\00", align 1
@.str23 = private unnamed_addr constant [25 x i8] c"setting_color_correction\00", align 1
@.str24 = private unnamed_addr constant [8 x i8] c"draw_ui\00", align 1
@ogl_display.fog_color = private unnamed_addr constant [4 x float] [float 5.000000e-01, float 0x3FED1D14E0000000, float 1.000000e+00, float 1.000000e+00], align 4
@.str25 = private unnamed_addr constant [32 x i8] c"GL_ARB_texture_non_power_of_two\00", align 1
@camera_terrain_pick.ret = internal global [3 x i32] zeroinitializer, align 4
@camera_terrain_pick.ret26 = internal global [3 x i32] zeroinitializer, align 4
@camera_terrain_pick.ret27 = internal global [3 x i32] zeroinitializer, align 4
@update_point_size.distance_attenuation = private unnamed_addr constant [3 x float] [float 0.000000e+00, float 0.000000e+00, float 1.000000e+00], align 4

; Function Attrs: nounwind
define void @map_apply_gravity() #0 {
  %1 = load i32* @map_checked_voxels_index, align 4, !tbaa !1
  %2 = icmp sgt i32 %1, 0
  br i1 %2, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %0
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.critedge
  %3 = phi i32 [ %29, %.critedge ], [ %1, %.lr.ph.preheader ]
  %k.03 = phi i32 [ %30, %.critedge ], [ 0, %.lr.ph.preheader ]
  %4 = getelementptr inbounds [8192 x i32]* @map_checked_voxels_x, i32 0, i32 %k.03
  %5 = load i32* %4, align 4, !tbaa !1
  %6 = getelementptr inbounds [8192 x i32]* @map_checked_voxels_y, i32 0, i32 %k.03
  %7 = load i32* %6, align 4, !tbaa !1
  %8 = getelementptr inbounds [8192 x i32]* @map_checked_voxels_z, i32 0, i32 %k.03
  %9 = load i32* %8, align 4, !tbaa !1
  %10 = or i32 %7, %5
  %11 = or i32 %10, %9
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %.critedge, label %13

; <label>:13                                      ; preds = %.lr.ph
  %14 = load i32* @map_size_x, align 4, !tbaa !1
  %15 = icmp sgt i32 %14, %5
  %16 = load i32* @map_size_y, align 4
  %17 = icmp sgt i32 %16, %7
  %or.cond.i = and i1 %15, %17
  br i1 %or.cond.i, label %18, label %.critedge

; <label>:18                                      ; preds = %13
  %19 = load i32* @map_size_z, align 4, !tbaa !1
  %20 = icmp sgt i32 %19, %9
  br i1 %20, label %map_get.exit, label %.critedge

map_get.exit:                                     ; preds = %18
  %21 = mul nsw i32 %19, %7
  %22 = add nsw i32 %21, %9
  %23 = mul nsw i32 %22, %14
  %24 = add nsw i32 %23, %5
  %25 = load i64** @map_colors, align 4, !tbaa !5
  %26 = getelementptr inbounds i64* %25, i32 %24
  %27 = load i64* %26, align 4, !tbaa !7
  %extract.t = trunc i64 %27 to i32
  %phitmp = icmp eq i32 %extract.t, -1
  br i1 %phitmp, label %.critedge, label %28

; <label>:28                                      ; preds = %map_get.exit
  tail call void @map_set(i32 %5, i32 %7, i32 %9, i64 4294967295)
  %.pre = load i32* @map_checked_voxels_index, align 4, !tbaa !1
  br label %.critedge

.critedge:                                        ; preds = %.lr.ph, %13, %18, %map_get.exit, %28
  %29 = phi i32 [ %3, %.lr.ph ], [ %3, %13 ], [ %3, %18 ], [ %3, %map_get.exit ], [ %.pre, %28 ]
  %30 = add nsw i32 %k.03, 1
  %31 = icmp slt i32 %30, %29
  br i1 %31, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %.critedge
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %0
  ret void
}

; Function Attrs: nounwind readonly
define i64 @map_get(i32 %x, i32 %y, i32 %z) #1 {
  %1 = or i32 %y, %x
  %2 = or i32 %1, %z
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %20, label %4

; <label>:4                                       ; preds = %0
  %5 = load i32* @map_size_x, align 4, !tbaa !1
  %6 = icmp sgt i32 %5, %x
  %7 = load i32* @map_size_y, align 4
  %8 = icmp sgt i32 %7, %y
  %or.cond = and i1 %6, %8
  br i1 %or.cond, label %9, label %20

; <label>:9                                       ; preds = %4
  %10 = load i32* @map_size_z, align 4, !tbaa !1
  %11 = icmp sgt i32 %10, %z
  br i1 %11, label %12, label %20

; <label>:12                                      ; preds = %9
  %13 = mul nsw i32 %10, %y
  %14 = add nsw i32 %13, %z
  %15 = mul nsw i32 %14, %5
  %16 = add nsw i32 %15, %x
  %17 = load i64** @map_colors, align 4, !tbaa !5
  %18 = getelementptr inbounds i64* %17, i32 %16
  %19 = load i64* %18, align 4, !tbaa !7
  br label %20

; <label>:20                                      ; preds = %0, %4, %9, %12
  %.0 = phi i64 [ %19, %12 ], [ 4294967295, %9 ], [ 4294967295, %4 ], [ 4294967295, %0 ]
  ret i64 %.0
}

; Function Attrs: nounwind
define void @map_set(i32 %x, i32 %y, i32 %z, i64 %color) #0 {
  %1 = or i32 %y, %x
  %2 = or i32 %1, %z
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %chunk_block_update.exit36, label %4

; <label>:4                                       ; preds = %0
  %5 = load i32* @map_size_x, align 4, !tbaa !1
  %6 = icmp sgt i32 %5, %x
  %7 = load i32* @map_size_y, align 4
  %8 = icmp sgt i32 %7, %y
  %or.cond = and i1 %6, %8
  br i1 %or.cond, label %9, label %chunk_block_update.exit36

; <label>:9                                       ; preds = %4
  %10 = load i32* @map_size_z, align 4, !tbaa !1
  %11 = icmp sgt i32 %10, %z
  br i1 %11, label %12, label %chunk_block_update.exit36

; <label>:12                                      ; preds = %9
  %13 = mul nsw i32 %10, %y
  %14 = add nsw i32 %13, %z
  %15 = mul nsw i32 %14, %5
  %16 = add nsw i32 %15, %x
  %17 = load i64** @map_colors, align 4, !tbaa !5
  %18 = getelementptr inbounds i64* %17, i32 %16
  store i64 %color, i64* %18, align 4, !tbaa !7
  %19 = sdiv i32 %z, 16
  %20 = shl nsw i32 %19, 5
  %21 = sdiv i32 %x, 16
  %22 = add nsw i32 %20, %21
  %23 = load i32* @chunk_geometry_changed_lenght, align 4, !tbaa !1
  %24 = icmp sgt i32 %23, 0
  br i1 %24, label %.lr.ph.i.preheader, label %._crit_edge.i

.lr.ph.i.preheader:                               ; preds = %12
  br label %.lr.ph.i

; <label>:25                                      ; preds = %.lr.ph.i
  %26 = icmp slt i32 %30, %23
  br i1 %26, label %.lr.ph.i, label %._crit_edge.i.loopexit

.lr.ph.i:                                         ; preds = %.lr.ph.i.preheader, %25
  %k.02.i = phi i32 [ %30, %25 ], [ 0, %.lr.ph.i.preheader ]
  %27 = getelementptr inbounds [1024 x i32]* @chunk_geometry_changed, i32 0, i32 %k.02.i
  %28 = load i32* %27, align 4, !tbaa !1
  %29 = icmp eq i32 %28, %22
  %30 = add nsw i32 %k.02.i, 1
  br i1 %29, label %chunk_block_update.exit.loopexit, label %25

._crit_edge.i.loopexit:                           ; preds = %25
  br label %._crit_edge.i

._crit_edge.i:                                    ; preds = %._crit_edge.i.loopexit, %12
  %31 = add nsw i32 %23, 1
  store i32 %31, i32* @chunk_geometry_changed_lenght, align 4, !tbaa !1
  %32 = getelementptr inbounds [1024 x i32]* @chunk_geometry_changed, i32 0, i32 %23
  store i32 %22, i32* %32, align 4, !tbaa !1
  br label %chunk_block_update.exit

chunk_block_update.exit.loopexit:                 ; preds = %.lr.ph.i
  br label %chunk_block_update.exit

chunk_block_update.exit:                          ; preds = %chunk_block_update.exit.loopexit, %._crit_edge.i
  %33 = phi i32 [ %31, %._crit_edge.i ], [ %23, %chunk_block_update.exit.loopexit ]
  %34 = srem i32 %x, 16
  %35 = srem i32 %z, 16
  %36 = icmp sgt i32 %x, 0
  %37 = and i32 %34, 255
  %38 = icmp eq i32 %37, 0
  %or.cond10 = and i1 %36, %38
  br i1 %or.cond10, label %39, label %chunk_block_update.exit64

; <label>:39                                      ; preds = %chunk_block_update.exit
  %40 = add nsw i32 %x, -1
  %41 = sdiv i32 %40, 16
  %42 = add nsw i32 %41, %20
  %43 = icmp sgt i32 %33, 0
  br i1 %43, label %.lr.ph.i62.preheader, label %._crit_edge.i63

.lr.ph.i62.preheader:                             ; preds = %39
  br label %.lr.ph.i62

; <label>:44                                      ; preds = %.lr.ph.i62
  %45 = icmp slt i32 %49, %33
  br i1 %45, label %.lr.ph.i62, label %._crit_edge.i63.loopexit

.lr.ph.i62:                                       ; preds = %.lr.ph.i62.preheader, %44
  %k.02.i61 = phi i32 [ %49, %44 ], [ 0, %.lr.ph.i62.preheader ]
  %46 = getelementptr inbounds [1024 x i32]* @chunk_geometry_changed, i32 0, i32 %k.02.i61
  %47 = load i32* %46, align 4, !tbaa !1
  %48 = icmp eq i32 %47, %42
  %49 = add nsw i32 %k.02.i61, 1
  br i1 %48, label %chunk_block_update.exit64.loopexit, label %44

._crit_edge.i63.loopexit:                         ; preds = %44
  br label %._crit_edge.i63

._crit_edge.i63:                                  ; preds = %._crit_edge.i63.loopexit, %39
  %50 = add nsw i32 %33, 1
  store i32 %50, i32* @chunk_geometry_changed_lenght, align 4, !tbaa !1
  %51 = getelementptr inbounds [1024 x i32]* @chunk_geometry_changed, i32 0, i32 %33
  store i32 %42, i32* %51, align 4, !tbaa !1
  br label %chunk_block_update.exit64

chunk_block_update.exit64.loopexit:               ; preds = %.lr.ph.i62
  br label %chunk_block_update.exit64

chunk_block_update.exit64:                        ; preds = %chunk_block_update.exit64.loopexit, %._crit_edge.i63, %chunk_block_update.exit
  %52 = phi i32 [ %50, %._crit_edge.i63 ], [ %33, %chunk_block_update.exit ], [ %33, %chunk_block_update.exit64.loopexit ]
  %53 = icmp sgt i32 %z, 0
  %54 = and i32 %35, 255
  %55 = icmp eq i32 %54, 0
  %or.cond12 = and i1 %53, %55
  br i1 %or.cond12, label %56, label %chunk_block_update.exit60

; <label>:56                                      ; preds = %chunk_block_update.exit64
  %57 = add nsw i32 %z, -1
  %58 = sdiv i32 %57, 16
  %59 = shl nsw i32 %58, 5
  %60 = add nsw i32 %59, %21
  %61 = icmp sgt i32 %52, 0
  br i1 %61, label %.lr.ph.i58.preheader, label %._crit_edge.i59

.lr.ph.i58.preheader:                             ; preds = %56
  br label %.lr.ph.i58

; <label>:62                                      ; preds = %.lr.ph.i58
  %63 = icmp slt i32 %67, %52
  br i1 %63, label %.lr.ph.i58, label %._crit_edge.i59.loopexit

.lr.ph.i58:                                       ; preds = %.lr.ph.i58.preheader, %62
  %k.02.i57 = phi i32 [ %67, %62 ], [ 0, %.lr.ph.i58.preheader ]
  %64 = getelementptr inbounds [1024 x i32]* @chunk_geometry_changed, i32 0, i32 %k.02.i57
  %65 = load i32* %64, align 4, !tbaa !1
  %66 = icmp eq i32 %65, %60
  %67 = add nsw i32 %k.02.i57, 1
  br i1 %66, label %chunk_block_update.exit60.loopexit, label %62

._crit_edge.i59.loopexit:                         ; preds = %62
  br label %._crit_edge.i59

._crit_edge.i59:                                  ; preds = %._crit_edge.i59.loopexit, %56
  %68 = add nsw i32 %52, 1
  store i32 %68, i32* @chunk_geometry_changed_lenght, align 4, !tbaa !1
  %69 = getelementptr inbounds [1024 x i32]* @chunk_geometry_changed, i32 0, i32 %52
  store i32 %60, i32* %69, align 4, !tbaa !1
  br label %chunk_block_update.exit60

chunk_block_update.exit60.loopexit:               ; preds = %.lr.ph.i58
  br label %chunk_block_update.exit60

chunk_block_update.exit60:                        ; preds = %chunk_block_update.exit60.loopexit, %._crit_edge.i59, %chunk_block_update.exit64
  %70 = phi i32 [ %68, %._crit_edge.i59 ], [ %52, %chunk_block_update.exit64 ], [ %52, %chunk_block_update.exit60.loopexit ]
  %71 = add nsw i32 %5, -1
  %72 = icmp sgt i32 %71, %x
  %73 = icmp eq i32 %37, 15
  %or.cond14 = and i1 %72, %73
  br i1 %or.cond14, label %74, label %chunk_block_update.exit56

; <label>:74                                      ; preds = %chunk_block_update.exit60
  %75 = add nsw i32 %x, 1
  %76 = sdiv i32 %75, 16
  %77 = add nsw i32 %76, %20
  %78 = icmp sgt i32 %70, 0
  br i1 %78, label %.lr.ph.i54.preheader, label %._crit_edge.i55

.lr.ph.i54.preheader:                             ; preds = %74
  br label %.lr.ph.i54

; <label>:79                                      ; preds = %.lr.ph.i54
  %80 = icmp slt i32 %84, %70
  br i1 %80, label %.lr.ph.i54, label %._crit_edge.i55.loopexit

.lr.ph.i54:                                       ; preds = %.lr.ph.i54.preheader, %79
  %k.02.i53 = phi i32 [ %84, %79 ], [ 0, %.lr.ph.i54.preheader ]
  %81 = getelementptr inbounds [1024 x i32]* @chunk_geometry_changed, i32 0, i32 %k.02.i53
  %82 = load i32* %81, align 4, !tbaa !1
  %83 = icmp eq i32 %82, %77
  %84 = add nsw i32 %k.02.i53, 1
  br i1 %83, label %chunk_block_update.exit56.loopexit, label %79

._crit_edge.i55.loopexit:                         ; preds = %79
  br label %._crit_edge.i55

._crit_edge.i55:                                  ; preds = %._crit_edge.i55.loopexit, %74
  %85 = add nsw i32 %70, 1
  store i32 %85, i32* @chunk_geometry_changed_lenght, align 4, !tbaa !1
  %86 = getelementptr inbounds [1024 x i32]* @chunk_geometry_changed, i32 0, i32 %70
  store i32 %77, i32* %86, align 4, !tbaa !1
  br label %chunk_block_update.exit56

chunk_block_update.exit56.loopexit:               ; preds = %.lr.ph.i54
  br label %chunk_block_update.exit56

chunk_block_update.exit56:                        ; preds = %chunk_block_update.exit56.loopexit, %._crit_edge.i55, %chunk_block_update.exit60
  %87 = phi i32 [ %85, %._crit_edge.i55 ], [ %70, %chunk_block_update.exit60 ], [ %70, %chunk_block_update.exit56.loopexit ]
  %88 = add nsw i32 %10, -1
  %89 = icmp sgt i32 %88, %z
  %90 = icmp eq i32 %54, 15
  %or.cond16 = and i1 %89, %90
  br i1 %or.cond16, label %91, label %chunk_block_update.exit52

; <label>:91                                      ; preds = %chunk_block_update.exit56
  %92 = add nsw i32 %z, 1
  %93 = sdiv i32 %92, 16
  %94 = shl nsw i32 %93, 5
  %95 = add nsw i32 %94, %21
  %96 = icmp sgt i32 %87, 0
  br i1 %96, label %.lr.ph.i50.preheader, label %._crit_edge.i51

.lr.ph.i50.preheader:                             ; preds = %91
  br label %.lr.ph.i50

; <label>:97                                      ; preds = %.lr.ph.i50
  %98 = icmp slt i32 %102, %87
  br i1 %98, label %.lr.ph.i50, label %._crit_edge.i51.loopexit

.lr.ph.i50:                                       ; preds = %.lr.ph.i50.preheader, %97
  %k.02.i49 = phi i32 [ %102, %97 ], [ 0, %.lr.ph.i50.preheader ]
  %99 = getelementptr inbounds [1024 x i32]* @chunk_geometry_changed, i32 0, i32 %k.02.i49
  %100 = load i32* %99, align 4, !tbaa !1
  %101 = icmp eq i32 %100, %95
  %102 = add nsw i32 %k.02.i49, 1
  br i1 %101, label %chunk_block_update.exit52.loopexit, label %97

._crit_edge.i51.loopexit:                         ; preds = %97
  br label %._crit_edge.i51

._crit_edge.i51:                                  ; preds = %._crit_edge.i51.loopexit, %91
  %103 = add nsw i32 %87, 1
  store i32 %103, i32* @chunk_geometry_changed_lenght, align 4, !tbaa !1
  %104 = getelementptr inbounds [1024 x i32]* @chunk_geometry_changed, i32 0, i32 %87
  store i32 %95, i32* %104, align 4, !tbaa !1
  br label %chunk_block_update.exit52

chunk_block_update.exit52.loopexit:               ; preds = %.lr.ph.i50
  br label %chunk_block_update.exit52

chunk_block_update.exit52:                        ; preds = %chunk_block_update.exit52.loopexit, %._crit_edge.i51, %chunk_block_update.exit56
  %105 = phi i32 [ %103, %._crit_edge.i51 ], [ %87, %chunk_block_update.exit56 ], [ %87, %chunk_block_update.exit52.loopexit ]
  %or.cond5 = and i1 %36, %53
  %or.cond18 = and i1 %or.cond5, %38
  %or.cond20 = and i1 %or.cond18, %55
  br i1 %or.cond20, label %106, label %chunk_block_update.exit48

; <label>:106                                     ; preds = %chunk_block_update.exit52
  %107 = add nsw i32 %x, -1
  %108 = add nsw i32 %z, -1
  %109 = sdiv i32 %108, 16
  %110 = shl nsw i32 %109, 5
  %111 = sdiv i32 %107, 16
  %112 = add nsw i32 %110, %111
  %113 = icmp sgt i32 %105, 0
  br i1 %113, label %.lr.ph.i46.preheader, label %._crit_edge.i47

.lr.ph.i46.preheader:                             ; preds = %106
  br label %.lr.ph.i46

; <label>:114                                     ; preds = %.lr.ph.i46
  %115 = icmp slt i32 %119, %105
  br i1 %115, label %.lr.ph.i46, label %._crit_edge.i47.loopexit

.lr.ph.i46:                                       ; preds = %.lr.ph.i46.preheader, %114
  %k.02.i45 = phi i32 [ %119, %114 ], [ 0, %.lr.ph.i46.preheader ]
  %116 = getelementptr inbounds [1024 x i32]* @chunk_geometry_changed, i32 0, i32 %k.02.i45
  %117 = load i32* %116, align 4, !tbaa !1
  %118 = icmp eq i32 %117, %112
  %119 = add nsw i32 %k.02.i45, 1
  br i1 %118, label %chunk_block_update.exit48.loopexit, label %114

._crit_edge.i47.loopexit:                         ; preds = %114
  br label %._crit_edge.i47

._crit_edge.i47:                                  ; preds = %._crit_edge.i47.loopexit, %106
  %120 = add nsw i32 %105, 1
  store i32 %120, i32* @chunk_geometry_changed_lenght, align 4, !tbaa !1
  %121 = getelementptr inbounds [1024 x i32]* @chunk_geometry_changed, i32 0, i32 %105
  store i32 %112, i32* %121, align 4, !tbaa !1
  br label %chunk_block_update.exit48

chunk_block_update.exit48.loopexit:               ; preds = %.lr.ph.i46
  br label %chunk_block_update.exit48

chunk_block_update.exit48:                        ; preds = %chunk_block_update.exit48.loopexit, %._crit_edge.i47, %chunk_block_update.exit52
  %122 = phi i32 [ %120, %._crit_edge.i47 ], [ %105, %chunk_block_update.exit52 ], [ %105, %chunk_block_update.exit48.loopexit ]
  %or.cond22 = and i1 %89, %73
  %or.cond24 = and i1 %or.cond22, %90
  %or.cond65 = and i1 %72, %or.cond24
  br i1 %or.cond65, label %123, label %chunk_block_update.exit44

; <label>:123                                     ; preds = %chunk_block_update.exit48
  %124 = add nsw i32 %x, 1
  %125 = add nsw i32 %z, 1
  %126 = sdiv i32 %125, 16
  %127 = shl nsw i32 %126, 5
  %128 = sdiv i32 %124, 16
  %129 = add nsw i32 %127, %128
  %130 = icmp sgt i32 %122, 0
  br i1 %130, label %.lr.ph.i42.preheader, label %._crit_edge.i43

.lr.ph.i42.preheader:                             ; preds = %123
  br label %.lr.ph.i42

; <label>:131                                     ; preds = %.lr.ph.i42
  %132 = icmp slt i32 %136, %122
  br i1 %132, label %.lr.ph.i42, label %._crit_edge.i43.loopexit

.lr.ph.i42:                                       ; preds = %.lr.ph.i42.preheader, %131
  %k.02.i41 = phi i32 [ %136, %131 ], [ 0, %.lr.ph.i42.preheader ]
  %133 = getelementptr inbounds [1024 x i32]* @chunk_geometry_changed, i32 0, i32 %k.02.i41
  %134 = load i32* %133, align 4, !tbaa !1
  %135 = icmp eq i32 %134, %129
  %136 = add nsw i32 %k.02.i41, 1
  br i1 %135, label %chunk_block_update.exit44.loopexit, label %131

._crit_edge.i43.loopexit:                         ; preds = %131
  br label %._crit_edge.i43

._crit_edge.i43:                                  ; preds = %._crit_edge.i43.loopexit, %123
  %137 = add nsw i32 %122, 1
  store i32 %137, i32* @chunk_geometry_changed_lenght, align 4, !tbaa !1
  %138 = getelementptr inbounds [1024 x i32]* @chunk_geometry_changed, i32 0, i32 %122
  store i32 %129, i32* %138, align 4, !tbaa !1
  br label %chunk_block_update.exit44

chunk_block_update.exit44.loopexit:               ; preds = %.lr.ph.i42
  br label %chunk_block_update.exit44

chunk_block_update.exit44:                        ; preds = %chunk_block_update.exit44.loopexit, %._crit_edge.i43, %chunk_block_update.exit48
  %139 = phi i32 [ %137, %._crit_edge.i43 ], [ %122, %chunk_block_update.exit48 ], [ %122, %chunk_block_update.exit44.loopexit ]
  %or.cond26 = and i1 %89, %38
  %or.cond28 = and i1 %or.cond26, %90
  %or.cond66 = and i1 %36, %or.cond28
  br i1 %or.cond66, label %140, label %chunk_block_update.exit40

; <label>:140                                     ; preds = %chunk_block_update.exit44
  %141 = add nsw i32 %x, -1
  %142 = add nsw i32 %z, 1
  %143 = sdiv i32 %142, 16
  %144 = shl nsw i32 %143, 5
  %145 = sdiv i32 %141, 16
  %146 = add nsw i32 %144, %145
  %147 = icmp sgt i32 %139, 0
  br i1 %147, label %.lr.ph.i38.preheader, label %._crit_edge.i39

.lr.ph.i38.preheader:                             ; preds = %140
  br label %.lr.ph.i38

; <label>:148                                     ; preds = %.lr.ph.i38
  %149 = icmp slt i32 %153, %139
  br i1 %149, label %.lr.ph.i38, label %._crit_edge.i39.loopexit

.lr.ph.i38:                                       ; preds = %.lr.ph.i38.preheader, %148
  %k.02.i37 = phi i32 [ %153, %148 ], [ 0, %.lr.ph.i38.preheader ]
  %150 = getelementptr inbounds [1024 x i32]* @chunk_geometry_changed, i32 0, i32 %k.02.i37
  %151 = load i32* %150, align 4, !tbaa !1
  %152 = icmp eq i32 %151, %146
  %153 = add nsw i32 %k.02.i37, 1
  br i1 %152, label %chunk_block_update.exit40.loopexit, label %148

._crit_edge.i39.loopexit:                         ; preds = %148
  br label %._crit_edge.i39

._crit_edge.i39:                                  ; preds = %._crit_edge.i39.loopexit, %140
  %154 = add nsw i32 %139, 1
  store i32 %154, i32* @chunk_geometry_changed_lenght, align 4, !tbaa !1
  %155 = getelementptr inbounds [1024 x i32]* @chunk_geometry_changed, i32 0, i32 %139
  store i32 %146, i32* %155, align 4, !tbaa !1
  br label %chunk_block_update.exit40

chunk_block_update.exit40.loopexit:               ; preds = %.lr.ph.i38
  br label %chunk_block_update.exit40

chunk_block_update.exit40:                        ; preds = %chunk_block_update.exit40.loopexit, %._crit_edge.i39, %chunk_block_update.exit44
  %156 = phi i32 [ %154, %._crit_edge.i39 ], [ %139, %chunk_block_update.exit44 ], [ %139, %chunk_block_update.exit40.loopexit ]
  %or.cond7 = and i1 %72, %53
  %or.cond30 = and i1 %or.cond7, %73
  %or.cond32 = and i1 %or.cond30, %55
  br i1 %or.cond32, label %157, label %chunk_block_update.exit36

; <label>:157                                     ; preds = %chunk_block_update.exit40
  %158 = add nsw i32 %x, 1
  %159 = add nsw i32 %z, -1
  %160 = sdiv i32 %159, 16
  %161 = shl nsw i32 %160, 5
  %162 = sdiv i32 %158, 16
  %163 = add nsw i32 %161, %162
  %164 = icmp sgt i32 %156, 0
  br i1 %164, label %.lr.ph.i34.preheader, label %._crit_edge.i35

.lr.ph.i34.preheader:                             ; preds = %157
  br label %.lr.ph.i34

; <label>:165                                     ; preds = %.lr.ph.i34
  %166 = icmp slt i32 %170, %156
  br i1 %166, label %.lr.ph.i34, label %._crit_edge.i35.loopexit

.lr.ph.i34:                                       ; preds = %.lr.ph.i34.preheader, %165
  %k.02.i33 = phi i32 [ %170, %165 ], [ 0, %.lr.ph.i34.preheader ]
  %167 = getelementptr inbounds [1024 x i32]* @chunk_geometry_changed, i32 0, i32 %k.02.i33
  %168 = load i32* %167, align 4, !tbaa !1
  %169 = icmp eq i32 %168, %163
  %170 = add nsw i32 %k.02.i33, 1
  br i1 %169, label %chunk_block_update.exit36.loopexit, label %165

._crit_edge.i35.loopexit:                         ; preds = %165
  br label %._crit_edge.i35

._crit_edge.i35:                                  ; preds = %._crit_edge.i35.loopexit, %157
  %171 = add nsw i32 %156, 1
  store i32 %171, i32* @chunk_geometry_changed_lenght, align 4, !tbaa !1
  %172 = getelementptr inbounds [1024 x i32]* @chunk_geometry_changed, i32 0, i32 %156
  store i32 %163, i32* %172, align 4, !tbaa !1
  br label %chunk_block_update.exit36

chunk_block_update.exit36.loopexit:               ; preds = %.lr.ph.i34
  br label %chunk_block_update.exit36

chunk_block_update.exit36:                        ; preds = %chunk_block_update.exit36.loopexit, %._crit_edge.i35, %9, %4, %0, %chunk_block_update.exit40
  ret void
}

; Function Attrs: nounwind readonly
define zeroext i8 @map_checked_voxels_contains(i32 %x, i32 %y, i32 %z) #1 {
  %1 = load i32* @map_checked_voxels_index, align 4, !tbaa !1
  %2 = icmp sgt i32 %1, 0
  br i1 %2, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %0
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.backedge
  %k.02.in = phi i32 [ %k.02, %.backedge ], [ %1, %.lr.ph.preheader ]
  %k.02 = add nsw i32 %k.02.in, -1
  %3 = getelementptr inbounds [8192 x i32]* @map_checked_voxels_x, i32 0, i32 %k.02
  %4 = load i32* %3, align 4, !tbaa !1
  %5 = icmp eq i32 %4, %x
  br i1 %5, label %7, label %.backedge

.backedge:                                        ; preds = %.lr.ph, %7, %11
  %6 = icmp sgt i32 %k.02, 0
  br i1 %6, label %.lr.ph, label %._crit_edge.loopexit

; <label>:7                                       ; preds = %.lr.ph
  %8 = getelementptr inbounds [8192 x i32]* @map_checked_voxels_y, i32 0, i32 %k.02
  %9 = load i32* %8, align 4, !tbaa !1
  %10 = icmp eq i32 %9, %y
  br i1 %10, label %11, label %.backedge

; <label>:11                                      ; preds = %7
  %12 = getelementptr inbounds [8192 x i32]* @map_checked_voxels_z, i32 0, i32 %k.02
  %13 = load i32* %12, align 4, !tbaa !1
  %14 = icmp eq i32 %13, %z
  br i1 %14, label %._crit_edge.loopexit, label %.backedge

._crit_edge.loopexit:                             ; preds = %.backedge, %11
  %.0.ph = phi i8 [ 1, %11 ], [ 0, %.backedge ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %0
  %.0 = phi i8 [ 0, %0 ], [ %.0.ph, %._crit_edge.loopexit ]
  ret i8 %.0
}

; Function Attrs: nounwind
define void @map_ground_connected_sub(i32 %x, i32 %y, i32 %z, i32 %depth) #0 {
  %1 = load i32* @map_checked_voxels_index, align 4, !tbaa !1
  %2 = getelementptr inbounds [8192 x i32]* @map_checked_voxels_x, i32 0, i32 %1
  store i32 %x, i32* %2, align 4, !tbaa !1
  %3 = getelementptr inbounds [8192 x i32]* @map_checked_voxels_y, i32 0, i32 %1
  store i32 %y, i32* %3, align 4, !tbaa !1
  %4 = add nsw i32 %1, 1
  store i32 %4, i32* @map_checked_voxels_index, align 4, !tbaa !1
  %5 = getelementptr inbounds [8192 x i32]* @map_checked_voxels_z, i32 0, i32 %1
  store i32 %z, i32* %5, align 4, !tbaa !1
  %6 = icmp eq i32 %y, 0
  br i1 %6, label %tailrecurse._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %0
  %7 = or i32 %z, %x
  %8 = add nsw i32 %x, 1
  %9 = or i32 %8, %z
  %10 = add nsw i32 %x, -1
  %11 = or i32 %10, %z
  %12 = add nsw i32 %z, 1
  %13 = add nsw i32 %z, -1
  br label %14

tailrecurse._crit_edge.loopexit:                  ; preds = %tailrecurse
  br label %tailrecurse._crit_edge

tailrecurse._crit_edge:                           ; preds = %tailrecurse._crit_edge.loopexit, %0
  store i8 1, i8* @map_ground_connected_result, align 1, !tbaa !9
  br label %map_get.exit19.thread

; <label>:14                                      ; preds = %.lr.ph, %tailrecurse
  %15 = phi i32 [ %4, %.lr.ph ], [ %233, %tailrecurse ]
  %depth.tr63 = phi i32 [ %depth, %.lr.ph ], [ %230, %tailrecurse ]
  %y.tr59 = phi i32 [ %y, %.lr.ph ], [ %195, %tailrecurse ]
  %16 = add nsw i32 %y.tr59, -1
  %17 = or i32 %7, %16
  %18 = icmp slt i32 %17, 0
  br i1 %18, label %map_get.exit.thread, label %19

; <label>:19                                      ; preds = %14
  %20 = load i32* @map_size_x, align 4, !tbaa !1
  %21 = icmp sgt i32 %20, %x
  %22 = load i32* @map_size_y, align 4
  %23 = icmp sgt i32 %22, %16
  %or.cond.i = and i1 %21, %23
  br i1 %or.cond.i, label %24, label %map_get.exit.thread

; <label>:24                                      ; preds = %19
  %25 = load i32* @map_size_z, align 4, !tbaa !1
  %26 = icmp sgt i32 %25, %z
  br i1 %26, label %map_get.exit, label %map_get.exit.thread

map_get.exit:                                     ; preds = %24
  %27 = mul nsw i32 %25, %16
  %28 = add nsw i32 %27, %z
  %29 = mul nsw i32 %28, %20
  %30 = add nsw i32 %29, %x
  %31 = load i64** @map_colors, align 4, !tbaa !5
  %32 = getelementptr inbounds i64* %31, i32 %30
  %33 = load i64* %32, align 4, !tbaa !7
  %34 = and i64 %33, 4294967295
  %35 = icmp eq i64 %34, 4294967295
  br i1 %35, label %map_get.exit.thread, label %36

; <label>:36                                      ; preds = %map_get.exit
  %37 = icmp sgt i32 %15, 0
  br i1 %37, label %.lr.ph.i.preheader, label %.loopexit57

.lr.ph.i.preheader:                               ; preds = %36
  br label %.lr.ph.i

.lr.ph.i:                                         ; preds = %.lr.ph.i.preheader, %.backedge.i
  %k.02.in.i = phi i32 [ %k.02.i, %.backedge.i ], [ %15, %.lr.ph.i.preheader ]
  %k.02.i = add nsw i32 %k.02.in.i, -1
  %38 = getelementptr inbounds [8192 x i32]* @map_checked_voxels_x, i32 0, i32 %k.02.i
  %39 = load i32* %38, align 4, !tbaa !1
  %40 = icmp eq i32 %39, %x
  br i1 %40, label %42, label %.backedge.i

.backedge.i:                                      ; preds = %46, %42, %.lr.ph.i
  %41 = icmp sgt i32 %k.02.i, 0
  br i1 %41, label %.lr.ph.i, label %.loopexit57.loopexit

; <label>:42                                      ; preds = %.lr.ph.i
  %43 = getelementptr inbounds [8192 x i32]* @map_checked_voxels_y, i32 0, i32 %k.02.i
  %44 = load i32* %43, align 4, !tbaa !1
  %45 = icmp eq i32 %44, %16
  br i1 %45, label %46, label %.backedge.i

; <label>:46                                      ; preds = %42
  %47 = getelementptr inbounds [8192 x i32]* @map_checked_voxels_z, i32 0, i32 %k.02.i
  %48 = load i32* %47, align 4, !tbaa !1
  %49 = icmp eq i32 %48, %z
  br i1 %49, label %map_get.exit.thread.loopexit, label %.backedge.i

.loopexit57.loopexit:                             ; preds = %.backedge.i
  br label %.loopexit57

.loopexit57:                                      ; preds = %.loopexit57.loopexit, %36
  %50 = add nsw i32 %depth.tr63, 1
  tail call void @map_ground_connected_sub(i32 %x, i32 %16, i32 %z, i32 %50)
  br label %map_get.exit.thread

map_get.exit.thread.loopexit:                     ; preds = %46
  br label %map_get.exit.thread

map_get.exit.thread:                              ; preds = %map_get.exit.thread.loopexit, %14, %19, %24, %map_get.exit, %.loopexit57
  %51 = load i8* @map_ground_connected_result, align 1, !tbaa !9
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %53, label %map_get.exit19.thread.loopexit72

; <label>:53                                      ; preds = %map_get.exit.thread
  %54 = or i32 %9, %y.tr59
  %55 = icmp slt i32 %54, 0
  br i1 %55, label %map_get.exit10.thread.thread, label %56

; <label>:56                                      ; preds = %53
  %57 = load i32* @map_size_x, align 4, !tbaa !1
  %58 = icmp sgt i32 %57, %8
  %59 = load i32* @map_size_y, align 4
  %60 = icmp sgt i32 %59, %y.tr59
  %or.cond.i8 = and i1 %58, %60
  br i1 %or.cond.i8, label %61, label %map_get.exit10.thread.thread

; <label>:61                                      ; preds = %56
  %62 = load i32* @map_size_z, align 4, !tbaa !1
  %63 = icmp sgt i32 %62, %z
  br i1 %63, label %map_get.exit10, label %map_get.exit10.thread.thread

map_get.exit10:                                   ; preds = %61
  %64 = mul nsw i32 %62, %y.tr59
  %65 = add nsw i32 %64, %z
  %66 = mul nsw i32 %65, %57
  %67 = add nsw i32 %66, %8
  %68 = load i64** @map_colors, align 4, !tbaa !5
  %69 = getelementptr inbounds i64* %68, i32 %67
  %70 = load i64* %69, align 4, !tbaa !7
  %71 = and i64 %70, 4294967295
  %72 = icmp eq i64 %71, 4294967295
  br i1 %72, label %map_get.exit10.thread.thread, label %73

; <label>:73                                      ; preds = %map_get.exit10
  %74 = load i32* @map_checked_voxels_index, align 4, !tbaa !1
  %75 = icmp sgt i32 %74, 0
  br i1 %75, label %.lr.ph.i13.preheader, label %map_get.exit10.thread

.lr.ph.i13.preheader:                             ; preds = %73
  br label %.lr.ph.i13

.lr.ph.i13:                                       ; preds = %.lr.ph.i13.preheader, %.backedge.i14
  %k.02.in.i11 = phi i32 [ %k.02.i12, %.backedge.i14 ], [ %74, %.lr.ph.i13.preheader ]
  %k.02.i12 = add nsw i32 %k.02.in.i11, -1
  %76 = getelementptr inbounds [8192 x i32]* @map_checked_voxels_x, i32 0, i32 %k.02.i12
  %77 = load i32* %76, align 4, !tbaa !1
  %78 = icmp eq i32 %77, %8
  br i1 %78, label %80, label %.backedge.i14

.backedge.i14:                                    ; preds = %84, %80, %.lr.ph.i13
  %79 = icmp sgt i32 %k.02.i12, 0
  br i1 %79, label %.lr.ph.i13, label %map_get.exit10.thread.loopexit

; <label>:80                                      ; preds = %.lr.ph.i13
  %81 = getelementptr inbounds [8192 x i32]* @map_checked_voxels_y, i32 0, i32 %k.02.i12
  %82 = load i32* %81, align 4, !tbaa !1
  %83 = icmp eq i32 %82, %y.tr59
  br i1 %83, label %84, label %.backedge.i14

; <label>:84                                      ; preds = %80
  %85 = getelementptr inbounds [8192 x i32]* @map_checked_voxels_z, i32 0, i32 %k.02.i12
  %86 = load i32* %85, align 4, !tbaa !1
  %87 = icmp eq i32 %86, %z
  br i1 %87, label %map_get.exit10.thread.thread.loopexit, label %.backedge.i14

map_get.exit10.thread.loopexit:                   ; preds = %.backedge.i14
  br label %map_get.exit10.thread

map_get.exit10.thread:                            ; preds = %map_get.exit10.thread.loopexit, %73
  %88 = add nsw i32 %depth.tr63, 1
  tail call void @map_ground_connected_sub(i32 %8, i32 %y.tr59, i32 %z, i32 %88)
  %.pre = load i8* @map_ground_connected_result, align 1, !tbaa !9
  %phitmp = icmp eq i8 %.pre, 0
  br i1 %phitmp, label %map_get.exit10.thread.thread, label %map_get.exit19.thread.loopexit72

map_get.exit10.thread.thread.loopexit:            ; preds = %84
  br label %map_get.exit10.thread.thread

map_get.exit10.thread.thread:                     ; preds = %map_get.exit10.thread.thread.loopexit, %map_get.exit10, %61, %56, %53, %map_get.exit10.thread
  %89 = or i32 %11, %y.tr59
  %90 = icmp slt i32 %89, 0
  br i1 %90, label %map_get.exit22.thread.thread, label %91

; <label>:91                                      ; preds = %map_get.exit10.thread.thread
  %92 = load i32* @map_size_x, align 4, !tbaa !1
  %93 = icmp sgt i32 %92, %10
  %94 = load i32* @map_size_y, align 4
  %95 = icmp sgt i32 %94, %y.tr59
  %or.cond.i20 = and i1 %93, %95
  br i1 %or.cond.i20, label %96, label %map_get.exit22.thread.thread

; <label>:96                                      ; preds = %91
  %97 = load i32* @map_size_z, align 4, !tbaa !1
  %98 = icmp sgt i32 %97, %z
  br i1 %98, label %map_get.exit22, label %map_get.exit22.thread.thread

map_get.exit22:                                   ; preds = %96
  %99 = mul nsw i32 %97, %y.tr59
  %100 = add nsw i32 %99, %z
  %101 = mul nsw i32 %100, %92
  %102 = add nsw i32 %101, %10
  %103 = load i64** @map_colors, align 4, !tbaa !5
  %104 = getelementptr inbounds i64* %103, i32 %102
  %105 = load i64* %104, align 4, !tbaa !7
  %106 = and i64 %105, 4294967295
  %107 = icmp eq i64 %106, 4294967295
  br i1 %107, label %map_get.exit22.thread.thread, label %108

; <label>:108                                     ; preds = %map_get.exit22
  %109 = load i32* @map_checked_voxels_index, align 4, !tbaa !1
  %110 = icmp sgt i32 %109, 0
  br i1 %110, label %.lr.ph.i43.preheader, label %map_get.exit22.thread

.lr.ph.i43.preheader:                             ; preds = %108
  br label %.lr.ph.i43

.lr.ph.i43:                                       ; preds = %.lr.ph.i43.preheader, %.backedge.i44
  %k.02.in.i41 = phi i32 [ %k.02.i42, %.backedge.i44 ], [ %109, %.lr.ph.i43.preheader ]
  %k.02.i42 = add nsw i32 %k.02.in.i41, -1
  %111 = getelementptr inbounds [8192 x i32]* @map_checked_voxels_x, i32 0, i32 %k.02.i42
  %112 = load i32* %111, align 4, !tbaa !1
  %113 = icmp eq i32 %112, %10
  br i1 %113, label %115, label %.backedge.i44

.backedge.i44:                                    ; preds = %119, %115, %.lr.ph.i43
  %114 = icmp sgt i32 %k.02.i42, 0
  br i1 %114, label %.lr.ph.i43, label %map_get.exit22.thread.loopexit

; <label>:115                                     ; preds = %.lr.ph.i43
  %116 = getelementptr inbounds [8192 x i32]* @map_checked_voxels_y, i32 0, i32 %k.02.i42
  %117 = load i32* %116, align 4, !tbaa !1
  %118 = icmp eq i32 %117, %y.tr59
  br i1 %118, label %119, label %.backedge.i44

; <label>:119                                     ; preds = %115
  %120 = getelementptr inbounds [8192 x i32]* @map_checked_voxels_z, i32 0, i32 %k.02.i42
  %121 = load i32* %120, align 4, !tbaa !1
  %122 = icmp eq i32 %121, %z
  br i1 %122, label %map_get.exit22.thread.thread.loopexit, label %.backedge.i44

map_get.exit22.thread.loopexit:                   ; preds = %.backedge.i44
  br label %map_get.exit22.thread

map_get.exit22.thread:                            ; preds = %map_get.exit22.thread.loopexit, %108
  %123 = add nsw i32 %depth.tr63, 1
  tail call void @map_ground_connected_sub(i32 %10, i32 %y.tr59, i32 %z, i32 %123)
  %.pre64 = load i8* @map_ground_connected_result, align 1, !tbaa !9
  %phitmp67 = icmp eq i8 %.pre64, 0
  br i1 %phitmp67, label %map_get.exit22.thread.thread, label %map_get.exit19.thread.loopexit72

map_get.exit22.thread.thread.loopexit:            ; preds = %119
  br label %map_get.exit22.thread.thread

map_get.exit22.thread.thread:                     ; preds = %map_get.exit22.thread.thread.loopexit, %map_get.exit22, %96, %91, %map_get.exit10.thread.thread, %map_get.exit22.thread
  %124 = or i32 %y.tr59, %x
  %125 = or i32 %124, %12
  %126 = icmp slt i32 %125, 0
  br i1 %126, label %map_get.exit34.thread.thread, label %127

; <label>:127                                     ; preds = %map_get.exit22.thread.thread
  %128 = load i32* @map_size_x, align 4, !tbaa !1
  %129 = icmp sgt i32 %128, %x
  %130 = load i32* @map_size_y, align 4
  %131 = icmp sgt i32 %130, %y.tr59
  %or.cond.i32 = and i1 %129, %131
  br i1 %or.cond.i32, label %132, label %map_get.exit34.thread.thread

; <label>:132                                     ; preds = %127
  %133 = load i32* @map_size_z, align 4, !tbaa !1
  %134 = icmp sgt i32 %133, %12
  br i1 %134, label %map_get.exit34, label %map_get.exit34.thread.thread

map_get.exit34:                                   ; preds = %132
  %135 = mul nsw i32 %133, %y.tr59
  %136 = add nsw i32 %135, %12
  %137 = mul nsw i32 %136, %128
  %138 = add nsw i32 %137, %x
  %139 = load i64** @map_colors, align 4, !tbaa !5
  %140 = getelementptr inbounds i64* %139, i32 %138
  %141 = load i64* %140, align 4, !tbaa !7
  %142 = and i64 %141, 4294967295
  %143 = icmp eq i64 %142, 4294967295
  br i1 %143, label %map_get.exit34.thread.thread, label %144

; <label>:144                                     ; preds = %map_get.exit34
  %145 = load i32* @map_checked_voxels_index, align 4, !tbaa !1
  %146 = icmp sgt i32 %145, 0
  br i1 %146, label %.lr.ph.i28.preheader, label %map_get.exit34.thread

.lr.ph.i28.preheader:                             ; preds = %144
  br label %.lr.ph.i28

.lr.ph.i28:                                       ; preds = %.lr.ph.i28.preheader, %.backedge.i29
  %k.02.in.i26 = phi i32 [ %k.02.i27, %.backedge.i29 ], [ %145, %.lr.ph.i28.preheader ]
  %k.02.i27 = add nsw i32 %k.02.in.i26, -1
  %147 = getelementptr inbounds [8192 x i32]* @map_checked_voxels_x, i32 0, i32 %k.02.i27
  %148 = load i32* %147, align 4, !tbaa !1
  %149 = icmp eq i32 %148, %x
  br i1 %149, label %151, label %.backedge.i29

.backedge.i29:                                    ; preds = %155, %151, %.lr.ph.i28
  %150 = icmp sgt i32 %k.02.i27, 0
  br i1 %150, label %.lr.ph.i28, label %map_get.exit34.thread.loopexit

; <label>:151                                     ; preds = %.lr.ph.i28
  %152 = getelementptr inbounds [8192 x i32]* @map_checked_voxels_y, i32 0, i32 %k.02.i27
  %153 = load i32* %152, align 4, !tbaa !1
  %154 = icmp eq i32 %153, %y.tr59
  br i1 %154, label %155, label %.backedge.i29

; <label>:155                                     ; preds = %151
  %156 = getelementptr inbounds [8192 x i32]* @map_checked_voxels_z, i32 0, i32 %k.02.i27
  %157 = load i32* %156, align 4, !tbaa !1
  %158 = icmp eq i32 %157, %12
  br i1 %158, label %map_get.exit34.thread.thread.loopexit, label %.backedge.i29

map_get.exit34.thread.loopexit:                   ; preds = %.backedge.i29
  br label %map_get.exit34.thread

map_get.exit34.thread:                            ; preds = %map_get.exit34.thread.loopexit, %144
  %159 = add nsw i32 %depth.tr63, 1
  tail call void @map_ground_connected_sub(i32 %x, i32 %y.tr59, i32 %12, i32 %159)
  %.pre65 = load i8* @map_ground_connected_result, align 1, !tbaa !9
  %phitmp68 = icmp eq i8 %.pre65, 0
  br i1 %phitmp68, label %map_get.exit34.thread.thread, label %map_get.exit19.thread.loopexit72

map_get.exit34.thread.thread.loopexit:            ; preds = %155
  br label %map_get.exit34.thread.thread

map_get.exit34.thread.thread:                     ; preds = %map_get.exit34.thread.thread.loopexit, %map_get.exit34, %132, %127, %map_get.exit22.thread.thread, %map_get.exit34.thread
  %160 = or i32 %124, %13
  %161 = icmp slt i32 %160, 0
  br i1 %161, label %map_get.exit25.thread.thread, label %162

; <label>:162                                     ; preds = %map_get.exit34.thread.thread
  %163 = load i32* @map_size_x, align 4, !tbaa !1
  %164 = icmp sgt i32 %163, %x
  %165 = load i32* @map_size_y, align 4
  %166 = icmp sgt i32 %165, %y.tr59
  %or.cond.i23 = and i1 %164, %166
  br i1 %or.cond.i23, label %167, label %map_get.exit25.thread.thread

; <label>:167                                     ; preds = %162
  %168 = load i32* @map_size_z, align 4, !tbaa !1
  %169 = icmp sgt i32 %168, %13
  br i1 %169, label %map_get.exit25, label %map_get.exit25.thread.thread

map_get.exit25:                                   ; preds = %167
  %170 = mul nsw i32 %168, %y.tr59
  %171 = add nsw i32 %170, %13
  %172 = mul nsw i32 %171, %163
  %173 = add nsw i32 %172, %x
  %174 = load i64** @map_colors, align 4, !tbaa !5
  %175 = getelementptr inbounds i64* %174, i32 %173
  %176 = load i64* %175, align 4, !tbaa !7
  %177 = and i64 %176, 4294967295
  %178 = icmp eq i64 %177, 4294967295
  br i1 %178, label %map_get.exit25.thread.thread, label %179

; <label>:179                                     ; preds = %map_get.exit25
  %180 = load i32* @map_checked_voxels_index, align 4, !tbaa !1
  %181 = icmp sgt i32 %180, 0
  br i1 %181, label %.lr.ph.i37.preheader, label %map_get.exit25.thread

.lr.ph.i37.preheader:                             ; preds = %179
  br label %.lr.ph.i37

.lr.ph.i37:                                       ; preds = %.lr.ph.i37.preheader, %.backedge.i38
  %k.02.in.i35 = phi i32 [ %k.02.i36, %.backedge.i38 ], [ %180, %.lr.ph.i37.preheader ]
  %k.02.i36 = add nsw i32 %k.02.in.i35, -1
  %182 = getelementptr inbounds [8192 x i32]* @map_checked_voxels_x, i32 0, i32 %k.02.i36
  %183 = load i32* %182, align 4, !tbaa !1
  %184 = icmp eq i32 %183, %x
  br i1 %184, label %186, label %.backedge.i38

.backedge.i38:                                    ; preds = %190, %186, %.lr.ph.i37
  %185 = icmp sgt i32 %k.02.i36, 0
  br i1 %185, label %.lr.ph.i37, label %map_get.exit25.thread.loopexit

; <label>:186                                     ; preds = %.lr.ph.i37
  %187 = getelementptr inbounds [8192 x i32]* @map_checked_voxels_y, i32 0, i32 %k.02.i36
  %188 = load i32* %187, align 4, !tbaa !1
  %189 = icmp eq i32 %188, %y.tr59
  br i1 %189, label %190, label %.backedge.i38

; <label>:190                                     ; preds = %186
  %191 = getelementptr inbounds [8192 x i32]* @map_checked_voxels_z, i32 0, i32 %k.02.i36
  %192 = load i32* %191, align 4, !tbaa !1
  %193 = icmp eq i32 %192, %13
  br i1 %193, label %map_get.exit25.thread.thread.loopexit, label %.backedge.i38

map_get.exit25.thread.loopexit:                   ; preds = %.backedge.i38
  br label %map_get.exit25.thread

map_get.exit25.thread:                            ; preds = %map_get.exit25.thread.loopexit, %179
  %194 = add nsw i32 %depth.tr63, 1
  tail call void @map_ground_connected_sub(i32 %x, i32 %y.tr59, i32 %13, i32 %194)
  %.pre66 = load i8* @map_ground_connected_result, align 1, !tbaa !9
  %phitmp69 = icmp eq i8 %.pre66, 0
  br i1 %phitmp69, label %map_get.exit25.thread.thread, label %map_get.exit19.thread.loopexit72

map_get.exit25.thread.thread.loopexit:            ; preds = %190
  br label %map_get.exit25.thread.thread

map_get.exit25.thread.thread:                     ; preds = %map_get.exit25.thread.thread.loopexit, %map_get.exit25, %167, %162, %map_get.exit34.thread.thread, %map_get.exit25.thread
  %195 = add nsw i32 %y.tr59, 1
  %196 = or i32 %7, %195
  %197 = icmp slt i32 %196, 0
  br i1 %197, label %map_get.exit19.thread.loopexit72, label %198

; <label>:198                                     ; preds = %map_get.exit25.thread.thread
  %199 = load i32* @map_size_x, align 4, !tbaa !1
  %200 = icmp sgt i32 %199, %x
  %201 = load i32* @map_size_y, align 4
  %202 = icmp sgt i32 %201, %195
  %or.cond.i17 = and i1 %200, %202
  br i1 %or.cond.i17, label %203, label %map_get.exit19.thread.loopexit72

; <label>:203                                     ; preds = %198
  %204 = load i32* @map_size_z, align 4, !tbaa !1
  %205 = icmp sgt i32 %204, %z
  br i1 %205, label %map_get.exit19, label %map_get.exit19.thread.loopexit72

map_get.exit19:                                   ; preds = %203
  %206 = mul nsw i32 %204, %195
  %207 = add nsw i32 %206, %z
  %208 = mul nsw i32 %207, %199
  %209 = add nsw i32 %208, %x
  %210 = load i64** @map_colors, align 4, !tbaa !5
  %211 = getelementptr inbounds i64* %210, i32 %209
  %212 = load i64* %211, align 4, !tbaa !7
  %213 = and i64 %212, 4294967295
  %214 = icmp eq i64 %213, 4294967295
  br i1 %214, label %map_get.exit19.thread.loopexit72, label %215

; <label>:215                                     ; preds = %map_get.exit19
  %216 = load i32* @map_checked_voxels_index, align 4, !tbaa !1
  %217 = icmp sgt i32 %216, 0
  br i1 %217, label %.lr.ph.i4.preheader, label %tailrecurse

.lr.ph.i4.preheader:                              ; preds = %215
  br label %.lr.ph.i4

.lr.ph.i4:                                        ; preds = %.lr.ph.i4.preheader, %.backedge.i5
  %k.02.in.i2 = phi i32 [ %k.02.i3, %.backedge.i5 ], [ %216, %.lr.ph.i4.preheader ]
  %k.02.i3 = add nsw i32 %k.02.in.i2, -1
  %218 = getelementptr inbounds [8192 x i32]* @map_checked_voxels_x, i32 0, i32 %k.02.i3
  %219 = load i32* %218, align 4, !tbaa !1
  %220 = icmp eq i32 %219, %x
  br i1 %220, label %222, label %.backedge.i5

.backedge.i5:                                     ; preds = %226, %222, %.lr.ph.i4
  %221 = icmp sgt i32 %k.02.i3, 0
  br i1 %221, label %.lr.ph.i4, label %tailrecurse.loopexit

; <label>:222                                     ; preds = %.lr.ph.i4
  %223 = getelementptr inbounds [8192 x i32]* @map_checked_voxels_y, i32 0, i32 %k.02.i3
  %224 = load i32* %223, align 4, !tbaa !1
  %225 = icmp eq i32 %224, %195
  br i1 %225, label %226, label %.backedge.i5

; <label>:226                                     ; preds = %222
  %227 = getelementptr inbounds [8192 x i32]* @map_checked_voxels_z, i32 0, i32 %k.02.i3
  %228 = load i32* %227, align 4, !tbaa !1
  %229 = icmp eq i32 %228, %z
  br i1 %229, label %map_get.exit19.thread.loopexit, label %.backedge.i5

tailrecurse.loopexit:                             ; preds = %.backedge.i5
  br label %tailrecurse

tailrecurse:                                      ; preds = %tailrecurse.loopexit, %215
  %230 = add nsw i32 %depth.tr63, 1
  %231 = getelementptr inbounds [8192 x i32]* @map_checked_voxels_x, i32 0, i32 %216
  store i32 %x, i32* %231, align 4, !tbaa !1
  %232 = getelementptr inbounds [8192 x i32]* @map_checked_voxels_y, i32 0, i32 %216
  store i32 %195, i32* %232, align 4, !tbaa !1
  %233 = add nsw i32 %216, 1
  store i32 %233, i32* @map_checked_voxels_index, align 4, !tbaa !1
  %234 = getelementptr inbounds [8192 x i32]* @map_checked_voxels_z, i32 0, i32 %216
  store i32 %z, i32* %234, align 4, !tbaa !1
  %235 = icmp eq i32 %195, 0
  br i1 %235, label %tailrecurse._crit_edge.loopexit, label %14

map_get.exit19.thread.loopexit:                   ; preds = %226
  br label %map_get.exit19.thread

map_get.exit19.thread.loopexit72:                 ; preds = %map_get.exit.thread, %map_get.exit10.thread, %map_get.exit22.thread, %map_get.exit34.thread, %map_get.exit25.thread, %map_get.exit19, %203, %198, %map_get.exit25.thread.thread
  br label %map_get.exit19.thread

map_get.exit19.thread:                            ; preds = %map_get.exit19.thread.loopexit72, %map_get.exit19.thread.loopexit, %tailrecurse._crit_edge
  ret void
}

; Function Attrs: nounwind
define zeroext i8 @map_ground_connected(i32 %x, i32 %y, i32 %z) #0 {
  store i32 0, i32* @map_checked_voxels_index, align 4, !tbaa !1
  store i8 0, i8* @map_ground_connected_result, align 1, !tbaa !9
  tail call void @map_ground_connected_sub(i32 %x, i32 %y, i32 %z, i32 0)
  %1 = load i8* @map_ground_connected_result, align 1, !tbaa !9
  ret i8 %1
}

; Function Attrs: nounwind
define void @chunk_block_update(i32 %x, i32 %y, i32 %z) #0 {
  %1 = sdiv i32 %z, 16
  %2 = shl nsw i32 %1, 5
  %3 = sdiv i32 %x, 16
  %4 = add nsw i32 %2, %3
  %5 = load i32* @chunk_geometry_changed_lenght, align 4, !tbaa !1
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %0
  br label %.lr.ph

; <label>:7                                       ; preds = %.lr.ph
  %8 = icmp slt i32 %12, %5
  br i1 %8, label %.lr.ph, label %._crit_edge.loopexit

.lr.ph:                                           ; preds = %.lr.ph.preheader, %7
  %k.02 = phi i32 [ %12, %7 ], [ 0, %.lr.ph.preheader ]
  %9 = getelementptr inbounds [1024 x i32]* @chunk_geometry_changed, i32 0, i32 %k.02
  %10 = load i32* %9, align 4, !tbaa !1
  %11 = icmp eq i32 %10, %4
  %12 = add nsw i32 %k.02, 1
  br i1 %11, label %.loopexit.loopexit, label %7

._crit_edge.loopexit:                             ; preds = %7
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %0
  %13 = add nsw i32 %5, 1
  store i32 %13, i32* @chunk_geometry_changed_lenght, align 4, !tbaa !1
  %14 = getelementptr inbounds [1024 x i32]* @chunk_geometry_changed, i32 0, i32 %5
  store i32 %4, i32* %14, align 4, !tbaa !1
  br label %.loopexit

.loopexit.loopexit:                               ; preds = %.lr.ph
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %._crit_edge
  ret void
}

; Function Attrs: nounwind
define void @map_vxl_setgeom(i32 %x, i32 %y, i32 %z, i32 %t, i64* nocapture %map) #0 {
  %1 = or i32 %y, %x
  %2 = or i32 %1, %z
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %22, label %4

; <label>:4                                       ; preds = %0
  %5 = load i32* @map_size_x, align 4, !tbaa !1
  %6 = icmp sgt i32 %5, %x
  br i1 %6, label %7, label %22

; <label>:7                                       ; preds = %4
  %8 = load i32* @map_size_z, align 4, !tbaa !1
  %9 = icmp sgt i32 %8, %y
  br i1 %9, label %10, label %22

; <label>:10                                      ; preds = %7
  %11 = load i32* @map_size_y, align 4, !tbaa !1
  %12 = icmp sgt i32 %11, %z
  br i1 %12, label %13, label %22

; <label>:13                                      ; preds = %10
  %14 = zext i32 %t to i64
  %15 = xor i32 %z, -1
  %16 = add i32 %11, %15
  %17 = mul nsw i32 %16, %8
  %18 = add nsw i32 %17, %y
  %19 = mul nsw i32 %18, %5
  %20 = add nsw i32 %19, %x
  %21 = getelementptr inbounds i64* %map, i32 %20
  store i64 %14, i64* %21, align 4, !tbaa !7
  br label %22

; <label>:22                                      ; preds = %10, %7, %4, %0, %13
  ret void
}

; Function Attrs: nounwind
define void @map_vxl_setcolor(i32 %x, i32 %y, i32 %z, i32 %t, i64* nocapture %map) #0 {
  %1 = or i32 %y, %x
  %2 = or i32 %1, %z
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %29, label %4

; <label>:4                                       ; preds = %0
  %5 = load i32* @map_size_x, align 4, !tbaa !1
  %6 = icmp sgt i32 %5, %x
  br i1 %6, label %7, label %29

; <label>:7                                       ; preds = %4
  %8 = load i32* @map_size_z, align 4, !tbaa !1
  %9 = icmp sgt i32 %8, %y
  br i1 %9, label %10, label %29

; <label>:10                                      ; preds = %7
  %11 = load i32* @map_size_y, align 4, !tbaa !1
  %12 = icmp sgt i32 %11, %z
  br i1 %12, label %13, label %29

; <label>:13                                      ; preds = %10
  %14 = lshr i32 %t, 16
  %15 = shl i32 %t, 16
  %16 = and i32 %15, 16711680
  %17 = and i32 %t, 65280
  %18 = or i32 %16, %17
  %19 = and i32 %14, 255
  %20 = or i32 %18, %19
  %21 = zext i32 %20 to i64
  %22 = xor i32 %z, -1
  %23 = add i32 %11, %22
  %24 = mul nsw i32 %23, %8
  %25 = add nsw i32 %24, %y
  %26 = mul nsw i32 %25, %5
  %27 = add nsw i32 %26, %x
  %28 = getelementptr inbounds i64* %map, i32 %27
  store i64 %21, i64* %28, align 4, !tbaa !7
  br label %29

; <label>:29                                      ; preds = %10, %7, %4, %0, %13
  ret void
}

; Function Attrs: nounwind
define void @map_vxl_load_s(i8* nocapture readonly %v) #0 {
  %1 = load i64** @map_colors, align 4, !tbaa !5
  tail call void @map_vxl_load(i8* %v, i64* %1)
  ret void
}

; Function Attrs: nounwind
define void @map_vxl_load(i8* nocapture readonly %v, i64* nocapture %map) #0 {
  %.pre.pre = load i32* @map_size_x, align 4, !tbaa !1
  %.pre38.pre = load i32* @map_size_z, align 4, !tbaa !1
  %.pre39.pre = load i32* @map_size_y, align 4, !tbaa !1
  br label %.preheader6

.preheader6:                                      ; preds = %112, %0
  %.026 = phi i8* [ %v, %0 ], [ %.lcssa65, %112 ]
  %y.025 = phi i32 [ 0, %0 ], [ %113, %112 ]
  br label %.preheader5

.preheader5:                                      ; preds = %67, %.preheader6
  %.124 = phi i8* [ %.026, %.preheader6 ], [ %70, %67 ]
  %x.021 = phi i32 [ 0, %.preheader6 ], [ %71, %67 ]
  %1 = or i32 %x.021, %y.025
  %2 = icmp sgt i32 %.pre.pre, %x.021
  %3 = icmp sgt i32 %.pre38.pre, %y.025
  %brmerge.demorgan = and i1 %2, %3
  br i1 %brmerge.demorgan, label %.preheader5.split.us.split.us.preheader, label %.preheader.preheader

.preheader5.split.us.split.us.preheader:          ; preds = %.preheader5
  br label %.preheader5.split.us.split.us

.preheader5.split.us.split.us:                    ; preds = %.preheader5.split.us.split.us.preheader, %map_vxl_setgeom.exit.us.us
  %z.07.us.us = phi i32 [ %15, %map_vxl_setgeom.exit.us.us ], [ 0, %.preheader5.split.us.split.us.preheader ]
  %4 = or i32 %1, %z.07.us.us
  %5 = icmp sgt i32 %4, -1
  %6 = icmp sgt i32 %.pre39.pre, %z.07.us.us
  %or.cond = and i1 %5, %6
  br i1 %or.cond, label %7, label %map_vxl_setgeom.exit.us.us

; <label>:7                                       ; preds = %.preheader5.split.us.split.us
  %8 = xor i32 %z.07.us.us, -1
  %9 = add i32 %.pre39.pre, %8
  %10 = mul nsw i32 %9, %.pre38.pre
  %11 = add nsw i32 %10, %y.025
  %12 = mul nsw i32 %11, %.pre.pre
  %13 = add nsw i32 %12, %x.021
  %14 = getelementptr inbounds i64* %map, i32 %13
  store i64 16512, i64* %14, align 4, !tbaa !7
  br label %map_vxl_setgeom.exit.us.us

map_vxl_setgeom.exit.us.us:                       ; preds = %.preheader5.split.us.split.us, %7
  %15 = add nsw i32 %z.07.us.us, 1
  %exitcond35 = icmp eq i32 %15, 64
  br i1 %exitcond35, label %.preheader.preheader.loopexit, label %.preheader5.split.us.split.us

.preheader.preheader.loopexit:                    ; preds = %map_vxl_setgeom.exit.us.us
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %.preheader.preheader.loopexit, %.preheader5
  br label %.preheader

..loopexit_crit_edge:                             ; preds = %map_vxl_setcolor.exit
  %smax32 = select i1 %88, i32 %87, i32 %79
  br label %.preheader.backedge

.preheader.backedge:                              ; preds = %..loopexit_crit_edge, %72
  %z.1.be = phi i32 [ %smax32, %..loopexit_crit_edge ], [ %82, %72 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.backedge, %.preheader.preheader
  %z.1 = phi i32 [ 0, %.preheader.preheader ], [ %z.1.be, %.preheader.backedge ]
  %.2 = phi i8* [ %.124, %.preheader.preheader ], [ %76, %.preheader.backedge ]
  %16 = load i8* %.2, align 1, !tbaa !9
  %17 = zext i8 %16 to i32
  %18 = getelementptr inbounds i8* %.2, i32 1
  %19 = load i8* %18, align 1, !tbaa !9
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds i8* %.2, i32 2
  %22 = load i8* %21, align 1, !tbaa !9
  %23 = zext i8 %22 to i32
  %.not46 = icmp sge i32 %z.1, %20
  %.not47 = xor i1 %2, true
  %brmerge48 = or i1 %.not46, %.not47
  br i1 %brmerge48, label %._crit_edge, label %.lr.ph.split.us.preheader

.lr.ph.split.us.preheader:                        ; preds = %.preheader
  br label %.lr.ph.split.us

.lr.ph.split.us:                                  ; preds = %.lr.ph.split.us.preheader, %map_vxl_setgeom.exit3.us
  %i.010.us = phi i32 [ %34, %map_vxl_setgeom.exit3.us ], [ %z.1, %.lr.ph.split.us.preheader ]
  %24 = or i32 %1, %i.010.us
  %.not = icmp sgt i32 %24, -1
  %brmerge50.not = and i1 %3, %.not
  %25 = icmp sgt i32 %.pre39.pre, %i.010.us
  %or.cond51 = and i1 %brmerge50.not, %25
  br i1 %or.cond51, label %26, label %map_vxl_setgeom.exit3.us

; <label>:26                                      ; preds = %.lr.ph.split.us
  %27 = xor i32 %i.010.us, -1
  %28 = add i32 %.pre39.pre, %27
  %29 = mul nsw i32 %28, %.pre38.pre
  %30 = add nsw i32 %29, %y.025
  %31 = mul nsw i32 %30, %.pre.pre
  %32 = add nsw i32 %31, %x.021
  %33 = getelementptr inbounds i64* %map, i32 %32
  store i64 4294967295, i64* %33, align 4, !tbaa !7
  br label %map_vxl_setgeom.exit3.us

map_vxl_setgeom.exit3.us:                         ; preds = %.lr.ph.split.us, %26
  %34 = add nsw i32 %i.010.us, 1
  %exitcond = icmp eq i32 %34, %20
  br i1 %exitcond, label %._crit_edge.loopexit, label %.lr.ph.split.us

._crit_edge.loopexit:                             ; preds = %map_vxl_setgeom.exit3.us
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.preheader
  %35 = getelementptr inbounds i8* %.2, i32 4
  %36 = bitcast i8* %35 to i32*
  %37 = icmp ult i8 %22, %19
  br i1 %37, label %64, label %.lr.ph14

.lr.ph14:                                         ; preds = %._crit_edge
  %38 = icmp ult i32 %23, %20
  %smax = select i1 %38, i32 %20, i32 %23
  %39 = sub i32 %smax, %20
  %40 = shl nsw i32 %39, 2
  %scevgep.sum = add nsw i32 %40, 8
  %scevgep30 = getelementptr i8* %.2, i32 %scevgep.sum
  br label %41

; <label>:41                                      ; preds = %map_vxl_setcolor.exit2, %.lr.ph14
  %z.212 = phi i32 [ %20, %.lr.ph14 ], [ %62, %map_vxl_setcolor.exit2 ]
  %color.011 = phi i32* [ %36, %.lr.ph14 ], [ %42, %map_vxl_setcolor.exit2 ]
  %42 = getelementptr inbounds i32* %color.011, i32 1
  %43 = load i32* %color.011, align 4, !tbaa !1
  %44 = or i32 %1, %z.212
  %.not62 = icmp sgt i32 %44, -1
  %brmerge53.not = and i1 %2, %.not62
  %brmerge55.not = and i1 %3, %brmerge53.not
  %45 = icmp sgt i32 %.pre39.pre, %z.212
  %or.cond56 = and i1 %brmerge55.not, %45
  br i1 %or.cond56, label %46, label %map_vxl_setcolor.exit2

; <label>:46                                      ; preds = %41
  %47 = lshr i32 %43, 16
  %48 = shl i32 %43, 16
  %49 = and i32 %48, 16711680
  %50 = and i32 %43, 65280
  %51 = or i32 %49, %50
  %52 = and i32 %47, 255
  %53 = or i32 %51, %52
  %54 = zext i32 %53 to i64
  %55 = xor i32 %z.212, -1
  %56 = add i32 %.pre39.pre, %55
  %57 = mul nsw i32 %56, %.pre38.pre
  %58 = add nsw i32 %57, %y.025
  %59 = mul nsw i32 %58, %.pre.pre
  %60 = add nsw i32 %59, %x.021
  %61 = getelementptr inbounds i64* %map, i32 %60
  store i64 %54, i64* %61, align 4, !tbaa !7
  br label %map_vxl_setcolor.exit2

map_vxl_setcolor.exit2:                           ; preds = %41, %46
  %62 = add nsw i32 %z.212, 1
  %63 = icmp slt i32 %z.212, %23
  br i1 %63, label %41, label %._crit_edge15

._crit_edge15:                                    ; preds = %map_vxl_setcolor.exit2
  %scevgep3031 = bitcast i8* %scevgep30 to i32*
  br label %64

; <label>:64                                      ; preds = %._crit_edge15, %._crit_edge
  %color.0.lcssa = phi i32* [ %scevgep3031, %._crit_edge15 ], [ %36, %._crit_edge ]
  %65 = sub nsw i32 %23, %20
  %66 = icmp eq i8 %16, 0
  br i1 %66, label %67, label %72

; <label>:67                                      ; preds = %64
  %.lcssa = phi i32 [ %65, %64 ]
  %.2.lcssa = phi i8* [ %.2, %64 ]
  %68 = shl nsw i32 %.lcssa, 2
  %69 = add nsw i32 %68, 8
  %70 = getelementptr inbounds i8* %.2.lcssa, i32 %69
  %71 = add nsw i32 %x.021, 1
  %exitcond36 = icmp eq i32 %71, 512
  br i1 %exitcond36, label %112, label %.preheader5

; <label>:72                                      ; preds = %64
  %73 = load i8* %.2, align 1, !tbaa !9
  %74 = zext i8 %73 to i32
  %75 = shl nuw nsw i32 %74, 2
  %76 = getelementptr inbounds i8* %.2, i32 %75
  %.sum1 = or i32 %75, 3
  %77 = getelementptr inbounds i8* %.2, i32 %.sum1
  %78 = load i8* %77, align 1, !tbaa !9
  %79 = zext i8 %78 to i32
  %80 = sub i32 2, %17
  %81 = add nsw i32 %80, %65
  %82 = add nsw i32 %81, %79
  %83 = icmp slt i32 %81, 0
  br i1 %83, label %.lr.ph19, label %.preheader.backedge

.lr.ph19:                                         ; preds = %72
  %84 = add nuw nsw i32 %23, 3
  %85 = add nuw nsw i32 %84, %79
  %86 = sub i32 %85, %20
  %87 = sub i32 %86, %17
  %88 = icmp sgt i32 %87, %79
  br label %89

; <label>:89                                      ; preds = %.lr.ph19, %map_vxl_setcolor.exit
  %z.317 = phi i32 [ %82, %.lr.ph19 ], [ %110, %map_vxl_setcolor.exit ]
  %color.116 = phi i32* [ %color.0.lcssa, %.lr.ph19 ], [ %90, %map_vxl_setcolor.exit ]
  %90 = getelementptr inbounds i32* %color.116, i32 1
  %91 = load i32* %color.116, align 4, !tbaa !1
  %92 = or i32 %1, %z.317
  %.not63 = icmp sgt i32 %92, -1
  %brmerge58.not = and i1 %2, %.not63
  %brmerge60.not = and i1 %3, %brmerge58.not
  %93 = icmp sgt i32 %.pre39.pre, %z.317
  %or.cond61 = and i1 %brmerge60.not, %93
  br i1 %or.cond61, label %94, label %map_vxl_setcolor.exit

; <label>:94                                      ; preds = %89
  %95 = lshr i32 %91, 16
  %96 = shl i32 %91, 16
  %97 = and i32 %96, 16711680
  %98 = and i32 %91, 65280
  %99 = or i32 %97, %98
  %100 = and i32 %95, 255
  %101 = or i32 %99, %100
  %102 = zext i32 %101 to i64
  %103 = xor i32 %z.317, -1
  %104 = add i32 %.pre39.pre, %103
  %105 = mul nsw i32 %104, %.pre38.pre
  %106 = add nsw i32 %105, %y.025
  %107 = mul nsw i32 %106, %.pre.pre
  %108 = add nsw i32 %107, %x.021
  %109 = getelementptr inbounds i64* %map, i32 %108
  store i64 %102, i64* %109, align 4, !tbaa !7
  br label %map_vxl_setcolor.exit

map_vxl_setcolor.exit:                            ; preds = %89, %94
  %110 = add nsw i32 %z.317, 1
  %111 = icmp slt i32 %110, %79
  br i1 %111, label %89, label %..loopexit_crit_edge

; <label>:112                                     ; preds = %67
  %.lcssa65 = phi i8* [ %70, %67 ]
  %113 = add nsw i32 %y.025, 1
  %exitcond37 = icmp eq i32 %113, 512
  br i1 %exitcond37, label %114, label %.preheader6

; <label>:114                                     ; preds = %112
  ret void
}

; Function Attrs: nounwind
define float @chunk_draw_visible(i8 zeroext %shadowed) #0 {
  %1 = load float* @camera_x, align 4, !tbaa !10
  %2 = load float* @camera_z, align 4, !tbaa !10
  %3 = load float* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 4), align 4, !tbaa !12
  %4 = fadd fast float %3, 3.200000e+01
  %5 = fmul fast float %4, %4
  br label %.preheader6

.preheader6:                                      ; preds = %104, %0
  %indvars.iv33 = phi i32 [ -9, %0 ], [ %indvars.iv.next34, %104 ]
  %index.022 = phi i32 [ 0, %0 ], [ %index.3.lcssa, %104 ]
  %b.021 = phi i32 [ 0, %0 ], [ %b.2.lcssa, %104 ]
  %6 = shl nsw i32 %indvars.iv33, 4
  %7 = sitofp i32 %6 to float
  %8 = fsub fast float %7, %2
  %9 = fmul fast float %8, %8
  %10 = trunc i32 %indvars.iv33 to i8
  %11 = icmp slt i8 %10, 0
  %12 = add nsw i32 %indvars.iv33, 32
  %tmp_y.0 = select i1 %11, i32 %12, i32 %indvars.iv33
  %13 = icmp sgt i32 %tmp_y.0, 31
  %14 = add nsw i32 %tmp_y.0, 134217696
  %tmp_y.1 = select i1 %13, i32 %14, i32 %tmp_y.0
  %15 = or i32 %6, 8
  %16 = sitofp i32 %15 to float
  %17 = shl i32 %tmp_y.1, 5
  %18 = insertelement <2 x float> undef, float %16, i32 0
  %19 = insertelement <2 x float> %18, float %16, i32 1
  %20 = fadd <2 x float> %19, <float -8.000000e+00, float 8.000000e+00>
  br label %22

.preheader5:                                      ; preds = %104
  %b.2.lcssa.lcssa = phi i32 [ %b.2.lcssa, %104 ]
  %index.3.lcssa.lcssa = phi i32 [ %index.3.lcssa, %104 ]
  %21 = add nsw i32 %index.3.lcssa.lcssa, -1
  br label %.outer

; <label>:22                                      ; preds = %103, %.preheader6
  %indvars.iv = phi i32 [ -9, %.preheader6 ], [ %indvars.iv.next, %103 ]
  %index.119 = phi i32 [ %index.022, %.preheader6 ], [ %index.3, %103 ]
  %b.118 = phi i32 [ %b.021, %.preheader6 ], [ %b.2, %103 ]
  %23 = shl nsw i32 %indvars.iv, 4
  %24 = sitofp i32 %23 to float
  %25 = fsub fast float %24, %1
  %26 = fmul fast float %25, %25
  %27 = fadd fast float %26, %9
  %28 = fcmp olt float %27, %5
  br i1 %28, label %29, label %103

; <label>:29                                      ; preds = %22
  %30 = trunc i32 %indvars.iv to i8
  %31 = icmp slt i8 %30, 0
  %32 = add nsw i32 %indvars.iv, 32
  %. = select i1 %31, i32 %32, i32 %indvars.iv
  %33 = icmp sgt i32 %., 31
  %34 = add nsw i32 %., -32
  %.. = select i1 %33, i32 %34, i32 %.
  %35 = or i32 %23, 8
  %36 = sitofp i32 %35 to float
  %37 = add nsw i32 %.., %17
  %38 = getelementptr inbounds [1024 x i32]* @chunk_max_height, i32 0, i32 %37
  %39 = load i32* %38, align 4, !tbaa !1
  %40 = sitofp i32 %39 to float
  %41 = fadd fast float %36, -8.000000e+00
  %42 = fadd fast float %36, 8.000000e+00
  %43 = insertelement <2 x float> undef, float %41, i32 0
  %44 = insertelement <2 x float> %43, float %40, i32 1
  %45 = insertelement <2 x float> undef, float %42, i32 0
  br label %46

; <label>:46                                      ; preds = %96, %29
  %p.02.i = phi i32 [ 0, %29 ], [ %97, %96 ]
  %47 = getelementptr inbounds [6 x [4 x float]]* @frustum, i32 0, i32 %p.02.i, i32 0
  %48 = bitcast float* %47 to <2 x float>*
  %49 = load <2 x float>* %48, align 16, !tbaa !10
  %50 = extractelement <2 x float> %49, i32 0
  %51 = extractelement <2 x float> %49, i32 1
  %52 = fmul fast float %51, -8.000000e+00
  %53 = getelementptr inbounds [6 x [4 x float]]* @frustum, i32 0, i32 %p.02.i, i32 2
  %54 = bitcast float* %53 to <2 x float>*
  %55 = load <2 x float>* %54, align 8, !tbaa !10
  %56 = fmul fast <2 x float> %44, %49
  %57 = insertelement <2 x float> undef, float %52, i32 0
  %58 = shufflevector <2 x float> %57, <2 x float> %56, <2 x i32> <i32 0, i32 3>
  %59 = insertelement <2 x float> undef, float %50, i32 0
  %60 = insertelement <2 x float> %59, float 0.000000e+00, i32 1
  %61 = shufflevector <2 x float> %45, <2 x float> %49, <2 x i32> <i32 0, i32 3>
  %62 = fmul fast <2 x float> %61, %60
  %63 = shufflevector <2 x float> %56, <2 x float> %62, <2 x i32> <i32 1, i32 3>
  %64 = shufflevector <2 x float> %62, <2 x float> %56, <2 x i32> <i32 0, i32 2>
  %65 = fadd fast <2 x float> %64, %63
  %66 = shufflevector <2 x float> %55, <2 x float> undef, <2 x i32> zeroinitializer
  %67 = fmul fast <2 x float> %20, %66
  %68 = shufflevector <2 x float> %57, <2 x float> %62, <2 x i32> <i32 0, i32 3>
  %69 = shufflevector <2 x float> %56, <2 x float> %62, <4 x i32> <i32 0, i32 0, i32 2, i32 2>
  %70 = shufflevector <2 x float> %58, <2 x float> %68, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %71 = fadd fast <4 x float> %69, %70
  %72 = shufflevector <4 x float> %71, <4 x float> undef, <2 x i32> <i32 undef, i32 1>
  %73 = shufflevector <2 x float> %72, <2 x float> %65, <2 x i32> <i32 1, i32 2>
  %74 = shufflevector <2 x float> %67, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %75 = fadd fast <4 x float> %74, %71
  %76 = shufflevector <2 x float> %55, <2 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %77 = fadd fast <4 x float> %76, %75
  %78 = fcmp ogt <4 x float> %77, zeroinitializer
  %79 = shufflevector <4 x i1> %78, <4 x i1> undef, <2 x i32> <i32 0, i32 1>
  %80 = extractelement <4 x i1> %78, i32 2
  %81 = extractelement <4 x i1> %78, i32 3
  %82 = zext i1 %81 to i32
  %83 = extractelement <4 x i1> %78, i32 0
  %84 = select i1 %83, i32 2, i32 1
  %c.0.i = zext <2 x i1> %79 to <2 x i32>
  %c.0.v.r1.i = extractelement <2 x i32> %c.0.i, i32 0
  %c.0.v.r2.i = extractelement <2 x i32> %c.0.i, i32 1
  %c.1.i = select i1 %80, i32 %84, i32 %c.0.v.r1.i
  %85 = shufflevector <2 x float> %67, <2 x float> undef, <4 x i32> <i32 0, i32 undef, i32 undef, i32 1>
  %86 = shufflevector <4 x float> %85, <4 x float> undef, <4 x i32> <i32 0, i32 0, i32 3, i32 3>
  %87 = shufflevector <2 x float> %73, <2 x float> %65, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %88 = fadd fast <4 x float> %86, %87
  %89 = fadd fast <4 x float> %76, %88
  %90 = fcmp ogt <4 x float> %89, zeroinitializer
  %91 = zext <4 x i1> %90 to <4 x i32>
  %92 = extractelement <4 x i32> %91, i32 0
  %93 = extractelement <4 x i32> %91, i32 1
  %94 = extractelement <4 x i32> %91, i32 2
  %95 = extractelement <4 x i32> %91, i32 3
  %c.2.i = add i32 %c.0.v.r2.i, %82
  %c.3.i = add i32 %c.2.i, %c.1.i
  %c.4.i = add i32 %c.3.i, %92
  %c.5.i = add i32 %c.4.i, %93
  %c.6.i = add i32 %c.5.i, %95
  %c.7.i = sub i32 0, %94
  %cond = icmp eq i32 %c.6.i, %c.7.i
  br i1 %cond, label %camera_CubeInFrustum.exit.thread.loopexit, label %96

; <label>:96                                      ; preds = %46
  %97 = add nsw i32 %p.02.i, 1
  %98 = icmp slt i32 %97, 6
  br i1 %98, label %46, label %camera_CubeInFrustum.exit

camera_CubeInFrustum.exit:                        ; preds = %96
  %99 = getelementptr inbounds [2500 x i32]* @chunks_to_draw_x, i32 0, i32 %index.119
  store i32 %23, i32* %99, align 4, !tbaa !1
  %100 = add nsw i32 %index.119, 1
  %101 = getelementptr inbounds [2500 x i32]* @chunks_to_draw_y, i32 0, i32 %index.119
  store i32 %6, i32* %101, align 4, !tbaa !1
  br label %camera_CubeInFrustum.exit.thread

camera_CubeInFrustum.exit.thread.loopexit:        ; preds = %46
  br label %camera_CubeInFrustum.exit.thread

camera_CubeInFrustum.exit.thread:                 ; preds = %camera_CubeInFrustum.exit.thread.loopexit, %camera_CubeInFrustum.exit
  %index.2 = phi i32 [ %100, %camera_CubeInFrustum.exit ], [ %index.119, %camera_CubeInFrustum.exit.thread.loopexit ]
  %102 = add nsw i32 %b.118, 1
  br label %103

; <label>:103                                     ; preds = %22, %camera_CubeInFrustum.exit.thread
  %b.2 = phi i32 [ %102, %camera_CubeInFrustum.exit.thread ], [ %b.118, %22 ]
  %index.3 = phi i32 [ %index.2, %camera_CubeInFrustum.exit.thread ], [ %index.119, %22 ]
  %indvars.iv.next = add nsw i32 %indvars.iv, 1
  %exitcond32 = icmp eq i32 %indvars.iv.next, 41
  br i1 %exitcond32, label %104, label %22

; <label>:104                                     ; preds = %103
  %index.3.lcssa = phi i32 [ %index.3, %103 ]
  %b.2.lcssa = phi i32 [ %b.2, %103 ]
  %indvars.iv.next34 = add nsw i32 %indvars.iv33, 1
  %exitcond35 = icmp eq i32 %indvars.iv.next34, 41
  br i1 %exitcond35, label %.preheader5, label %.preheader6

; <label>:105                                     ; preds = %.outer, %107
  %k.0 = phi i32 [ %114, %107 ], [ %k.0.ph, %.outer ]
  %106 = icmp slt i32 %k.0, %21
  br i1 %106, label %107, label %140

; <label>:107                                     ; preds = %105
  %108 = getelementptr inbounds [2500 x i32]* @chunks_to_draw_x, i32 0, i32 %k.0
  %109 = load i32* %108, align 4, !tbaa !1
  %110 = sitofp i32 %109 to float
  %111 = getelementptr inbounds [2500 x i32]* @chunks_to_draw_y, i32 0, i32 %k.0
  %112 = load i32* %111, align 4, !tbaa !1
  %113 = sitofp i32 %112 to float
  %114 = add nsw i32 %k.0, 1
  %115 = getelementptr inbounds [2500 x i32]* @chunks_to_draw_x, i32 0, i32 %114
  %116 = load i32* %115, align 4, !tbaa !1
  %117 = sitofp i32 %116 to float
  %118 = insertelement <2 x float> undef, float %1, i32 0
  %119 = insertelement <2 x float> %118, float %1, i32 1
  %120 = insertelement <2 x float> undef, float %110, i32 0
  %121 = insertelement <2 x float> %120, float %117, i32 1
  %122 = getelementptr inbounds [2500 x i32]* @chunks_to_draw_y, i32 0, i32 %114
  %123 = load i32* %122, align 4, !tbaa !1
  %124 = sitofp i32 %123 to float
  %125 = insertelement <2 x float> undef, float %2, i32 0
  %126 = insertelement <2 x float> %125, float %2, i32 1
  %127 = insertelement <2 x float> undef, float %113, i32 0
  %128 = insertelement <2 x float> %127, float %124, i32 1
  %129 = shufflevector <2 x float> %119, <2 x float> %126, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %130 = shufflevector <2 x float> %121, <2 x float> %128, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %131 = fsub fast <4 x float> %130, %129
  %132 = fmul fast <4 x float> %131, %131
  %133 = shufflevector <4 x float> %132, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %134 = shufflevector <4 x float> %132, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %135 = fadd fast <2 x float> %133, %134
  %136 = extractelement <2 x float> %135, i32 0
  %137 = extractelement <2 x float> %135, i32 1
  %138 = fcmp ogt float %136, %137
  br i1 %138, label %139, label %105

; <label>:139                                     ; preds = %107
  %.lcssa63 = phi i32 [ %123, %107 ]
  %.lcssa62 = phi i32* [ %122, %107 ]
  %.lcssa61 = phi i32 [ %116, %107 ]
  %.lcssa60 = phi i32* [ %115, %107 ]
  %.lcssa59 = phi i32 [ %114, %107 ]
  %.lcssa58 = phi i32 [ %112, %107 ]
  %.lcssa57 = phi i32* [ %111, %107 ]
  %.lcssa56 = phi i32 [ %109, %107 ]
  %.lcssa = phi i32* [ %108, %107 ]
  store i32 %.lcssa61, i32* %.lcssa, align 4, !tbaa !1
  store i32 %.lcssa56, i32* %.lcssa60, align 4, !tbaa !1
  store i32 %.lcssa63, i32* %.lcssa57, align 4, !tbaa !1
  store i32 %.lcssa58, i32* %.lcssa62, align 4, !tbaa !1
  br label %.outer.backedge

.outer:                                           ; preds = %.outer.backedge, %.preheader5
  %found.0.ph = phi i8 [ 0, %.preheader5 ], [ %found.0.ph.be, %.outer.backedge ]
  %k.0.ph = phi i32 [ 0, %.preheader5 ], [ %k.0.ph.be, %.outer.backedge ]
  br label %105

; <label>:140                                     ; preds = %105
  %141 = icmp eq i8 %found.0.ph, 0
  br i1 %141, label %.preheader, label %.outer.backedge

.outer.backedge:                                  ; preds = %140, %139
  %found.0.ph.be = phi i8 [ 1, %139 ], [ 0, %140 ]
  %k.0.ph.be = phi i32 [ %.lcssa59, %139 ], [ 0, %140 ]
  br label %.outer

.preheader:                                       ; preds = %140
  %142 = icmp sgt i32 %index.3.lcssa.lcssa, 0
  br i1 %142, label %.lr.ph15.preheader, label %._crit_edge.critedge

.lr.ph15.preheader:                               ; preds = %.preheader
  br label %.lr.ph15

.lr.ph15:                                         ; preds = %.lr.ph15.preheader, %175
  %k1.014 = phi i32 [ %176, %175 ], [ 0, %.lr.ph15.preheader ]
  %143 = getelementptr inbounds [2500 x i32]* @chunks_to_draw_x, i32 0, i32 %k1.014
  %144 = load i32* %143, align 4, !tbaa !1
  %145 = sdiv i32 %144, 16
  %146 = icmp slt i32 %144, -15
  %147 = add nsw i32 %145, 32
  %.x.i = select i1 %146, i32 %147, i32 %145
  %148 = icmp sgt i32 %.x.i, 31
  %149 = add nsw i32 %.x.i, -32
  %.1.i = select i1 %148, i32 %149, i32 %.x.i
  %150 = getelementptr inbounds [2500 x i32]* @chunks_to_draw_y, i32 0, i32 %k1.014
  %151 = load i32* %150, align 4, !tbaa !1
  %152 = sdiv i32 %151, 16
  %153 = icmp slt i32 %151, -15
  %154 = add nsw i32 %152, 32
  %.x.i3 = select i1 %153, i32 %154, i32 %152
  %155 = icmp sgt i32 %.x.i3, 31
  %156 = add nsw i32 %.x.i3, -32
  %.1.i4 = select i1 %155, i32 %156, i32 %.x.i3
  %157 = shl i32 %.1.i4, 5
  %158 = add i32 %157, %.1.i
  %159 = getelementptr inbounds [1024 x i32]* @chunk_display_lists, i32 0, i32 %158
  %160 = load i32* %159, align 4, !tbaa !1
  %161 = tail call zeroext i8 @glIsList(i32 %160) #4
  %162 = icmp eq i8 %161, 0
  br i1 %162, label %163, label %175

; <label>:163                                     ; preds = %.lr.ph15
  %164 = tail call i32 @glGenLists(i32 1) #4
  store i32 %164, i32* %159, align 4, !tbaa !1
  %165 = tail call i32 @glGenLists(i32 1) #4
  %166 = getelementptr inbounds [1024 x i32]* @chunk_display_lists_shadowed, i32 0, i32 %158
  store i32 %165, i32* %166, align 4, !tbaa !1
  %167 = load i32* %159, align 4, !tbaa !1
  %168 = shl i32 %.1.i, 4
  %169 = shl i32 %.1.i4, 4
  %170 = tail call i32 @chunk_generate(i32 %167, i32 %165, i32 %168, i32 %169)
  %171 = getelementptr inbounds [1024 x i32]* @chunk_max_height, i32 0, i32 %158
  store i32 %170, i32* %171, align 4, !tbaa !1
  %172 = tail call i32 @clock() #4
  %173 = sdiv i32 %172, 1000
  %174 = getelementptr inbounds [1024 x i32]* @chunk_last_update, i32 0, i32 %158
  store i32 %173, i32* %174, align 4, !tbaa !1
  br label %175

; <label>:175                                     ; preds = %.lr.ph15, %163
  %176 = add nsw i32 %k1.014, 1
  %exitcond31 = icmp eq i32 %176, %index.3.lcssa.lcssa
  br i1 %exitcond31, label %._crit_edge16, label %.lr.ph15

._crit_edge16:                                    ; preds = %175
  tail call void @glEnableClientState(i32 32886) #4
  tail call void @glEnableClientState(i32 32884) #4
  br i1 %142, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %._crit_edge16
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %k2.013 = phi i32 [ %183, %.lr.ph ], [ 0, %.lr.ph.preheader ]
  %177 = getelementptr inbounds [2500 x i32]* @chunks_to_draw_x, i32 0, i32 %k2.013
  %178 = load i32* %177, align 4, !tbaa !1
  %179 = sdiv i32 %178, 16
  %180 = getelementptr inbounds [2500 x i32]* @chunks_to_draw_y, i32 0, i32 %k2.013
  %181 = load i32* %180, align 4, !tbaa !1
  %182 = sdiv i32 %181, 16
  tail call void @chunk_render(i32 %179, i32 %182, i8 zeroext %shadowed)
  %183 = add nsw i32 %k2.013, 1
  %exitcond = icmp eq i32 %183, %index.3.lcssa.lcssa
  br i1 %exitcond, label %._crit_edge.loopexit, label %.lr.ph

._crit_edge.critedge:                             ; preds = %.preheader
  tail call void @glEnableClientState(i32 32886) #4
  tail call void @glEnableClientState(i32 32884) #4
  br label %._crit_edge

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %._crit_edge.critedge, %._crit_edge16
  %index.3.lcssa64 = phi i32 [ %index.3.lcssa.lcssa, %._crit_edge.loopexit ], [ %index.3.lcssa.lcssa, %._crit_edge.critedge ], [ %index.3.lcssa.lcssa, %._crit_edge16 ]
  tail call void @glDisableClientState(i32 32886) #4
  tail call void @glDisableClientState(i32 32884) #4
  %184 = icmp eq i32 %b.2.lcssa.lcssa, 0
  br i1 %184, label %189, label %185

; <label>:185                                     ; preds = %._crit_edge
  %186 = sitofp i32 %index.3.lcssa64 to float
  %187 = sitofp i32 %b.2.lcssa.lcssa to float
  %188 = fdiv fast float %186, %187
  br label %189

; <label>:189                                     ; preds = %._crit_edge, %185
  %.0 = phi float [ %188, %185 ], [ 0.000000e+00, %._crit_edge ]
  ret float %.0
}

; Function Attrs: nounwind readonly
define i32 @camera_CubeInFrustum(float %x, float %y, float %z, float %size, float %size_y) #1 {
  %1 = fsub fast float %x, %size
  %2 = fsub fast float %y, %size
  %3 = fsub fast float %z, %size
  %4 = fadd fast float %x, %size
  %5 = fadd fast float %y, %size_y
  %6 = fadd fast float %z, %size
  br label %7

; <label>:7                                       ; preds = %0, %64
  %c2.03 = phi i32 [ 0, %0 ], [ %c2.1, %64 ]
  %p.02 = phi i32 [ 0, %0 ], [ %65, %64 ]
  %8 = getelementptr inbounds [6 x [4 x float]]* @frustum, i32 0, i32 %p.02, i32 0
  %9 = bitcast float* %8 to <2 x float>*
  %10 = load <2 x float>* %9, align 16, !tbaa !10
  %11 = extractelement <2 x float> %10, i32 0
  %12 = extractelement <2 x float> %10, i32 1
  %13 = fmul fast float %2, %12
  %14 = getelementptr inbounds [6 x [4 x float]]* @frustum, i32 0, i32 %p.02, i32 2
  %15 = bitcast float* %14 to <2 x float>*
  %16 = load <2 x float>* %15, align 8, !tbaa !10
  %17 = insertelement <2 x float> undef, float %1, i32 0
  %18 = insertelement <2 x float> %17, float %5, i32 1
  %19 = fmul fast <2 x float> %18, %10
  %20 = insertelement <2 x float> undef, float %13, i32 0
  %21 = shufflevector <2 x float> %20, <2 x float> %19, <2 x i32> <i32 0, i32 3>
  %22 = insertelement <2 x float> undef, float %11, i32 0
  %23 = insertelement <2 x float> %22, float %y, i32 1
  %24 = insertelement <2 x float> undef, float %4, i32 0
  %25 = shufflevector <2 x float> %24, <2 x float> %10, <2 x i32> <i32 0, i32 3>
  %26 = fmul fast <2 x float> %25, %23
  %27 = shufflevector <2 x float> %19, <2 x float> %26, <2 x i32> <i32 1, i32 3>
  %28 = shufflevector <2 x float> %26, <2 x float> %19, <2 x i32> <i32 0, i32 2>
  %29 = fadd fast <2 x float> %28, %27
  %30 = shufflevector <2 x float> %16, <2 x float> undef, <2 x i32> zeroinitializer
  %31 = insertelement <2 x float> undef, float %3, i32 0
  %32 = insertelement <2 x float> %31, float %6, i32 1
  %33 = fmul fast <2 x float> %32, %30
  %34 = shufflevector <2 x float> %20, <2 x float> %26, <2 x i32> <i32 0, i32 3>
  %35 = shufflevector <2 x float> %19, <2 x float> %26, <4 x i32> <i32 0, i32 0, i32 2, i32 2>
  %36 = shufflevector <2 x float> %21, <2 x float> %34, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %37 = fadd fast <4 x float> %35, %36
  %38 = shufflevector <4 x float> %37, <4 x float> undef, <2 x i32> <i32 undef, i32 1>
  %39 = shufflevector <2 x float> %38, <2 x float> %29, <2 x i32> <i32 1, i32 2>
  %40 = shufflevector <2 x float> %33, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %41 = fadd fast <4 x float> %37, %40
  %42 = shufflevector <2 x float> %16, <2 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %43 = fadd fast <4 x float> %42, %41
  %44 = fcmp ogt <4 x float> %43, zeroinitializer
  %45 = shufflevector <4 x i1> %44, <4 x i1> undef, <2 x i32> <i32 0, i32 1>
  %46 = extractelement <4 x i1> %44, i32 2
  %47 = extractelement <4 x i1> %44, i32 3
  %48 = zext i1 %47 to i32
  %49 = extractelement <4 x i1> %44, i32 0
  %50 = select i1 %49, i32 2, i32 1
  %c.0 = zext <2 x i1> %45 to <2 x i32>
  %c.0.v.r1 = extractelement <2 x i32> %c.0, i32 0
  %c.0.v.r2 = extractelement <2 x i32> %c.0, i32 1
  %c.1 = select i1 %46, i32 %50, i32 %c.0.v.r1
  %51 = shufflevector <2 x float> %33, <2 x float> undef, <4 x i32> <i32 0, i32 undef, i32 undef, i32 1>
  %52 = shufflevector <4 x float> %51, <4 x float> undef, <4 x i32> <i32 0, i32 0, i32 3, i32 3>
  %53 = shufflevector <2 x float> %39, <2 x float> %29, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %54 = fadd fast <4 x float> %53, %52
  %55 = fadd fast <4 x float> %42, %54
  %56 = fcmp ogt <4 x float> %55, zeroinitializer
  %57 = zext <4 x i1> %56 to <4 x i32>
  %58 = extractelement <4 x i32> %57, i32 0
  %59 = extractelement <4 x i32> %57, i32 1
  %60 = extractelement <4 x i32> %57, i32 2
  %61 = extractelement <4 x i32> %57, i32 3
  %c.2 = add nuw nsw i32 %59, %58
  %c.3 = add nuw nsw i32 %c.2, %61
  %c.4 = add nuw nsw i32 %c.3, %48
  %c.5 = add nuw nsw i32 %c.4, %c.0.v.r2
  %c.6 = add nuw nsw i32 %c.5, %60
  %c.7 = add nuw nsw i32 %c.6, %c.1
  switch i32 %c.7, label %64 [
    i32 0, label %.loopexit.loopexit
    i32 8, label %62
  ]

; <label>:62                                      ; preds = %7
  %63 = add nsw i32 %c2.03, 1
  br label %64

; <label>:64                                      ; preds = %7, %62
  %c2.1 = phi i32 [ %63, %62 ], [ %c2.03, %7 ]
  %65 = add nsw i32 %p.02, 1
  %66 = icmp slt i32 %65, 6
  br i1 %66, label %7, label %67

; <label>:67                                      ; preds = %64
  %c2.1.lcssa = phi i32 [ %c2.1, %64 ]
  %68 = icmp eq i32 %c2.1.lcssa, 6
  %69 = select i1 %68, i32 2, i32 1
  br label %.loopexit

.loopexit.loopexit:                               ; preds = %7
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %67
  %.0 = phi i32 [ %69, %67 ], [ 0, %.loopexit.loopexit ]
  ret i32 %.0
}

; Function Attrs: nounwind readnone
define i32 @chunk_map_coord(i32 %x) #2 {
  %1 = icmp slt i32 %x, 0
  %2 = add nsw i32 %x, 32
  %.x = select i1 %1, i32 %2, i32 %x
  %3 = icmp sgt i32 %.x, 31
  %4 = add nsw i32 %.x, -32
  %.1 = select i1 %3, i32 %4, i32 %.x
  ret i32 %.1
}

declare zeroext i8 @glIsList(i32) #3

declare i32 @glGenLists(i32) #3

; Function Attrs: nounwind
define i32 @chunk_generate(i32 %displaylist, i32 %displaylist_shadowed, i32 %chunk_x, i32 %chunk_y) #0 {
  %checked_voxels = alloca [2 x [256 x i8]], align 1
  %1 = add nsw i32 %chunk_x, 16
  %2 = load i32* @map_size_y, align 4
  %3 = icmp sgt i32 %2, 0
  %4 = load i32* @map_size_z, align 4, !tbaa !1
  %5 = load i32* @map_size_x, align 4, !tbaa !1
  %6 = load i64** @map_colors, align 4, !tbaa !5
  %7 = load i8* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 3), align 1, !tbaa !14
  %8 = icmp eq i8 %7, 0
  %9 = add nsw i32 %2, -1
  %10 = add nsw i32 %5, -1
  %11 = add i32 %4, -1
  br label %.preheader607

.preheader607:                                    ; preds = %0, %1151
  %size.01119 = phi i32 [ 0, %0 ], [ %size.2.lcssa.lcssa, %1151 ]
  %max_height.01118 = phi i32 [ 0, %0 ], [ %max_height.2.lcssa.lcssa, %1151 ]
  %x.01117 = phi i32 [ %chunk_x, %0 ], [ %17, %1151 ]
  %12 = icmp eq i32 %x.01117, 0
  %13 = icmp eq i32 %x.01117, %10
  %14 = icmp slt i32 %x.01117, %10
  %15 = icmp sgt i32 %x.01117, 0
  %16 = add nsw i32 %x.01117, -1
  %17 = add nsw i32 %x.01117, 1
  %18 = icmp sgt i32 %5, %17
  %19 = icmp sgt i32 %5, %x.01117
  %20 = icmp sgt i32 %5, %16
  br label %.preheader606

.preheader606:                                    ; preds = %.preheader607, %._crit_edge1110
  %size.11116 = phi i32 [ %size.01119, %.preheader607 ], [ %size.2.lcssa, %._crit_edge1110 ]
  %max_height.11115 = phi i32 [ %max_height.01118, %.preheader607 ], [ %max_height.2.lcssa, %._crit_edge1110 ]
  %z.01113 = phi i32 [ %chunk_y, %.preheader607 ], [ %.pre-phi, %._crit_edge1110 ]
  br i1 %3, label %.lr.ph1109, label %.preheader606._crit_edge

.preheader606._crit_edge:                         ; preds = %.preheader606
  %.pre = add nsw i32 %z.01113, 1
  br label %._crit_edge1110

.lr.ph1109:                                       ; preds = %.preheader606
  %21 = icmp eq i32 %z.01113, 0
  %22 = icmp eq i32 %z.01113, %11
  %23 = icmp slt i32 %z.01113, %11
  %24 = add i32 %z.01113, 1
  %25 = icmp sgt i32 %z.01113, 0
  %26 = add i32 %z.01113, -1
  %27 = icmp sgt i32 %4, %26
  %28 = icmp sgt i32 %4, %24
  %29 = icmp sgt i32 %4, %z.01113
  br label %30

; <label>:30                                      ; preds = %1147, %.lr.ph1109
  %size.21108 = phi i32 [ %size.11116, %.lr.ph1109 ], [ %size.8, %1147 ]
  %max_height.21107 = phi i32 [ %max_height.11115, %.lr.ph1109 ], [ %max_height.4, %1147 ]
  %y.01104 = phi i32 [ 0, %.lr.ph1109 ], [ %1148, %1147 ]
  %31 = mul nsw i32 %4, %y.01104
  %32 = add nsw i32 %31, %z.01113
  %33 = mul nsw i32 %32, %5
  %34 = add nsw i32 %33, %x.01117
  %35 = getelementptr inbounds i64* %6, i32 %34
  %36 = load i64* %35, align 4, !tbaa !7
  %37 = icmp eq i64 %36, 4294967295
  br i1 %37, label %1147, label %38

; <label>:38                                      ; preds = %30
  %39 = icmp slt i32 %max_height.21107, %y.01104
  %y.0.max_height.2 = select i1 %39, i32 %y.01104, i32 %max_height.21107
  %40 = sub nsw i32 %2, %y.01104
  %41 = icmp sgt i32 %40, 0
  br i1 %41, label %.lr.ph1100.preheader, label %map_get.exit403.thread._crit_edge

.lr.ph1100.preheader:                             ; preds = %38
  br label %.lr.ph1100

; <label>:42                                      ; preds = %map_get.exit403.thread
  %43 = icmp slt i32 %323, %40
  br i1 %43, label %.lr.ph1100, label %map_get.exit403.thread._crit_edge.loopexit

.lr.ph1100:                                       ; preds = %.lr.ph1100.preheader, %42
  %shadowed.01097 = phi i8 [ %shadowed.6, %42 ], [ 0, %.lr.ph1100.preheader ]
  %a.01096 = phi i32 [ %323, %42 ], [ 0, %.lr.ph1100.preheader ]
  %44 = and i8 %shadowed.01097, 1
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %46, label %map_get.exit448.thread

; <label>:46                                      ; preds = %.lr.ph1100
  %47 = add nsw i32 %a.01096, %y.01104
  %48 = add nsw i32 %47, 1
  %49 = add nsw i32 %a.01096, %z.01113
  %50 = or i32 %48, %x.01117
  %51 = or i32 %50, %49
  %52 = icmp sgt i32 %51, -1
  %53 = icmp sgt i32 %2, %48
  %or.cond.i = and i1 %19, %53
  %or.cond = and i1 %52, %or.cond.i
  %54 = icmp sgt i32 %4, %49
  %or.cond1390 = and i1 %or.cond, %54
  br i1 %or.cond1390, label %map_get.exit, label %map_get.exit.thread

map_get.exit:                                     ; preds = %46
  %55 = mul nsw i32 %4, %48
  %56 = add nsw i32 %55, %49
  %57 = mul nsw i32 %56, %5
  %58 = add nsw i32 %57, %x.01117
  %59 = getelementptr inbounds i64* %6, i32 %58
  %60 = load i64* %59, align 4, !tbaa !7
  %61 = icmp eq i64 %60, 4294967295
  br i1 %61, label %map_get.exit.thread, label %62

; <label>:62                                      ; preds = %map_get.exit
  %63 = or i8 %shadowed.01097, 1
  br label %map_get.exit448.thread

map_get.exit.thread:                              ; preds = %46, %map_get.exit
  %64 = add nsw i32 %49, 1
  %65 = or i32 %50, %64
  %66 = icmp sgt i32 %65, -1
  %67 = icmp sgt i32 %2, %48
  %or.cond.i449 = and i1 %19, %67
  %or.cond1391 = and i1 %66, %or.cond.i449
  %68 = icmp sgt i32 %4, %64
  %or.cond1392 = and i1 %or.cond1391, %68
  br i1 %or.cond1392, label %map_get.exit451, label %map_get.exit451.thread

map_get.exit451:                                  ; preds = %map_get.exit.thread
  %69 = mul nsw i32 %4, %48
  %70 = add nsw i32 %69, %64
  %71 = mul nsw i32 %70, %5
  %72 = add nsw i32 %71, %x.01117
  %73 = getelementptr inbounds i64* %6, i32 %72
  %74 = load i64* %73, align 4, !tbaa !7
  %75 = icmp eq i64 %74, 4294967295
  br i1 %75, label %map_get.exit451.thread, label %89

map_get.exit451.thread:                           ; preds = %map_get.exit.thread, %map_get.exit451
  %76 = add nsw i32 %47, 2
  %77 = or i32 %49, %x.01117
  %78 = or i32 %77, %76
  %79 = icmp sgt i32 %78, -1
  %80 = icmp sgt i32 %2, %76
  %or.cond.i446 = and i1 %19, %80
  %or.cond1393 = and i1 %79, %or.cond.i446
  %81 = icmp sgt i32 %4, %49
  %or.cond1394 = and i1 %or.cond1393, %81
  br i1 %or.cond1394, label %map_get.exit448, label %map_get.exit448.thread

map_get.exit448:                                  ; preds = %map_get.exit451.thread
  %82 = mul nsw i32 %4, %76
  %83 = add nsw i32 %82, %49
  %84 = mul nsw i32 %83, %5
  %85 = add nsw i32 %84, %x.01117
  %86 = getelementptr inbounds i64* %6, i32 %85
  %87 = load i64* %86, align 4, !tbaa !7
  %88 = icmp eq i64 %87, 4294967295
  br i1 %88, label %map_get.exit448.thread, label %89

; <label>:89                                      ; preds = %map_get.exit448, %map_get.exit451
  %90 = or i8 %shadowed.01097, 1
  br label %map_get.exit448.thread

map_get.exit448.thread:                           ; preds = %map_get.exit451.thread, %map_get.exit448, %.lr.ph1100, %62, %89
  %shadowed.1 = phi i8 [ %shadowed.01097, %.lr.ph1100 ], [ %63, %62 ], [ %90, %89 ], [ %shadowed.01097, %map_get.exit448 ], [ %shadowed.01097, %map_get.exit451.thread ]
  %91 = and i8 %shadowed.1, 2
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %93, label %map_get.exit439.thread

; <label>:93                                      ; preds = %map_get.exit448.thread
  %94 = add nsw i32 %a.01096, %y.01104
  %95 = add nsw i32 %94, -1
  %96 = add nsw i32 %a.01096, %z.01113
  %97 = or i32 %95, %x.01117
  %98 = or i32 %97, %96
  %99 = icmp sgt i32 %98, -1
  %100 = icmp sgt i32 %2, %95
  %or.cond.i443 = and i1 %19, %100
  %or.cond1395 = and i1 %99, %or.cond.i443
  %101 = icmp sgt i32 %4, %96
  %or.cond1396 = and i1 %or.cond1395, %101
  br i1 %or.cond1396, label %map_get.exit445, label %map_get.exit445.thread

map_get.exit445:                                  ; preds = %93
  %102 = mul nsw i32 %4, %95
  %103 = add nsw i32 %102, %96
  %104 = mul nsw i32 %103, %5
  %105 = add nsw i32 %104, %x.01117
  %106 = getelementptr inbounds i64* %6, i32 %105
  %107 = load i64* %106, align 4, !tbaa !7
  %108 = icmp eq i64 %107, 4294967295
  br i1 %108, label %map_get.exit445.thread, label %109

; <label>:109                                     ; preds = %map_get.exit445
  %110 = or i8 %shadowed.1, 2
  br label %map_get.exit439.thread

map_get.exit445.thread:                           ; preds = %93, %map_get.exit445
  %111 = add nsw i32 %96, 1
  %112 = or i32 %97, %111
  %113 = icmp sgt i32 %112, -1
  %114 = icmp sgt i32 %2, %95
  %or.cond.i440 = and i1 %19, %114
  %or.cond1397 = and i1 %113, %or.cond.i440
  %115 = icmp sgt i32 %4, %111
  %or.cond1398 = and i1 %or.cond1397, %115
  br i1 %or.cond1398, label %map_get.exit442, label %map_get.exit442.thread

map_get.exit442:                                  ; preds = %map_get.exit445.thread
  %116 = mul nsw i32 %4, %95
  %117 = add nsw i32 %116, %111
  %118 = mul nsw i32 %117, %5
  %119 = add nsw i32 %118, %x.01117
  %120 = getelementptr inbounds i64* %6, i32 %119
  %121 = load i64* %120, align 4, !tbaa !7
  %122 = icmp eq i64 %121, 4294967295
  br i1 %122, label %map_get.exit442.thread, label %135

map_get.exit442.thread:                           ; preds = %map_get.exit445.thread, %map_get.exit442
  %123 = or i32 %94, %x.01117
  %124 = or i32 %123, %96
  %125 = icmp sgt i32 %124, -1
  %126 = icmp sgt i32 %2, %94
  %or.cond.i437 = and i1 %19, %126
  %or.cond1399 = and i1 %125, %or.cond.i437
  %127 = icmp sgt i32 %4, %96
  %or.cond1400 = and i1 %or.cond1399, %127
  br i1 %or.cond1400, label %map_get.exit439, label %map_get.exit439.thread

map_get.exit439:                                  ; preds = %map_get.exit442.thread
  %128 = mul nsw i32 %4, %94
  %129 = add nsw i32 %128, %96
  %130 = mul nsw i32 %129, %5
  %131 = add nsw i32 %130, %x.01117
  %132 = getelementptr inbounds i64* %6, i32 %131
  %133 = load i64* %132, align 4, !tbaa !7
  %134 = icmp eq i64 %133, 4294967295
  br i1 %134, label %map_get.exit439.thread, label %135

; <label>:135                                     ; preds = %map_get.exit439, %map_get.exit442
  %136 = or i8 %shadowed.1, 2
  br label %map_get.exit439.thread

map_get.exit439.thread:                           ; preds = %map_get.exit442.thread, %map_get.exit439, %map_get.exit448.thread, %109, %135
  %shadowed.2 = phi i8 [ %shadowed.1, %map_get.exit448.thread ], [ %110, %109 ], [ %136, %135 ], [ %shadowed.1, %map_get.exit439 ], [ %shadowed.1, %map_get.exit442.thread ]
  %137 = and i8 %shadowed.2, 4
  %138 = icmp eq i8 %137, 0
  br i1 %138, label %139, label %map_get.exit430.thread

; <label>:139                                     ; preds = %map_get.exit439.thread
  %140 = add nsw i32 %a.01096, %y.01104
  %141 = add nsw i32 %a.01096, %z.01113
  %142 = or i32 %140, %17
  %143 = or i32 %142, %141
  %144 = icmp sgt i32 %143, -1
  %145 = icmp sgt i32 %2, %140
  %or.cond.i434 = and i1 %18, %145
  %or.cond1401 = and i1 %144, %or.cond.i434
  %146 = icmp sgt i32 %4, %141
  %or.cond1402 = and i1 %or.cond1401, %146
  br i1 %or.cond1402, label %map_get.exit436, label %map_get.exit436.thread

map_get.exit436:                                  ; preds = %139
  %147 = mul nsw i32 %4, %140
  %148 = add nsw i32 %147, %141
  %149 = mul nsw i32 %148, %5
  %150 = add nsw i32 %149, %17
  %151 = getelementptr inbounds i64* %6, i32 %150
  %152 = load i64* %151, align 4, !tbaa !7
  %153 = icmp eq i64 %152, 4294967295
  br i1 %153, label %map_get.exit436.thread, label %154

; <label>:154                                     ; preds = %map_get.exit436
  %155 = or i8 %shadowed.2, 4
  br label %map_get.exit430.thread

map_get.exit436.thread:                           ; preds = %139, %map_get.exit436
  %156 = add nsw i32 %141, 1
  %157 = or i32 %142, %156
  %158 = icmp sgt i32 %157, -1
  %159 = icmp sgt i32 %2, %140
  %or.cond.i431 = and i1 %18, %159
  %or.cond1403 = and i1 %158, %or.cond.i431
  %160 = icmp sgt i32 %4, %156
  %or.cond1404 = and i1 %or.cond1403, %160
  br i1 %or.cond1404, label %map_get.exit433, label %map_get.exit433.thread

map_get.exit433:                                  ; preds = %map_get.exit436.thread
  %161 = mul nsw i32 %4, %140
  %162 = add nsw i32 %161, %156
  %163 = mul nsw i32 %162, %5
  %164 = add nsw i32 %163, %17
  %165 = getelementptr inbounds i64* %6, i32 %164
  %166 = load i64* %165, align 4, !tbaa !7
  %167 = icmp eq i64 %166, 4294967295
  br i1 %167, label %map_get.exit433.thread, label %181

map_get.exit433.thread:                           ; preds = %map_get.exit436.thread, %map_get.exit433
  %168 = add nsw i32 %140, 1
  %169 = or i32 %141, %17
  %170 = or i32 %169, %168
  %171 = icmp sgt i32 %170, -1
  %172 = icmp sgt i32 %2, %168
  %or.cond.i428 = and i1 %18, %172
  %or.cond1405 = and i1 %171, %or.cond.i428
  %173 = icmp sgt i32 %4, %141
  %or.cond1406 = and i1 %or.cond1405, %173
  br i1 %or.cond1406, label %map_get.exit430, label %map_get.exit430.thread

map_get.exit430:                                  ; preds = %map_get.exit433.thread
  %174 = mul nsw i32 %4, %168
  %175 = add nsw i32 %174, %141
  %176 = mul nsw i32 %175, %5
  %177 = add nsw i32 %176, %17
  %178 = getelementptr inbounds i64* %6, i32 %177
  %179 = load i64* %178, align 4, !tbaa !7
  %180 = icmp eq i64 %179, 4294967295
  br i1 %180, label %map_get.exit430.thread, label %181

; <label>:181                                     ; preds = %map_get.exit430, %map_get.exit433
  %182 = or i8 %shadowed.2, 4
  br label %map_get.exit430.thread

map_get.exit430.thread:                           ; preds = %map_get.exit433.thread, %map_get.exit430, %map_get.exit439.thread, %154, %181
  %shadowed.3 = phi i8 [ %shadowed.2, %map_get.exit439.thread ], [ %155, %154 ], [ %182, %181 ], [ %shadowed.2, %map_get.exit430 ], [ %shadowed.2, %map_get.exit433.thread ]
  %183 = and i8 %shadowed.3, 8
  %184 = icmp eq i8 %183, 0
  br i1 %184, label %185, label %map_get.exit421.thread

; <label>:185                                     ; preds = %map_get.exit430.thread
  %186 = add nsw i32 %a.01096, %y.01104
  %187 = add nsw i32 %a.01096, %z.01113
  %188 = or i32 %186, %16
  %189 = or i32 %188, %187
  %190 = icmp sgt i32 %189, -1
  %191 = icmp sgt i32 %2, %186
  %or.cond.i425 = and i1 %20, %191
  %or.cond1407 = and i1 %190, %or.cond.i425
  %192 = icmp sgt i32 %4, %187
  %or.cond1408 = and i1 %or.cond1407, %192
  br i1 %or.cond1408, label %map_get.exit427, label %map_get.exit427.thread

map_get.exit427:                                  ; preds = %185
  %193 = mul nsw i32 %4, %186
  %194 = add nsw i32 %193, %187
  %195 = mul nsw i32 %194, %5
  %196 = add nsw i32 %195, %16
  %197 = getelementptr inbounds i64* %6, i32 %196
  %198 = load i64* %197, align 4, !tbaa !7
  %199 = icmp eq i64 %198, 4294967295
  br i1 %199, label %map_get.exit427.thread, label %200

; <label>:200                                     ; preds = %map_get.exit427
  %201 = or i8 %shadowed.3, 8
  br label %map_get.exit421.thread

map_get.exit427.thread:                           ; preds = %185, %map_get.exit427
  %202 = add nsw i32 %187, 1
  %203 = or i32 %188, %202
  %204 = icmp sgt i32 %203, -1
  %205 = icmp sgt i32 %2, %186
  %or.cond.i422 = and i1 %20, %205
  %or.cond1409 = and i1 %204, %or.cond.i422
  %206 = icmp sgt i32 %4, %202
  %or.cond1410 = and i1 %or.cond1409, %206
  br i1 %or.cond1410, label %map_get.exit424, label %map_get.exit424.thread

map_get.exit424:                                  ; preds = %map_get.exit427.thread
  %207 = mul nsw i32 %4, %186
  %208 = add nsw i32 %207, %202
  %209 = mul nsw i32 %208, %5
  %210 = add nsw i32 %209, %16
  %211 = getelementptr inbounds i64* %6, i32 %210
  %212 = load i64* %211, align 4, !tbaa !7
  %213 = icmp eq i64 %212, 4294967295
  br i1 %213, label %map_get.exit424.thread, label %227

map_get.exit424.thread:                           ; preds = %map_get.exit427.thread, %map_get.exit424
  %214 = add nsw i32 %186, 1
  %215 = or i32 %187, %16
  %216 = or i32 %215, %214
  %217 = icmp sgt i32 %216, -1
  %218 = icmp sgt i32 %2, %214
  %or.cond.i419 = and i1 %20, %218
  %or.cond1411 = and i1 %217, %or.cond.i419
  %219 = icmp sgt i32 %4, %187
  %or.cond1412 = and i1 %or.cond1411, %219
  br i1 %or.cond1412, label %map_get.exit421, label %map_get.exit421.thread

map_get.exit421:                                  ; preds = %map_get.exit424.thread
  %220 = mul nsw i32 %4, %214
  %221 = add nsw i32 %220, %187
  %222 = mul nsw i32 %221, %5
  %223 = add nsw i32 %222, %16
  %224 = getelementptr inbounds i64* %6, i32 %223
  %225 = load i64* %224, align 4, !tbaa !7
  %226 = icmp eq i64 %225, 4294967295
  br i1 %226, label %map_get.exit421.thread, label %227

; <label>:227                                     ; preds = %map_get.exit421, %map_get.exit424
  %228 = or i8 %shadowed.3, 8
  br label %map_get.exit421.thread

map_get.exit421.thread:                           ; preds = %map_get.exit424.thread, %map_get.exit421, %map_get.exit430.thread, %200, %227
  %shadowed.4 = phi i8 [ %shadowed.3, %map_get.exit430.thread ], [ %201, %200 ], [ %228, %227 ], [ %shadowed.3, %map_get.exit421 ], [ %shadowed.3, %map_get.exit424.thread ]
  %229 = and i8 %shadowed.4, 16
  %230 = icmp eq i8 %229, 0
  br i1 %230, label %231, label %map_get.exit412.thread

; <label>:231                                     ; preds = %map_get.exit421.thread
  %232 = add nsw i32 %a.01096, %y.01104
  %233 = add nsw i32 %a.01096, %z.01113
  %234 = add nsw i32 %233, 1
  %235 = or i32 %232, %x.01117
  %236 = or i32 %235, %234
  %237 = icmp sgt i32 %236, -1
  %238 = icmp sgt i32 %2, %232
  %or.cond.i416 = and i1 %19, %238
  %or.cond1413 = and i1 %237, %or.cond.i416
  %239 = icmp sgt i32 %4, %234
  %or.cond1414 = and i1 %or.cond1413, %239
  br i1 %or.cond1414, label %map_get.exit418, label %map_get.exit418.thread

map_get.exit418:                                  ; preds = %231
  %240 = mul nsw i32 %4, %232
  %241 = add nsw i32 %240, %234
  %242 = mul nsw i32 %241, %5
  %243 = add nsw i32 %242, %x.01117
  %244 = getelementptr inbounds i64* %6, i32 %243
  %245 = load i64* %244, align 4, !tbaa !7
  %246 = icmp eq i64 %245, 4294967295
  br i1 %246, label %map_get.exit418.thread, label %247

; <label>:247                                     ; preds = %map_get.exit418
  %248 = or i8 %shadowed.4, 16
  br label %map_get.exit412.thread

map_get.exit418.thread:                           ; preds = %231, %map_get.exit418
  %249 = add nsw i32 %233, 2
  %250 = or i32 %235, %249
  %251 = icmp sgt i32 %250, -1
  %252 = icmp sgt i32 %2, %232
  %or.cond.i413 = and i1 %19, %252
  %or.cond1415 = and i1 %251, %or.cond.i413
  %253 = icmp sgt i32 %4, %249
  %or.cond1416 = and i1 %or.cond1415, %253
  br i1 %or.cond1416, label %map_get.exit415, label %map_get.exit415.thread

map_get.exit415:                                  ; preds = %map_get.exit418.thread
  %254 = mul nsw i32 %4, %232
  %255 = add nsw i32 %254, %249
  %256 = mul nsw i32 %255, %5
  %257 = add nsw i32 %256, %x.01117
  %258 = getelementptr inbounds i64* %6, i32 %257
  %259 = load i64* %258, align 4, !tbaa !7
  %260 = icmp eq i64 %259, 4294967295
  br i1 %260, label %map_get.exit415.thread, label %274

map_get.exit415.thread:                           ; preds = %map_get.exit418.thread, %map_get.exit415
  %261 = add nsw i32 %232, 1
  %262 = or i32 %261, %x.01117
  %263 = or i32 %262, %234
  %264 = icmp sgt i32 %263, -1
  %265 = icmp sgt i32 %2, %261
  %or.cond.i410 = and i1 %19, %265
  %or.cond1417 = and i1 %264, %or.cond.i410
  %266 = icmp sgt i32 %4, %234
  %or.cond1418 = and i1 %or.cond1417, %266
  br i1 %or.cond1418, label %map_get.exit412, label %map_get.exit412.thread

map_get.exit412:                                  ; preds = %map_get.exit415.thread
  %267 = mul nsw i32 %4, %261
  %268 = add nsw i32 %267, %234
  %269 = mul nsw i32 %268, %5
  %270 = add nsw i32 %269, %x.01117
  %271 = getelementptr inbounds i64* %6, i32 %270
  %272 = load i64* %271, align 4, !tbaa !7
  %273 = icmp eq i64 %272, 4294967295
  br i1 %273, label %map_get.exit412.thread, label %274

; <label>:274                                     ; preds = %map_get.exit412, %map_get.exit415
  %275 = or i8 %shadowed.4, 16
  br label %map_get.exit412.thread

map_get.exit412.thread:                           ; preds = %map_get.exit415.thread, %map_get.exit412, %map_get.exit421.thread, %247, %274
  %shadowed.5 = phi i8 [ %shadowed.4, %map_get.exit421.thread ], [ %248, %247 ], [ %275, %274 ], [ %shadowed.4, %map_get.exit412 ], [ %shadowed.4, %map_get.exit415.thread ]
  %276 = and i8 %shadowed.5, 32
  %277 = icmp eq i8 %276, 0
  br i1 %277, label %278, label %map_get.exit403.thread

; <label>:278                                     ; preds = %map_get.exit412.thread
  %279 = add nsw i32 %a.01096, %y.01104
  %280 = add nsw i32 %a.01096, %z.01113
  %281 = add nsw i32 %280, -1
  %282 = or i32 %279, %x.01117
  %283 = or i32 %282, %281
  %284 = icmp sgt i32 %283, -1
  %285 = icmp sgt i32 %2, %279
  %or.cond.i407 = and i1 %19, %285
  %or.cond1419 = and i1 %284, %or.cond.i407
  %286 = icmp sgt i32 %4, %281
  %or.cond1420 = and i1 %or.cond1419, %286
  br i1 %or.cond1420, label %map_get.exit409, label %map_get.exit409.thread

map_get.exit409:                                  ; preds = %278
  %287 = mul nsw i32 %4, %279
  %288 = add nsw i32 %287, %281
  %289 = mul nsw i32 %288, %5
  %290 = add nsw i32 %289, %x.01117
  %291 = getelementptr inbounds i64* %6, i32 %290
  %292 = load i64* %291, align 4, !tbaa !7
  %293 = icmp eq i64 %292, 4294967295
  br i1 %293, label %map_get.exit409.thread, label %294

; <label>:294                                     ; preds = %map_get.exit409
  %295 = or i8 %shadowed.5, 32
  br label %map_get.exit403.thread

map_get.exit409.thread:                           ; preds = %278, %map_get.exit409
  %296 = or i32 %282, %280
  %297 = icmp sgt i32 %296, -1
  %298 = icmp sgt i32 %2, %279
  %or.cond.i404 = and i1 %19, %298
  %or.cond1421 = and i1 %297, %or.cond.i404
  %299 = icmp sgt i32 %4, %280
  %or.cond1422 = and i1 %or.cond1421, %299
  br i1 %or.cond1422, label %map_get.exit406, label %map_get.exit406.thread

map_get.exit406:                                  ; preds = %map_get.exit409.thread
  %300 = mul nsw i32 %4, %279
  %301 = add nsw i32 %300, %280
  %302 = mul nsw i32 %301, %5
  %303 = add nsw i32 %302, %x.01117
  %304 = getelementptr inbounds i64* %6, i32 %303
  %305 = load i64* %304, align 4, !tbaa !7
  %306 = icmp eq i64 %305, 4294967295
  br i1 %306, label %map_get.exit406.thread, label %320

map_get.exit406.thread:                           ; preds = %map_get.exit409.thread, %map_get.exit406
  %307 = add nsw i32 %279, 1
  %308 = or i32 %307, %x.01117
  %309 = or i32 %308, %281
  %310 = icmp sgt i32 %309, -1
  %311 = icmp sgt i32 %2, %307
  %or.cond.i401 = and i1 %19, %311
  %or.cond1423 = and i1 %310, %or.cond.i401
  %312 = icmp sgt i32 %4, %281
  %or.cond1424 = and i1 %or.cond1423, %312
  br i1 %or.cond1424, label %map_get.exit403, label %map_get.exit403.thread

map_get.exit403:                                  ; preds = %map_get.exit406.thread
  %313 = mul nsw i32 %4, %307
  %314 = add nsw i32 %313, %281
  %315 = mul nsw i32 %314, %5
  %316 = add nsw i32 %315, %x.01117
  %317 = getelementptr inbounds i64* %6, i32 %316
  %318 = load i64* %317, align 4, !tbaa !7
  %319 = icmp eq i64 %318, 4294967295
  br i1 %319, label %map_get.exit403.thread, label %320

; <label>:320                                     ; preds = %map_get.exit403, %map_get.exit406
  %321 = or i8 %shadowed.5, 32
  br label %map_get.exit403.thread

map_get.exit403.thread:                           ; preds = %map_get.exit406.thread, %map_get.exit403, %map_get.exit412.thread, %294, %320
  %shadowed.6 = phi i8 [ %shadowed.5, %map_get.exit412.thread ], [ %295, %294 ], [ %321, %320 ], [ %shadowed.5, %map_get.exit403 ], [ %shadowed.5, %map_get.exit406.thread ]
  %322 = icmp eq i8 %shadowed.6, 63
  %323 = add nsw i32 %a.01096, 1
  br i1 %322, label %map_get.exit403.thread._crit_edge.loopexit, label %42

map_get.exit403.thread._crit_edge.loopexit:       ; preds = %map_get.exit403.thread, %42
  %shadowed.7.ph = phi i8 [ %shadowed.6, %42 ], [ 63, %map_get.exit403.thread ]
  br label %map_get.exit403.thread._crit_edge

map_get.exit403.thread._crit_edge:                ; preds = %map_get.exit403.thread._crit_edge.loopexit, %38
  %shadowed.7 = phi i8 [ 0, %38 ], [ %shadowed.7.ph, %map_get.exit403.thread._crit_edge.loopexit ]
  %324 = and i64 %36, 16777215
  %325 = zext i8 %shadowed.7 to i32
  %326 = shl nuw i32 %325, 24
  %327 = sext i32 %326 to i64
  %328 = or i64 %324, %327
  store i64 %328, i64* %35, align 4, !tbaa !7
  br i1 %8, label %1060, label %329

; <label>:329                                     ; preds = %map_get.exit403.thread._crit_edge
  %330 = add nsw i32 %y.01104, 1
  %331 = or i32 %330, %16
  %332 = or i32 %331, %z.01113
  %333 = icmp slt i32 %332, 0
  %334 = icmp sgt i32 %2, %330
  %or.cond.i398 = and i1 %20, %334
  %or.cond.i398.not = xor i1 %or.cond.i398, true
  %or.cond1425.not = or i1 %333, %or.cond.i398.not
  %.not1426 = xor i1 %29, true
  %brmerge = or i1 %or.cond1425.not, %.not1426
  br i1 %brmerge, label %map_get.exit400, label %335

; <label>:335                                     ; preds = %329
  %336 = mul nsw i32 %4, %330
  %337 = add nsw i32 %336, %z.01113
  %338 = mul nsw i32 %337, %5
  %339 = add nsw i32 %338, %16
  %340 = getelementptr inbounds i64* %6, i32 %339
  %341 = load i64* %340, align 4, !tbaa !7
  %extract.t = trunc i64 %341 to i32
  br label %map_get.exit400

map_get.exit400:                                  ; preds = %329, %335
  %.0.i399.off0 = phi i32 [ %extract.t, %335 ], [ -1, %329 ]
  %342 = or i32 %330, %x.01117
  %343 = or i32 %342, %24
  %344 = icmp slt i32 %343, 0
  %345 = icmp sgt i32 %2, %330
  %or.cond.i395 = and i1 %19, %345
  %or.cond.i395.not = xor i1 %or.cond.i395, true
  %or.cond1428.not = or i1 %344, %or.cond.i395.not
  %.not1429 = xor i1 %28, true
  %brmerge1430 = or i1 %or.cond1428.not, %.not1429
  br i1 %brmerge1430, label %map_get.exit397, label %346

; <label>:346                                     ; preds = %map_get.exit400
  %347 = mul nsw i32 %4, %330
  %348 = add nsw i32 %347, %24
  %349 = mul nsw i32 %348, %5
  %350 = add nsw i32 %349, %x.01117
  %351 = getelementptr inbounds i64* %6, i32 %350
  %352 = load i64* %351, align 4, !tbaa !7
  %extract.t463 = trunc i64 %352 to i32
  br label %map_get.exit397

map_get.exit397:                                  ; preds = %map_get.exit400, %346
  %.0.i396.off0 = phi i32 [ %extract.t463, %346 ], [ -1, %map_get.exit400 ]
  %353 = or i32 %331, %24
  %354 = icmp slt i32 %353, 0
  %355 = icmp sgt i32 %2, %330
  %or.cond.i392 = and i1 %20, %355
  %or.cond.i392.not = xor i1 %or.cond.i392, true
  %or.cond1432.not = or i1 %354, %or.cond.i392.not
  %.not1433 = xor i1 %28, true
  %brmerge1434 = or i1 %or.cond1432.not, %.not1433
  br i1 %brmerge1434, label %map_get.exit394, label %356

; <label>:356                                     ; preds = %map_get.exit397
  %357 = mul nsw i32 %4, %330
  %358 = add nsw i32 %357, %24
  %359 = mul nsw i32 %358, %5
  %360 = add nsw i32 %359, %16
  %361 = getelementptr inbounds i64* %6, i32 %360
  %362 = load i64* %361, align 4, !tbaa !7
  %extract.t464 = trunc i64 %362 to i32
  %phitmp = icmp ne i32 %extract.t464, -1
  br label %map_get.exit394

map_get.exit394:                                  ; preds = %map_get.exit397, %356
  %.0.i393.off0 = phi i1 [ %phitmp, %356 ], [ false, %map_get.exit397 ]
  %363 = and i32 %.0.i396.off0, %.0.i399.off0
  %364 = icmp ne i32 %363, -1
  %or.cond3.i390 = or i1 %364, %.0.i393.off0
  %365 = zext i1 %or.cond3.i390 to i64
  %..i391 = shl nuw nsw i64 %365, 32
  %366 = xor i64 %..i391, 4294967296
  %367 = or i64 %366, %328
  store i64 %367, i64* %35, align 4, !tbaa !7
  %368 = or i32 %330, %17
  %369 = or i32 %368, %z.01113
  %370 = icmp slt i32 %369, 0
  %371 = icmp sgt i32 %2, %330
  %or.cond.i387 = and i1 %18, %371
  %or.cond.i387.not = xor i1 %or.cond.i387, true
  %or.cond1436.not = or i1 %370, %or.cond.i387.not
  %.not1437 = xor i1 %29, true
  %brmerge1438 = or i1 %or.cond1436.not, %.not1437
  br i1 %brmerge1438, label %map_get.exit389, label %372

; <label>:372                                     ; preds = %map_get.exit394
  %373 = mul nsw i32 %4, %330
  %374 = add nsw i32 %373, %z.01113
  %375 = mul nsw i32 %374, %5
  %376 = add nsw i32 %375, %17
  %377 = getelementptr inbounds i64* %6, i32 %376
  %378 = load i64* %377, align 4, !tbaa !7
  %extract.t465 = trunc i64 %378 to i32
  br label %map_get.exit389

map_get.exit389:                                  ; preds = %map_get.exit394, %372
  %.0.i388.off0 = phi i32 [ %extract.t465, %372 ], [ -1, %map_get.exit394 ]
  %379 = icmp sgt i32 %2, %330
  %or.cond.i384 = and i1 %19, %379
  %or.cond.i384.not = xor i1 %or.cond.i384, true
  %or.cond1440.not = or i1 %344, %or.cond.i384.not
  %.not1441 = xor i1 %28, true
  %brmerge1442 = or i1 %or.cond1440.not, %.not1441
  br i1 %brmerge1442, label %map_get.exit386, label %380

; <label>:380                                     ; preds = %map_get.exit389
  %381 = mul nsw i32 %4, %330
  %382 = add nsw i32 %381, %24
  %383 = mul nsw i32 %382, %5
  %384 = add nsw i32 %383, %x.01117
  %385 = getelementptr inbounds i64* %6, i32 %384
  %386 = load i64* %385, align 4, !tbaa !7
  %extract.t466 = trunc i64 %386 to i32
  br label %map_get.exit386

map_get.exit386:                                  ; preds = %map_get.exit389, %380
  %.0.i385.off0 = phi i32 [ %extract.t466, %380 ], [ -1, %map_get.exit389 ]
  %387 = or i32 %368, %24
  %388 = icmp slt i32 %387, 0
  %389 = icmp sgt i32 %2, %330
  %or.cond.i381 = and i1 %18, %389
  %or.cond.i381.not = xor i1 %or.cond.i381, true
  %or.cond1444.not = or i1 %388, %or.cond.i381.not
  %.not1445 = xor i1 %28, true
  %brmerge1446 = or i1 %or.cond1444.not, %.not1445
  br i1 %brmerge1446, label %map_get.exit383, label %390

; <label>:390                                     ; preds = %map_get.exit386
  %391 = mul nsw i32 %4, %330
  %392 = add nsw i32 %391, %24
  %393 = mul nsw i32 %392, %5
  %394 = add nsw i32 %393, %17
  %395 = getelementptr inbounds i64* %6, i32 %394
  %396 = load i64* %395, align 4, !tbaa !7
  %extract.t467 = trunc i64 %396 to i32
  %phitmp468 = icmp ne i32 %extract.t467, -1
  br label %map_get.exit383

map_get.exit383:                                  ; preds = %map_get.exit386, %390
  %.0.i382.off0 = phi i1 [ %phitmp468, %390 ], [ false, %map_get.exit386 ]
  %397 = and i32 %.0.i385.off0, %.0.i388.off0
  %398 = icmp ne i32 %397, -1
  %or.cond3.i379 = or i1 %398, %.0.i382.off0
  %399 = zext i1 %or.cond3.i379 to i64
  %..i380 = shl nuw nsw i64 %399, 33
  %400 = xor i64 %..i380, 8589934592
  %401 = or i64 %400, %367
  store i64 %401, i64* %35, align 4, !tbaa !7
  %402 = icmp sgt i32 %2, %330
  %or.cond.i376 = and i1 %20, %402
  %or.cond.i376.not = xor i1 %or.cond.i376, true
  %or.cond1448.not = or i1 %333, %or.cond.i376.not
  %.not1449 = xor i1 %29, true
  %brmerge1450 = or i1 %or.cond1448.not, %.not1449
  br i1 %brmerge1450, label %map_get.exit378, label %403

; <label>:403                                     ; preds = %map_get.exit383
  %404 = mul nsw i32 %4, %330
  %405 = add nsw i32 %404, %z.01113
  %406 = mul nsw i32 %405, %5
  %407 = add nsw i32 %406, %16
  %408 = getelementptr inbounds i64* %6, i32 %407
  %409 = load i64* %408, align 4, !tbaa !7
  %extract.t469 = trunc i64 %409 to i32
  br label %map_get.exit378

map_get.exit378:                                  ; preds = %map_get.exit383, %403
  %.0.i377.off0 = phi i32 [ %extract.t469, %403 ], [ -1, %map_get.exit383 ]
  %410 = or i32 %342, %26
  %411 = icmp slt i32 %410, 0
  %412 = icmp sgt i32 %2, %330
  %or.cond.i373 = and i1 %19, %412
  %or.cond.i373.not = xor i1 %or.cond.i373, true
  %or.cond1452.not = or i1 %411, %or.cond.i373.not
  %.not1453 = xor i1 %27, true
  %brmerge1454 = or i1 %or.cond1452.not, %.not1453
  br i1 %brmerge1454, label %map_get.exit375, label %413

; <label>:413                                     ; preds = %map_get.exit378
  %414 = mul nsw i32 %4, %330
  %415 = add nsw i32 %414, %26
  %416 = mul nsw i32 %415, %5
  %417 = add nsw i32 %416, %x.01117
  %418 = getelementptr inbounds i64* %6, i32 %417
  %419 = load i64* %418, align 4, !tbaa !7
  %extract.t470 = trunc i64 %419 to i32
  br label %map_get.exit375

map_get.exit375:                                  ; preds = %map_get.exit378, %413
  %.0.i374.off0 = phi i32 [ %extract.t470, %413 ], [ -1, %map_get.exit378 ]
  %420 = or i32 %331, %26
  %421 = icmp slt i32 %420, 0
  %422 = icmp sgt i32 %2, %330
  %or.cond.i370 = and i1 %20, %422
  %or.cond.i370.not = xor i1 %or.cond.i370, true
  %or.cond1456.not = or i1 %421, %or.cond.i370.not
  %.not1457 = xor i1 %27, true
  %brmerge1458 = or i1 %or.cond1456.not, %.not1457
  br i1 %brmerge1458, label %map_get.exit372, label %423

; <label>:423                                     ; preds = %map_get.exit375
  %424 = mul nsw i32 %4, %330
  %425 = add nsw i32 %424, %26
  %426 = mul nsw i32 %425, %5
  %427 = add nsw i32 %426, %16
  %428 = getelementptr inbounds i64* %6, i32 %427
  %429 = load i64* %428, align 4, !tbaa !7
  %extract.t471 = trunc i64 %429 to i32
  %phitmp472 = icmp ne i32 %extract.t471, -1
  br label %map_get.exit372

map_get.exit372:                                  ; preds = %map_get.exit375, %423
  %.0.i371.off0 = phi i1 [ %phitmp472, %423 ], [ false, %map_get.exit375 ]
  %430 = and i32 %.0.i374.off0, %.0.i377.off0
  %431 = icmp ne i32 %430, -1
  %or.cond3.i368 = or i1 %431, %.0.i371.off0
  %432 = zext i1 %or.cond3.i368 to i64
  %..i369 = shl nuw nsw i64 %432, 34
  %433 = xor i64 %..i369, 17179869184
  %434 = or i64 %433, %401
  store i64 %434, i64* %35, align 4, !tbaa !7
  %435 = icmp sgt i32 %2, %330
  %or.cond.i365 = and i1 %18, %435
  %or.cond.i365.not = xor i1 %or.cond.i365, true
  %or.cond1460.not = or i1 %370, %or.cond.i365.not
  %.not1461 = xor i1 %29, true
  %brmerge1462 = or i1 %or.cond1460.not, %.not1461
  br i1 %brmerge1462, label %map_get.exit367, label %436

; <label>:436                                     ; preds = %map_get.exit372
  %437 = mul nsw i32 %4, %330
  %438 = add nsw i32 %437, %z.01113
  %439 = mul nsw i32 %438, %5
  %440 = add nsw i32 %439, %17
  %441 = getelementptr inbounds i64* %6, i32 %440
  %442 = load i64* %441, align 4, !tbaa !7
  %extract.t473 = trunc i64 %442 to i32
  br label %map_get.exit367

map_get.exit367:                                  ; preds = %map_get.exit372, %436
  %.0.i366.off0 = phi i32 [ %extract.t473, %436 ], [ -1, %map_get.exit372 ]
  %443 = icmp sgt i32 %2, %330
  %or.cond.i362 = and i1 %19, %443
  %or.cond.i362.not = xor i1 %or.cond.i362, true
  %or.cond1464.not = or i1 %411, %or.cond.i362.not
  %.not1465 = xor i1 %27, true
  %brmerge1466 = or i1 %or.cond1464.not, %.not1465
  br i1 %brmerge1466, label %map_get.exit364, label %444

; <label>:444                                     ; preds = %map_get.exit367
  %445 = mul nsw i32 %4, %330
  %446 = add nsw i32 %445, %26
  %447 = mul nsw i32 %446, %5
  %448 = add nsw i32 %447, %x.01117
  %449 = getelementptr inbounds i64* %6, i32 %448
  %450 = load i64* %449, align 4, !tbaa !7
  %extract.t474 = trunc i64 %450 to i32
  br label %map_get.exit364

map_get.exit364:                                  ; preds = %map_get.exit367, %444
  %.0.i363.off0 = phi i32 [ %extract.t474, %444 ], [ -1, %map_get.exit367 ]
  %451 = or i32 %368, %26
  %452 = icmp slt i32 %451, 0
  %453 = icmp sgt i32 %2, %330
  %or.cond.i359 = and i1 %18, %453
  %or.cond.i359.not = xor i1 %or.cond.i359, true
  %or.cond1468.not = or i1 %452, %or.cond.i359.not
  %.not1469 = xor i1 %27, true
  %brmerge1470 = or i1 %or.cond1468.not, %.not1469
  br i1 %brmerge1470, label %map_get.exit361, label %454

; <label>:454                                     ; preds = %map_get.exit364
  %455 = mul nsw i32 %4, %330
  %456 = add nsw i32 %455, %26
  %457 = mul nsw i32 %456, %5
  %458 = add nsw i32 %457, %17
  %459 = getelementptr inbounds i64* %6, i32 %458
  %460 = load i64* %459, align 4, !tbaa !7
  %extract.t475 = trunc i64 %460 to i32
  %phitmp476 = icmp ne i32 %extract.t475, -1
  br label %map_get.exit361

map_get.exit361:                                  ; preds = %map_get.exit364, %454
  %.0.i360.off0 = phi i1 [ %phitmp476, %454 ], [ false, %map_get.exit364 ]
  %461 = and i32 %.0.i363.off0, %.0.i366.off0
  %462 = icmp ne i32 %461, -1
  %or.cond3.i357 = or i1 %462, %.0.i360.off0
  %463 = zext i1 %or.cond3.i357 to i64
  %..i358 = shl nuw nsw i64 %463, 35
  %464 = xor i64 %..i358, 34359738368
  %465 = or i64 %464, %434
  store i64 %465, i64* %35, align 4, !tbaa !7
  %466 = add nsw i32 %y.01104, -1
  %467 = or i32 %466, %16
  %468 = or i32 %467, %z.01113
  %469 = icmp slt i32 %468, 0
  %470 = icmp sgt i32 %2, %466
  %or.cond.i354 = and i1 %20, %470
  %or.cond.i354.not = xor i1 %or.cond.i354, true
  %or.cond1472.not = or i1 %469, %or.cond.i354.not
  %.not1473 = xor i1 %29, true
  %brmerge1474 = or i1 %or.cond1472.not, %.not1473
  br i1 %brmerge1474, label %map_get.exit356, label %471

; <label>:471                                     ; preds = %map_get.exit361
  %472 = mul nsw i32 %4, %466
  %473 = add nsw i32 %472, %z.01113
  %474 = mul nsw i32 %473, %5
  %475 = add nsw i32 %474, %16
  %476 = getelementptr inbounds i64* %6, i32 %475
  %477 = load i64* %476, align 4, !tbaa !7
  %extract.t477 = trunc i64 %477 to i32
  br label %map_get.exit356

map_get.exit356:                                  ; preds = %map_get.exit361, %471
  %.0.i355.off0 = phi i32 [ %extract.t477, %471 ], [ -1, %map_get.exit361 ]
  %478 = or i32 %466, %x.01117
  %479 = or i32 %478, %24
  %480 = icmp slt i32 %479, 0
  %481 = icmp sgt i32 %2, %466
  %or.cond.i351 = and i1 %19, %481
  %or.cond.i351.not = xor i1 %or.cond.i351, true
  %or.cond1476.not = or i1 %480, %or.cond.i351.not
  %.not1477 = xor i1 %28, true
  %brmerge1478 = or i1 %or.cond1476.not, %.not1477
  br i1 %brmerge1478, label %map_get.exit353, label %482

; <label>:482                                     ; preds = %map_get.exit356
  %483 = mul nsw i32 %4, %466
  %484 = add nsw i32 %483, %24
  %485 = mul nsw i32 %484, %5
  %486 = add nsw i32 %485, %x.01117
  %487 = getelementptr inbounds i64* %6, i32 %486
  %488 = load i64* %487, align 4, !tbaa !7
  %extract.t478 = trunc i64 %488 to i32
  br label %map_get.exit353

map_get.exit353:                                  ; preds = %map_get.exit356, %482
  %.0.i352.off0 = phi i32 [ %extract.t478, %482 ], [ -1, %map_get.exit356 ]
  %489 = or i32 %467, %24
  %490 = icmp slt i32 %489, 0
  %491 = icmp sgt i32 %2, %466
  %or.cond.i348 = and i1 %20, %491
  %or.cond.i348.not = xor i1 %or.cond.i348, true
  %or.cond1480.not = or i1 %490, %or.cond.i348.not
  %.not1481 = xor i1 %28, true
  %brmerge1482 = or i1 %or.cond1480.not, %.not1481
  br i1 %brmerge1482, label %map_get.exit350, label %492

; <label>:492                                     ; preds = %map_get.exit353
  %493 = mul nsw i32 %4, %466
  %494 = add nsw i32 %493, %24
  %495 = mul nsw i32 %494, %5
  %496 = add nsw i32 %495, %16
  %497 = getelementptr inbounds i64* %6, i32 %496
  %498 = load i64* %497, align 4, !tbaa !7
  %extract.t479 = trunc i64 %498 to i32
  %phitmp480 = icmp ne i32 %extract.t479, -1
  br label %map_get.exit350

map_get.exit350:                                  ; preds = %map_get.exit353, %492
  %.0.i349.off0 = phi i1 [ %phitmp480, %492 ], [ false, %map_get.exit353 ]
  %499 = and i32 %.0.i352.off0, %.0.i355.off0
  %500 = icmp ne i32 %499, -1
  %or.cond3.i346 = or i1 %500, %.0.i349.off0
  %501 = zext i1 %or.cond3.i346 to i64
  %..i347 = shl nuw nsw i64 %501, 36
  %502 = xor i64 %..i347, 68719476736
  %503 = or i64 %502, %465
  store i64 %503, i64* %35, align 4, !tbaa !7
  %504 = or i32 %466, %17
  %505 = or i32 %504, %z.01113
  %506 = icmp slt i32 %505, 0
  %507 = icmp sgt i32 %2, %466
  %or.cond.i343 = and i1 %18, %507
  %or.cond.i343.not = xor i1 %or.cond.i343, true
  %or.cond1484.not = or i1 %506, %or.cond.i343.not
  %.not1485 = xor i1 %29, true
  %brmerge1486 = or i1 %or.cond1484.not, %.not1485
  br i1 %brmerge1486, label %map_get.exit345, label %508

; <label>:508                                     ; preds = %map_get.exit350
  %509 = mul nsw i32 %4, %466
  %510 = add nsw i32 %509, %z.01113
  %511 = mul nsw i32 %510, %5
  %512 = add nsw i32 %511, %17
  %513 = getelementptr inbounds i64* %6, i32 %512
  %514 = load i64* %513, align 4, !tbaa !7
  %extract.t481 = trunc i64 %514 to i32
  br label %map_get.exit345

map_get.exit345:                                  ; preds = %map_get.exit350, %508
  %.0.i344.off0 = phi i32 [ %extract.t481, %508 ], [ -1, %map_get.exit350 ]
  %515 = icmp sgt i32 %2, %466
  %or.cond.i340 = and i1 %19, %515
  %or.cond.i340.not = xor i1 %or.cond.i340, true
  %or.cond1488.not = or i1 %480, %or.cond.i340.not
  %.not1489 = xor i1 %28, true
  %brmerge1490 = or i1 %or.cond1488.not, %.not1489
  br i1 %brmerge1490, label %map_get.exit342, label %516

; <label>:516                                     ; preds = %map_get.exit345
  %517 = mul nsw i32 %4, %466
  %518 = add nsw i32 %517, %24
  %519 = mul nsw i32 %518, %5
  %520 = add nsw i32 %519, %x.01117
  %521 = getelementptr inbounds i64* %6, i32 %520
  %522 = load i64* %521, align 4, !tbaa !7
  %extract.t482 = trunc i64 %522 to i32
  br label %map_get.exit342

map_get.exit342:                                  ; preds = %map_get.exit345, %516
  %.0.i341.off0 = phi i32 [ %extract.t482, %516 ], [ -1, %map_get.exit345 ]
  %523 = or i32 %504, %24
  %524 = icmp slt i32 %523, 0
  %525 = icmp sgt i32 %2, %466
  %or.cond.i337 = and i1 %18, %525
  %or.cond.i337.not = xor i1 %or.cond.i337, true
  %or.cond1492.not = or i1 %524, %or.cond.i337.not
  %.not1493 = xor i1 %28, true
  %brmerge1494 = or i1 %or.cond1492.not, %.not1493
  br i1 %brmerge1494, label %map_get.exit339, label %526

; <label>:526                                     ; preds = %map_get.exit342
  %527 = mul nsw i32 %4, %466
  %528 = add nsw i32 %527, %24
  %529 = mul nsw i32 %528, %5
  %530 = add nsw i32 %529, %17
  %531 = getelementptr inbounds i64* %6, i32 %530
  %532 = load i64* %531, align 4, !tbaa !7
  %extract.t483 = trunc i64 %532 to i32
  %phitmp484 = icmp ne i32 %extract.t483, -1
  br label %map_get.exit339

map_get.exit339:                                  ; preds = %map_get.exit342, %526
  %.0.i338.off0 = phi i1 [ %phitmp484, %526 ], [ false, %map_get.exit342 ]
  %533 = and i32 %.0.i341.off0, %.0.i344.off0
  %534 = icmp ne i32 %533, -1
  %or.cond3.i335 = or i1 %534, %.0.i338.off0
  %535 = zext i1 %or.cond3.i335 to i64
  %..i336 = shl nuw nsw i64 %535, 37
  %536 = xor i64 %..i336, 137438953472
  %537 = or i64 %536, %503
  store i64 %537, i64* %35, align 4, !tbaa !7
  %538 = icmp sgt i32 %2, %466
  %or.cond.i332 = and i1 %20, %538
  %or.cond.i332.not = xor i1 %or.cond.i332, true
  %or.cond1496.not = or i1 %469, %or.cond.i332.not
  %.not1497 = xor i1 %29, true
  %brmerge1498 = or i1 %or.cond1496.not, %.not1497
  br i1 %brmerge1498, label %map_get.exit334, label %539

; <label>:539                                     ; preds = %map_get.exit339
  %540 = mul nsw i32 %4, %466
  %541 = add nsw i32 %540, %z.01113
  %542 = mul nsw i32 %541, %5
  %543 = add nsw i32 %542, %16
  %544 = getelementptr inbounds i64* %6, i32 %543
  %545 = load i64* %544, align 4, !tbaa !7
  %extract.t485 = trunc i64 %545 to i32
  br label %map_get.exit334

map_get.exit334:                                  ; preds = %map_get.exit339, %539
  %.0.i333.off0 = phi i32 [ %extract.t485, %539 ], [ -1, %map_get.exit339 ]
  %546 = or i32 %478, %26
  %547 = icmp slt i32 %546, 0
  %548 = icmp sgt i32 %2, %466
  %or.cond.i329 = and i1 %19, %548
  %or.cond.i329.not = xor i1 %or.cond.i329, true
  %or.cond1500.not = or i1 %547, %or.cond.i329.not
  %.not1501 = xor i1 %27, true
  %brmerge1502 = or i1 %or.cond1500.not, %.not1501
  br i1 %brmerge1502, label %map_get.exit331, label %549

; <label>:549                                     ; preds = %map_get.exit334
  %550 = mul nsw i32 %4, %466
  %551 = add nsw i32 %550, %26
  %552 = mul nsw i32 %551, %5
  %553 = add nsw i32 %552, %x.01117
  %554 = getelementptr inbounds i64* %6, i32 %553
  %555 = load i64* %554, align 4, !tbaa !7
  %extract.t486 = trunc i64 %555 to i32
  br label %map_get.exit331

map_get.exit331:                                  ; preds = %map_get.exit334, %549
  %.0.i330.off0 = phi i32 [ %extract.t486, %549 ], [ -1, %map_get.exit334 ]
  %556 = or i32 %467, %26
  %557 = icmp slt i32 %556, 0
  %558 = icmp sgt i32 %2, %466
  %or.cond.i326 = and i1 %20, %558
  %or.cond.i326.not = xor i1 %or.cond.i326, true
  %or.cond1504.not = or i1 %557, %or.cond.i326.not
  %.not1505 = xor i1 %27, true
  %brmerge1506 = or i1 %or.cond1504.not, %.not1505
  br i1 %brmerge1506, label %map_get.exit328, label %559

; <label>:559                                     ; preds = %map_get.exit331
  %560 = mul nsw i32 %4, %466
  %561 = add nsw i32 %560, %26
  %562 = mul nsw i32 %561, %5
  %563 = add nsw i32 %562, %16
  %564 = getelementptr inbounds i64* %6, i32 %563
  %565 = load i64* %564, align 4, !tbaa !7
  %extract.t487 = trunc i64 %565 to i32
  %phitmp488 = icmp ne i32 %extract.t487, -1
  br label %map_get.exit328

map_get.exit328:                                  ; preds = %map_get.exit331, %559
  %.0.i327.off0 = phi i1 [ %phitmp488, %559 ], [ false, %map_get.exit331 ]
  %566 = and i32 %.0.i330.off0, %.0.i333.off0
  %567 = icmp ne i32 %566, -1
  %or.cond3.i324 = or i1 %567, %.0.i327.off0
  %568 = zext i1 %or.cond3.i324 to i64
  %..i325 = shl nuw nsw i64 %568, 38
  %569 = xor i64 %..i325, 274877906944
  %570 = or i64 %569, %537
  store i64 %570, i64* %35, align 4, !tbaa !7
  %571 = icmp sgt i32 %2, %466
  %or.cond.i321 = and i1 %18, %571
  %or.cond.i321.not = xor i1 %or.cond.i321, true
  %or.cond1508.not = or i1 %506, %or.cond.i321.not
  %.not1509 = xor i1 %29, true
  %brmerge1510 = or i1 %or.cond1508.not, %.not1509
  br i1 %brmerge1510, label %map_get.exit323, label %572

; <label>:572                                     ; preds = %map_get.exit328
  %573 = mul nsw i32 %4, %466
  %574 = add nsw i32 %573, %z.01113
  %575 = mul nsw i32 %574, %5
  %576 = add nsw i32 %575, %17
  %577 = getelementptr inbounds i64* %6, i32 %576
  %578 = load i64* %577, align 4, !tbaa !7
  %extract.t489 = trunc i64 %578 to i32
  br label %map_get.exit323

map_get.exit323:                                  ; preds = %map_get.exit328, %572
  %.0.i322.off0 = phi i32 [ %extract.t489, %572 ], [ -1, %map_get.exit328 ]
  %579 = icmp sgt i32 %2, %466
  %or.cond.i318 = and i1 %19, %579
  %or.cond.i318.not = xor i1 %or.cond.i318, true
  %or.cond1512.not = or i1 %547, %or.cond.i318.not
  %.not1513 = xor i1 %27, true
  %brmerge1514 = or i1 %or.cond1512.not, %.not1513
  br i1 %brmerge1514, label %map_get.exit320, label %580

; <label>:580                                     ; preds = %map_get.exit323
  %581 = mul nsw i32 %4, %466
  %582 = add nsw i32 %581, %26
  %583 = mul nsw i32 %582, %5
  %584 = add nsw i32 %583, %x.01117
  %585 = getelementptr inbounds i64* %6, i32 %584
  %586 = load i64* %585, align 4, !tbaa !7
  %extract.t490 = trunc i64 %586 to i32
  br label %map_get.exit320

map_get.exit320:                                  ; preds = %map_get.exit323, %580
  %.0.i319.off0 = phi i32 [ %extract.t490, %580 ], [ -1, %map_get.exit323 ]
  %587 = or i32 %504, %26
  %588 = icmp slt i32 %587, 0
  %589 = icmp sgt i32 %2, %466
  %or.cond.i315 = and i1 %18, %589
  %or.cond.i315.not = xor i1 %or.cond.i315, true
  %or.cond1516.not = or i1 %588, %or.cond.i315.not
  %.not1517 = xor i1 %27, true
  %brmerge1518 = or i1 %or.cond1516.not, %.not1517
  br i1 %brmerge1518, label %map_get.exit317, label %590

; <label>:590                                     ; preds = %map_get.exit320
  %591 = mul nsw i32 %4, %466
  %592 = add nsw i32 %591, %26
  %593 = mul nsw i32 %592, %5
  %594 = add nsw i32 %593, %17
  %595 = getelementptr inbounds i64* %6, i32 %594
  %596 = load i64* %595, align 4, !tbaa !7
  %extract.t491 = trunc i64 %596 to i32
  %phitmp492 = icmp ne i32 %extract.t491, -1
  br label %map_get.exit317

map_get.exit317:                                  ; preds = %map_get.exit320, %590
  %.0.i316.off0 = phi i1 [ %phitmp492, %590 ], [ false, %map_get.exit320 ]
  %597 = and i32 %.0.i319.off0, %.0.i322.off0
  %598 = icmp ne i32 %597, -1
  %or.cond3.i313 = or i1 %598, %.0.i316.off0
  %599 = zext i1 %or.cond3.i313 to i64
  %..i314 = shl nuw nsw i64 %599, 39
  %600 = xor i64 %..i314, 549755813888
  %601 = or i64 %600, %570
  store i64 %601, i64* %35, align 4, !tbaa !7
  %602 = or i32 %y.01104, %17
  %603 = or i32 %602, %26
  %604 = icmp slt i32 %603, 0
  %605 = icmp sgt i32 %2, %y.01104
  %or.cond.i310 = and i1 %18, %605
  %or.cond.i310.not = xor i1 %or.cond.i310, true
  %or.cond1520.not = or i1 %604, %or.cond.i310.not
  %.not1521 = xor i1 %27, true
  %brmerge1522 = or i1 %or.cond1520.not, %.not1521
  br i1 %brmerge1522, label %map_get.exit312, label %606

; <label>:606                                     ; preds = %map_get.exit317
  %607 = add nsw i32 %31, %26
  %608 = mul nsw i32 %607, %5
  %609 = add nsw i32 %608, %17
  %610 = getelementptr inbounds i64* %6, i32 %609
  %611 = load i64* %610, align 4, !tbaa !7
  %extract.t493 = trunc i64 %611 to i32
  br label %map_get.exit312

map_get.exit312:                                  ; preds = %map_get.exit317, %606
  %.0.i311.off0 = phi i32 [ %extract.t493, %606 ], [ -1, %map_get.exit317 ]
  %612 = icmp sgt i32 %2, %330
  %or.cond.i307 = and i1 %18, %612
  %or.cond.i307.not = xor i1 %or.cond.i307, true
  %or.cond1524.not = or i1 %370, %or.cond.i307.not
  %.not1525 = xor i1 %29, true
  %brmerge1526 = or i1 %or.cond1524.not, %.not1525
  br i1 %brmerge1526, label %map_get.exit309, label %613

; <label>:613                                     ; preds = %map_get.exit312
  %614 = mul nsw i32 %4, %330
  %615 = add nsw i32 %614, %z.01113
  %616 = mul nsw i32 %615, %5
  %617 = add nsw i32 %616, %17
  %618 = getelementptr inbounds i64* %6, i32 %617
  %619 = load i64* %618, align 4, !tbaa !7
  %extract.t494 = trunc i64 %619 to i32
  br label %map_get.exit309

map_get.exit309:                                  ; preds = %map_get.exit312, %613
  %.0.i308.off0 = phi i32 [ %extract.t494, %613 ], [ -1, %map_get.exit312 ]
  %620 = icmp sgt i32 %2, %330
  %or.cond.i304 = and i1 %18, %620
  %or.cond.i304.not = xor i1 %or.cond.i304, true
  %or.cond1528.not = or i1 %452, %or.cond.i304.not
  %.not1529 = xor i1 %27, true
  %brmerge1530 = or i1 %or.cond1528.not, %.not1529
  br i1 %brmerge1530, label %map_get.exit306, label %621

; <label>:621                                     ; preds = %map_get.exit309
  %622 = mul nsw i32 %4, %330
  %623 = add nsw i32 %622, %26
  %624 = mul nsw i32 %623, %5
  %625 = add nsw i32 %624, %17
  %626 = getelementptr inbounds i64* %6, i32 %625
  %627 = load i64* %626, align 4, !tbaa !7
  %extract.t495 = trunc i64 %627 to i32
  %phitmp496 = icmp ne i32 %extract.t495, -1
  br label %map_get.exit306

map_get.exit306:                                  ; preds = %map_get.exit309, %621
  %.0.i305.off0 = phi i1 [ %phitmp496, %621 ], [ false, %map_get.exit309 ]
  %628 = and i32 %.0.i308.off0, %.0.i311.off0
  %629 = icmp ne i32 %628, -1
  %or.cond3.i302 = or i1 %629, %.0.i305.off0
  %630 = zext i1 %or.cond3.i302 to i64
  %..i303 = shl nuw nsw i64 %630, 40
  %631 = xor i64 %..i303, 1099511627776
  %632 = or i64 %631, %601
  store i64 %632, i64* %35, align 4, !tbaa !7
  %633 = or i32 %602, %24
  %634 = icmp slt i32 %633, 0
  %635 = icmp sgt i32 %2, %y.01104
  %or.cond.i299 = and i1 %18, %635
  %or.cond.i299.not = xor i1 %or.cond.i299, true
  %or.cond1532.not = or i1 %634, %or.cond.i299.not
  %.not1533 = xor i1 %28, true
  %brmerge1534 = or i1 %or.cond1532.not, %.not1533
  br i1 %brmerge1534, label %map_get.exit301, label %636

; <label>:636                                     ; preds = %map_get.exit306
  %637 = add nsw i32 %31, %24
  %638 = mul nsw i32 %637, %5
  %639 = add nsw i32 %638, %17
  %640 = getelementptr inbounds i64* %6, i32 %639
  %641 = load i64* %640, align 4, !tbaa !7
  %extract.t497 = trunc i64 %641 to i32
  br label %map_get.exit301

map_get.exit301:                                  ; preds = %map_get.exit306, %636
  %.0.i300.off0 = phi i32 [ %extract.t497, %636 ], [ -1, %map_get.exit306 ]
  %642 = icmp sgt i32 %2, %330
  %or.cond.i296 = and i1 %18, %642
  %or.cond.i296.not = xor i1 %or.cond.i296, true
  %or.cond1536.not = or i1 %370, %or.cond.i296.not
  %.not1537 = xor i1 %29, true
  %brmerge1538 = or i1 %or.cond1536.not, %.not1537
  br i1 %brmerge1538, label %map_get.exit298, label %643

; <label>:643                                     ; preds = %map_get.exit301
  %644 = mul nsw i32 %4, %330
  %645 = add nsw i32 %644, %z.01113
  %646 = mul nsw i32 %645, %5
  %647 = add nsw i32 %646, %17
  %648 = getelementptr inbounds i64* %6, i32 %647
  %649 = load i64* %648, align 4, !tbaa !7
  %extract.t498 = trunc i64 %649 to i32
  br label %map_get.exit298

map_get.exit298:                                  ; preds = %map_get.exit301, %643
  %.0.i297.off0 = phi i32 [ %extract.t498, %643 ], [ -1, %map_get.exit301 ]
  %650 = icmp sgt i32 %2, %330
  %or.cond.i293 = and i1 %18, %650
  %or.cond.i293.not = xor i1 %or.cond.i293, true
  %or.cond1540.not = or i1 %388, %or.cond.i293.not
  %.not1541 = xor i1 %28, true
  %brmerge1542 = or i1 %or.cond1540.not, %.not1541
  br i1 %brmerge1542, label %map_get.exit295, label %651

; <label>:651                                     ; preds = %map_get.exit298
  %652 = mul nsw i32 %4, %330
  %653 = add nsw i32 %652, %24
  %654 = mul nsw i32 %653, %5
  %655 = add nsw i32 %654, %17
  %656 = getelementptr inbounds i64* %6, i32 %655
  %657 = load i64* %656, align 4, !tbaa !7
  %extract.t499 = trunc i64 %657 to i32
  %phitmp500 = icmp ne i32 %extract.t499, -1
  br label %map_get.exit295

map_get.exit295:                                  ; preds = %map_get.exit298, %651
  %.0.i294.off0 = phi i1 [ %phitmp500, %651 ], [ false, %map_get.exit298 ]
  %658 = and i32 %.0.i297.off0, %.0.i300.off0
  %659 = icmp ne i32 %658, -1
  %or.cond3.i291 = or i1 %659, %.0.i294.off0
  %660 = zext i1 %or.cond3.i291 to i64
  %..i292 = shl nuw nsw i64 %660, 41
  %661 = xor i64 %..i292, 2199023255552
  %662 = or i64 %661, %632
  store i64 %662, i64* %35, align 4, !tbaa !7
  %663 = icmp sgt i32 %2, %y.01104
  %or.cond.i288 = and i1 %18, %663
  %or.cond.i288.not = xor i1 %or.cond.i288, true
  %or.cond1544.not = or i1 %604, %or.cond.i288.not
  %.not1545 = xor i1 %27, true
  %brmerge1546 = or i1 %or.cond1544.not, %.not1545
  br i1 %brmerge1546, label %map_get.exit290, label %664

; <label>:664                                     ; preds = %map_get.exit295
  %665 = add nsw i32 %31, %26
  %666 = mul nsw i32 %665, %5
  %667 = add nsw i32 %666, %17
  %668 = getelementptr inbounds i64* %6, i32 %667
  %669 = load i64* %668, align 4, !tbaa !7
  %extract.t501 = trunc i64 %669 to i32
  br label %map_get.exit290

map_get.exit290:                                  ; preds = %map_get.exit295, %664
  %.0.i289.off0 = phi i32 [ %extract.t501, %664 ], [ -1, %map_get.exit295 ]
  %670 = icmp sgt i32 %2, %466
  %or.cond.i285 = and i1 %18, %670
  %or.cond.i285.not = xor i1 %or.cond.i285, true
  %or.cond1548.not = or i1 %506, %or.cond.i285.not
  %.not1549 = xor i1 %29, true
  %brmerge1550 = or i1 %or.cond1548.not, %.not1549
  br i1 %brmerge1550, label %map_get.exit287, label %671

; <label>:671                                     ; preds = %map_get.exit290
  %672 = mul nsw i32 %4, %466
  %673 = add nsw i32 %672, %z.01113
  %674 = mul nsw i32 %673, %5
  %675 = add nsw i32 %674, %17
  %676 = getelementptr inbounds i64* %6, i32 %675
  %677 = load i64* %676, align 4, !tbaa !7
  %extract.t502 = trunc i64 %677 to i32
  br label %map_get.exit287

map_get.exit287:                                  ; preds = %map_get.exit290, %671
  %.0.i286.off0 = phi i32 [ %extract.t502, %671 ], [ -1, %map_get.exit290 ]
  %678 = icmp sgt i32 %2, %466
  %or.cond.i282 = and i1 %18, %678
  %or.cond.i282.not = xor i1 %or.cond.i282, true
  %or.cond1552.not = or i1 %588, %or.cond.i282.not
  %.not1553 = xor i1 %27, true
  %brmerge1554 = or i1 %or.cond1552.not, %.not1553
  br i1 %brmerge1554, label %map_get.exit284, label %679

; <label>:679                                     ; preds = %map_get.exit287
  %680 = mul nsw i32 %4, %466
  %681 = add nsw i32 %680, %26
  %682 = mul nsw i32 %681, %5
  %683 = add nsw i32 %682, %17
  %684 = getelementptr inbounds i64* %6, i32 %683
  %685 = load i64* %684, align 4, !tbaa !7
  %extract.t503 = trunc i64 %685 to i32
  %phitmp504 = icmp ne i32 %extract.t503, -1
  br label %map_get.exit284

map_get.exit284:                                  ; preds = %map_get.exit287, %679
  %.0.i283.off0 = phi i1 [ %phitmp504, %679 ], [ false, %map_get.exit287 ]
  %686 = and i32 %.0.i286.off0, %.0.i289.off0
  %687 = icmp ne i32 %686, -1
  %or.cond3.i280 = or i1 %687, %.0.i283.off0
  %688 = zext i1 %or.cond3.i280 to i64
  %..i281 = shl nuw nsw i64 %688, 42
  %689 = xor i64 %..i281, 4398046511104
  %690 = or i64 %689, %662
  store i64 %690, i64* %35, align 4, !tbaa !7
  %691 = icmp sgt i32 %2, %y.01104
  %or.cond.i277 = and i1 %18, %691
  %or.cond.i277.not = xor i1 %or.cond.i277, true
  %or.cond1556.not = or i1 %634, %or.cond.i277.not
  %.not1557 = xor i1 %28, true
  %brmerge1558 = or i1 %or.cond1556.not, %.not1557
  br i1 %brmerge1558, label %map_get.exit279, label %692

; <label>:692                                     ; preds = %map_get.exit284
  %693 = add nsw i32 %31, %24
  %694 = mul nsw i32 %693, %5
  %695 = add nsw i32 %694, %17
  %696 = getelementptr inbounds i64* %6, i32 %695
  %697 = load i64* %696, align 4, !tbaa !7
  %extract.t505 = trunc i64 %697 to i32
  br label %map_get.exit279

map_get.exit279:                                  ; preds = %map_get.exit284, %692
  %.0.i278.off0 = phi i32 [ %extract.t505, %692 ], [ -1, %map_get.exit284 ]
  %698 = icmp sgt i32 %2, %466
  %or.cond.i274 = and i1 %18, %698
  %or.cond.i274.not = xor i1 %or.cond.i274, true
  %or.cond1560.not = or i1 %506, %or.cond.i274.not
  %.not1561 = xor i1 %29, true
  %brmerge1562 = or i1 %or.cond1560.not, %.not1561
  br i1 %brmerge1562, label %map_get.exit276, label %699

; <label>:699                                     ; preds = %map_get.exit279
  %700 = mul nsw i32 %4, %466
  %701 = add nsw i32 %700, %z.01113
  %702 = mul nsw i32 %701, %5
  %703 = add nsw i32 %702, %17
  %704 = getelementptr inbounds i64* %6, i32 %703
  %705 = load i64* %704, align 4, !tbaa !7
  %extract.t506 = trunc i64 %705 to i32
  br label %map_get.exit276

map_get.exit276:                                  ; preds = %map_get.exit279, %699
  %.0.i275.off0 = phi i32 [ %extract.t506, %699 ], [ -1, %map_get.exit279 ]
  %706 = icmp sgt i32 %2, %466
  %or.cond.i271 = and i1 %18, %706
  %or.cond.i271.not = xor i1 %or.cond.i271, true
  %or.cond1564.not = or i1 %524, %or.cond.i271.not
  %.not1565 = xor i1 %28, true
  %brmerge1566 = or i1 %or.cond1564.not, %.not1565
  br i1 %brmerge1566, label %map_get.exit273, label %707

; <label>:707                                     ; preds = %map_get.exit276
  %708 = mul nsw i32 %4, %466
  %709 = add nsw i32 %708, %24
  %710 = mul nsw i32 %709, %5
  %711 = add nsw i32 %710, %17
  %712 = getelementptr inbounds i64* %6, i32 %711
  %713 = load i64* %712, align 4, !tbaa !7
  %extract.t507 = trunc i64 %713 to i32
  %phitmp508 = icmp ne i32 %extract.t507, -1
  br label %map_get.exit273

map_get.exit273:                                  ; preds = %map_get.exit276, %707
  %.0.i272.off0 = phi i1 [ %phitmp508, %707 ], [ false, %map_get.exit276 ]
  %714 = and i32 %.0.i275.off0, %.0.i278.off0
  %715 = icmp ne i32 %714, -1
  %or.cond3.i269 = or i1 %715, %.0.i272.off0
  %716 = zext i1 %or.cond3.i269 to i64
  %..i270 = shl nuw nsw i64 %716, 43
  %717 = xor i64 %..i270, 8796093022208
  %718 = or i64 %717, %690
  store i64 %718, i64* %35, align 4, !tbaa !7
  %719 = or i32 %y.01104, %16
  %720 = or i32 %719, %26
  %721 = icmp slt i32 %720, 0
  %722 = icmp sgt i32 %2, %y.01104
  %or.cond.i266 = and i1 %20, %722
  %or.cond.i266.not = xor i1 %or.cond.i266, true
  %or.cond1568.not = or i1 %721, %or.cond.i266.not
  %.not1569 = xor i1 %27, true
  %brmerge1570 = or i1 %or.cond1568.not, %.not1569
  br i1 %brmerge1570, label %map_get.exit268, label %723

; <label>:723                                     ; preds = %map_get.exit273
  %724 = add nsw i32 %31, %26
  %725 = mul nsw i32 %724, %5
  %726 = add nsw i32 %725, %16
  %727 = getelementptr inbounds i64* %6, i32 %726
  %728 = load i64* %727, align 4, !tbaa !7
  %extract.t509 = trunc i64 %728 to i32
  br label %map_get.exit268

map_get.exit268:                                  ; preds = %map_get.exit273, %723
  %.0.i267.off0 = phi i32 [ %extract.t509, %723 ], [ -1, %map_get.exit273 ]
  %729 = icmp sgt i32 %2, %330
  %or.cond.i263 = and i1 %20, %729
  %or.cond.i263.not = xor i1 %or.cond.i263, true
  %or.cond1572.not = or i1 %333, %or.cond.i263.not
  %.not1573 = xor i1 %29, true
  %brmerge1574 = or i1 %or.cond1572.not, %.not1573
  br i1 %brmerge1574, label %map_get.exit265, label %730

; <label>:730                                     ; preds = %map_get.exit268
  %731 = mul nsw i32 %4, %330
  %732 = add nsw i32 %731, %z.01113
  %733 = mul nsw i32 %732, %5
  %734 = add nsw i32 %733, %16
  %735 = getelementptr inbounds i64* %6, i32 %734
  %736 = load i64* %735, align 4, !tbaa !7
  %extract.t510 = trunc i64 %736 to i32
  br label %map_get.exit265

map_get.exit265:                                  ; preds = %map_get.exit268, %730
  %.0.i264.off0 = phi i32 [ %extract.t510, %730 ], [ -1, %map_get.exit268 ]
  %737 = icmp sgt i32 %2, %330
  %or.cond.i260 = and i1 %20, %737
  %or.cond.i260.not = xor i1 %or.cond.i260, true
  %or.cond1576.not = or i1 %421, %or.cond.i260.not
  %.not1577 = xor i1 %27, true
  %brmerge1578 = or i1 %or.cond1576.not, %.not1577
  br i1 %brmerge1578, label %map_get.exit262, label %738

; <label>:738                                     ; preds = %map_get.exit265
  %739 = mul nsw i32 %4, %330
  %740 = add nsw i32 %739, %26
  %741 = mul nsw i32 %740, %5
  %742 = add nsw i32 %741, %16
  %743 = getelementptr inbounds i64* %6, i32 %742
  %744 = load i64* %743, align 4, !tbaa !7
  %extract.t511 = trunc i64 %744 to i32
  %phitmp512 = icmp ne i32 %extract.t511, -1
  br label %map_get.exit262

map_get.exit262:                                  ; preds = %map_get.exit265, %738
  %.0.i261.off0 = phi i1 [ %phitmp512, %738 ], [ false, %map_get.exit265 ]
  %745 = and i32 %.0.i264.off0, %.0.i267.off0
  %746 = icmp ne i32 %745, -1
  %or.cond3.i258 = or i1 %746, %.0.i261.off0
  %747 = zext i1 %or.cond3.i258 to i64
  %..i259 = shl nuw nsw i64 %747, 44
  %748 = xor i64 %..i259, 17592186044416
  %749 = or i64 %748, %718
  store i64 %749, i64* %35, align 4, !tbaa !7
  %750 = or i32 %719, %24
  %751 = icmp slt i32 %750, 0
  %752 = icmp sgt i32 %2, %y.01104
  %or.cond.i255 = and i1 %20, %752
  %or.cond.i255.not = xor i1 %or.cond.i255, true
  %or.cond1580.not = or i1 %751, %or.cond.i255.not
  %.not1581 = xor i1 %28, true
  %brmerge1582 = or i1 %or.cond1580.not, %.not1581
  br i1 %brmerge1582, label %map_get.exit257, label %753

; <label>:753                                     ; preds = %map_get.exit262
  %754 = add nsw i32 %31, %24
  %755 = mul nsw i32 %754, %5
  %756 = add nsw i32 %755, %16
  %757 = getelementptr inbounds i64* %6, i32 %756
  %758 = load i64* %757, align 4, !tbaa !7
  %extract.t513 = trunc i64 %758 to i32
  br label %map_get.exit257

map_get.exit257:                                  ; preds = %map_get.exit262, %753
  %.0.i256.off0 = phi i32 [ %extract.t513, %753 ], [ -1, %map_get.exit262 ]
  %759 = icmp sgt i32 %2, %330
  %or.cond.i252 = and i1 %20, %759
  %or.cond.i252.not = xor i1 %or.cond.i252, true
  %or.cond1584.not = or i1 %333, %or.cond.i252.not
  %.not1585 = xor i1 %29, true
  %brmerge1586 = or i1 %or.cond1584.not, %.not1585
  br i1 %brmerge1586, label %map_get.exit254, label %760

; <label>:760                                     ; preds = %map_get.exit257
  %761 = mul nsw i32 %4, %330
  %762 = add nsw i32 %761, %z.01113
  %763 = mul nsw i32 %762, %5
  %764 = add nsw i32 %763, %16
  %765 = getelementptr inbounds i64* %6, i32 %764
  %766 = load i64* %765, align 4, !tbaa !7
  %extract.t514 = trunc i64 %766 to i32
  br label %map_get.exit254

map_get.exit254:                                  ; preds = %map_get.exit257, %760
  %.0.i253.off0 = phi i32 [ %extract.t514, %760 ], [ -1, %map_get.exit257 ]
  %767 = icmp sgt i32 %2, %330
  %or.cond.i249 = and i1 %20, %767
  %or.cond.i249.not = xor i1 %or.cond.i249, true
  %or.cond1588.not = or i1 %354, %or.cond.i249.not
  %.not1589 = xor i1 %28, true
  %brmerge1590 = or i1 %or.cond1588.not, %.not1589
  br i1 %brmerge1590, label %map_get.exit251, label %768

; <label>:768                                     ; preds = %map_get.exit254
  %769 = mul nsw i32 %4, %330
  %770 = add nsw i32 %769, %24
  %771 = mul nsw i32 %770, %5
  %772 = add nsw i32 %771, %16
  %773 = getelementptr inbounds i64* %6, i32 %772
  %774 = load i64* %773, align 4, !tbaa !7
  %extract.t515 = trunc i64 %774 to i32
  %phitmp516 = icmp ne i32 %extract.t515, -1
  br label %map_get.exit251

map_get.exit251:                                  ; preds = %map_get.exit254, %768
  %.0.i250.off0 = phi i1 [ %phitmp516, %768 ], [ false, %map_get.exit254 ]
  %775 = and i32 %.0.i253.off0, %.0.i256.off0
  %776 = icmp ne i32 %775, -1
  %or.cond3.i247 = or i1 %776, %.0.i250.off0
  %777 = zext i1 %or.cond3.i247 to i64
  %..i248 = shl nuw nsw i64 %777, 45
  %778 = xor i64 %..i248, 35184372088832
  %779 = or i64 %778, %749
  store i64 %779, i64* %35, align 4, !tbaa !7
  %780 = icmp sgt i32 %2, %y.01104
  %or.cond.i244 = and i1 %20, %780
  %or.cond.i244.not = xor i1 %or.cond.i244, true
  %or.cond1592.not = or i1 %721, %or.cond.i244.not
  %.not1593 = xor i1 %27, true
  %brmerge1594 = or i1 %or.cond1592.not, %.not1593
  br i1 %brmerge1594, label %map_get.exit246, label %781

; <label>:781                                     ; preds = %map_get.exit251
  %782 = add nsw i32 %31, %26
  %783 = mul nsw i32 %782, %5
  %784 = add nsw i32 %783, %16
  %785 = getelementptr inbounds i64* %6, i32 %784
  %786 = load i64* %785, align 4, !tbaa !7
  %extract.t517 = trunc i64 %786 to i32
  br label %map_get.exit246

map_get.exit246:                                  ; preds = %map_get.exit251, %781
  %.0.i245.off0 = phi i32 [ %extract.t517, %781 ], [ -1, %map_get.exit251 ]
  %787 = icmp sgt i32 %2, %466
  %or.cond.i241 = and i1 %20, %787
  %or.cond.i241.not = xor i1 %or.cond.i241, true
  %or.cond1596.not = or i1 %469, %or.cond.i241.not
  %.not1597 = xor i1 %29, true
  %brmerge1598 = or i1 %or.cond1596.not, %.not1597
  br i1 %brmerge1598, label %map_get.exit243, label %788

; <label>:788                                     ; preds = %map_get.exit246
  %789 = mul nsw i32 %4, %466
  %790 = add nsw i32 %789, %z.01113
  %791 = mul nsw i32 %790, %5
  %792 = add nsw i32 %791, %16
  %793 = getelementptr inbounds i64* %6, i32 %792
  %794 = load i64* %793, align 4, !tbaa !7
  %extract.t518 = trunc i64 %794 to i32
  br label %map_get.exit243

map_get.exit243:                                  ; preds = %map_get.exit246, %788
  %.0.i242.off0 = phi i32 [ %extract.t518, %788 ], [ -1, %map_get.exit246 ]
  %795 = icmp sgt i32 %2, %466
  %or.cond.i238 = and i1 %20, %795
  %or.cond.i238.not = xor i1 %or.cond.i238, true
  %or.cond1600.not = or i1 %557, %or.cond.i238.not
  %.not1601 = xor i1 %27, true
  %brmerge1602 = or i1 %or.cond1600.not, %.not1601
  br i1 %brmerge1602, label %map_get.exit240, label %796

; <label>:796                                     ; preds = %map_get.exit243
  %797 = mul nsw i32 %4, %466
  %798 = add nsw i32 %797, %26
  %799 = mul nsw i32 %798, %5
  %800 = add nsw i32 %799, %16
  %801 = getelementptr inbounds i64* %6, i32 %800
  %802 = load i64* %801, align 4, !tbaa !7
  %extract.t519 = trunc i64 %802 to i32
  %phitmp520 = icmp ne i32 %extract.t519, -1
  br label %map_get.exit240

map_get.exit240:                                  ; preds = %map_get.exit243, %796
  %.0.i239.off0 = phi i1 [ %phitmp520, %796 ], [ false, %map_get.exit243 ]
  %803 = and i32 %.0.i242.off0, %.0.i245.off0
  %804 = icmp ne i32 %803, -1
  %or.cond3.i236 = or i1 %804, %.0.i239.off0
  %805 = zext i1 %or.cond3.i236 to i64
  %..i237 = shl nuw nsw i64 %805, 46
  %806 = xor i64 %..i237, 70368744177664
  %807 = or i64 %806, %779
  store i64 %807, i64* %35, align 4, !tbaa !7
  %808 = icmp sgt i32 %2, %y.01104
  %or.cond.i233 = and i1 %20, %808
  %or.cond.i233.not = xor i1 %or.cond.i233, true
  %or.cond1604.not = or i1 %751, %or.cond.i233.not
  %.not1605 = xor i1 %28, true
  %brmerge1606 = or i1 %or.cond1604.not, %.not1605
  br i1 %brmerge1606, label %map_get.exit235, label %809

; <label>:809                                     ; preds = %map_get.exit240
  %810 = add nsw i32 %31, %24
  %811 = mul nsw i32 %810, %5
  %812 = add nsw i32 %811, %16
  %813 = getelementptr inbounds i64* %6, i32 %812
  %814 = load i64* %813, align 4, !tbaa !7
  %extract.t521 = trunc i64 %814 to i32
  br label %map_get.exit235

map_get.exit235:                                  ; preds = %map_get.exit240, %809
  %.0.i234.off0 = phi i32 [ %extract.t521, %809 ], [ -1, %map_get.exit240 ]
  %815 = icmp sgt i32 %2, %466
  %or.cond.i230 = and i1 %20, %815
  %or.cond.i230.not = xor i1 %or.cond.i230, true
  %or.cond1608.not = or i1 %469, %or.cond.i230.not
  %.not1609 = xor i1 %29, true
  %brmerge1610 = or i1 %or.cond1608.not, %.not1609
  br i1 %brmerge1610, label %map_get.exit232, label %816

; <label>:816                                     ; preds = %map_get.exit235
  %817 = mul nsw i32 %4, %466
  %818 = add nsw i32 %817, %z.01113
  %819 = mul nsw i32 %818, %5
  %820 = add nsw i32 %819, %16
  %821 = getelementptr inbounds i64* %6, i32 %820
  %822 = load i64* %821, align 4, !tbaa !7
  %extract.t522 = trunc i64 %822 to i32
  br label %map_get.exit232

map_get.exit232:                                  ; preds = %map_get.exit235, %816
  %.0.i231.off0 = phi i32 [ %extract.t522, %816 ], [ -1, %map_get.exit235 ]
  %823 = icmp sgt i32 %2, %466
  %or.cond.i227 = and i1 %20, %823
  %or.cond.i227.not = xor i1 %or.cond.i227, true
  %or.cond1612.not = or i1 %490, %or.cond.i227.not
  %.not1613 = xor i1 %28, true
  %brmerge1614 = or i1 %or.cond1612.not, %.not1613
  br i1 %brmerge1614, label %map_get.exit229, label %824

; <label>:824                                     ; preds = %map_get.exit232
  %825 = mul nsw i32 %4, %466
  %826 = add nsw i32 %825, %24
  %827 = mul nsw i32 %826, %5
  %828 = add nsw i32 %827, %16
  %829 = getelementptr inbounds i64* %6, i32 %828
  %830 = load i64* %829, align 4, !tbaa !7
  %extract.t523 = trunc i64 %830 to i32
  %phitmp524 = icmp ne i32 %extract.t523, -1
  br label %map_get.exit229

map_get.exit229:                                  ; preds = %map_get.exit232, %824
  %.0.i228.off0 = phi i1 [ %phitmp524, %824 ], [ false, %map_get.exit232 ]
  %831 = and i32 %.0.i231.off0, %.0.i234.off0
  %832 = icmp ne i32 %831, -1
  %or.cond3.i225 = or i1 %832, %.0.i228.off0
  %833 = zext i1 %or.cond3.i225 to i64
  %..i226 = shl nuw nsw i64 %833, 47
  %834 = xor i64 %..i226, 140737488355328
  %835 = or i64 %834, %807
  store i64 %835, i64* %35, align 4, !tbaa !7
  %836 = icmp sgt i32 %2, %y.01104
  %or.cond.i222 = and i1 %20, %836
  %or.cond.i222.not = xor i1 %or.cond.i222, true
  %or.cond1616.not = or i1 %751, %or.cond.i222.not
  %.not1617 = xor i1 %28, true
  %brmerge1618 = or i1 %or.cond1616.not, %.not1617
  br i1 %brmerge1618, label %map_get.exit224, label %837

; <label>:837                                     ; preds = %map_get.exit229
  %838 = add nsw i32 %31, %24
  %839 = mul nsw i32 %838, %5
  %840 = add nsw i32 %839, %16
  %841 = getelementptr inbounds i64* %6, i32 %840
  %842 = load i64* %841, align 4, !tbaa !7
  %extract.t525 = trunc i64 %842 to i32
  br label %map_get.exit224

map_get.exit224:                                  ; preds = %map_get.exit229, %837
  %.0.i223.off0 = phi i32 [ %extract.t525, %837 ], [ -1, %map_get.exit229 ]
  %843 = icmp sgt i32 %2, %330
  %or.cond.i219 = and i1 %19, %843
  %or.cond.i219.not = xor i1 %or.cond.i219, true
  %or.cond1620.not = or i1 %344, %or.cond.i219.not
  %.not1621 = xor i1 %28, true
  %brmerge1622 = or i1 %or.cond1620.not, %.not1621
  br i1 %brmerge1622, label %map_get.exit221, label %844

; <label>:844                                     ; preds = %map_get.exit224
  %845 = mul nsw i32 %4, %330
  %846 = add nsw i32 %845, %24
  %847 = mul nsw i32 %846, %5
  %848 = add nsw i32 %847, %x.01117
  %849 = getelementptr inbounds i64* %6, i32 %848
  %850 = load i64* %849, align 4, !tbaa !7
  %extract.t526 = trunc i64 %850 to i32
  br label %map_get.exit221

map_get.exit221:                                  ; preds = %map_get.exit224, %844
  %.0.i220.off0 = phi i32 [ %extract.t526, %844 ], [ -1, %map_get.exit224 ]
  %851 = icmp sgt i32 %2, %330
  %or.cond.i216 = and i1 %20, %851
  %or.cond.i216.not = xor i1 %or.cond.i216, true
  %or.cond1624.not = or i1 %354, %or.cond.i216.not
  %.not1625 = xor i1 %28, true
  %brmerge1626 = or i1 %or.cond1624.not, %.not1625
  br i1 %brmerge1626, label %map_get.exit218, label %852

; <label>:852                                     ; preds = %map_get.exit221
  %853 = mul nsw i32 %4, %330
  %854 = add nsw i32 %853, %24
  %855 = mul nsw i32 %854, %5
  %856 = add nsw i32 %855, %16
  %857 = getelementptr inbounds i64* %6, i32 %856
  %858 = load i64* %857, align 4, !tbaa !7
  %extract.t527 = trunc i64 %858 to i32
  %phitmp528 = icmp ne i32 %extract.t527, -1
  br label %map_get.exit218

map_get.exit218:                                  ; preds = %map_get.exit221, %852
  %.0.i217.off0 = phi i1 [ %phitmp528, %852 ], [ false, %map_get.exit221 ]
  %859 = and i32 %.0.i220.off0, %.0.i223.off0
  %860 = icmp ne i32 %859, -1
  %or.cond3.i214 = or i1 %860, %.0.i217.off0
  %861 = zext i1 %or.cond3.i214 to i64
  %..i215 = shl nuw nsw i64 %861, 48
  %862 = xor i64 %..i215, 281474976710656
  %863 = or i64 %862, %835
  store i64 %863, i64* %35, align 4, !tbaa !7
  %864 = icmp sgt i32 %2, %y.01104
  %or.cond.i211 = and i1 %18, %864
  %or.cond.i211.not = xor i1 %or.cond.i211, true
  %or.cond1628.not = or i1 %634, %or.cond.i211.not
  %.not1629 = xor i1 %28, true
  %brmerge1630 = or i1 %or.cond1628.not, %.not1629
  br i1 %brmerge1630, label %map_get.exit213, label %865

; <label>:865                                     ; preds = %map_get.exit218
  %866 = add nsw i32 %31, %24
  %867 = mul nsw i32 %866, %5
  %868 = add nsw i32 %867, %17
  %869 = getelementptr inbounds i64* %6, i32 %868
  %870 = load i64* %869, align 4, !tbaa !7
  %extract.t529 = trunc i64 %870 to i32
  br label %map_get.exit213

map_get.exit213:                                  ; preds = %map_get.exit218, %865
  %.0.i212.off0 = phi i32 [ %extract.t529, %865 ], [ -1, %map_get.exit218 ]
  %871 = icmp sgt i32 %2, %330
  %or.cond.i208 = and i1 %19, %871
  %or.cond.i208.not = xor i1 %or.cond.i208, true
  %or.cond1632.not = or i1 %344, %or.cond.i208.not
  %.not1633 = xor i1 %28, true
  %brmerge1634 = or i1 %or.cond1632.not, %.not1633
  br i1 %brmerge1634, label %map_get.exit210, label %872

; <label>:872                                     ; preds = %map_get.exit213
  %873 = mul nsw i32 %4, %330
  %874 = add nsw i32 %873, %24
  %875 = mul nsw i32 %874, %5
  %876 = add nsw i32 %875, %x.01117
  %877 = getelementptr inbounds i64* %6, i32 %876
  %878 = load i64* %877, align 4, !tbaa !7
  %extract.t530 = trunc i64 %878 to i32
  br label %map_get.exit210

map_get.exit210:                                  ; preds = %map_get.exit213, %872
  %.0.i209.off0 = phi i32 [ %extract.t530, %872 ], [ -1, %map_get.exit213 ]
  %879 = icmp sgt i32 %2, %330
  %or.cond.i205 = and i1 %18, %879
  %or.cond.i205.not = xor i1 %or.cond.i205, true
  %or.cond1636.not = or i1 %388, %or.cond.i205.not
  %.not1637 = xor i1 %28, true
  %brmerge1638 = or i1 %or.cond1636.not, %.not1637
  br i1 %brmerge1638, label %map_get.exit207, label %880

; <label>:880                                     ; preds = %map_get.exit210
  %881 = mul nsw i32 %4, %330
  %882 = add nsw i32 %881, %24
  %883 = mul nsw i32 %882, %5
  %884 = add nsw i32 %883, %17
  %885 = getelementptr inbounds i64* %6, i32 %884
  %886 = load i64* %885, align 4, !tbaa !7
  %extract.t531 = trunc i64 %886 to i32
  %phitmp532 = icmp ne i32 %extract.t531, -1
  br label %map_get.exit207

map_get.exit207:                                  ; preds = %map_get.exit210, %880
  %.0.i206.off0 = phi i1 [ %phitmp532, %880 ], [ false, %map_get.exit210 ]
  %887 = and i32 %.0.i209.off0, %.0.i212.off0
  %888 = icmp ne i32 %887, -1
  %or.cond3.i203 = or i1 %888, %.0.i206.off0
  %889 = zext i1 %or.cond3.i203 to i64
  %..i204 = shl nuw nsw i64 %889, 49
  %890 = xor i64 %..i204, 562949953421312
  %891 = or i64 %890, %863
  store i64 %891, i64* %35, align 4, !tbaa !7
  %892 = icmp sgt i32 %2, %y.01104
  %or.cond.i200 = and i1 %20, %892
  %or.cond.i200.not = xor i1 %or.cond.i200, true
  %or.cond1640.not = or i1 %751, %or.cond.i200.not
  %.not1641 = xor i1 %28, true
  %brmerge1642 = or i1 %or.cond1640.not, %.not1641
  br i1 %brmerge1642, label %map_get.exit202, label %893

; <label>:893                                     ; preds = %map_get.exit207
  %894 = add nsw i32 %31, %24
  %895 = mul nsw i32 %894, %5
  %896 = add nsw i32 %895, %16
  %897 = getelementptr inbounds i64* %6, i32 %896
  %898 = load i64* %897, align 4, !tbaa !7
  %extract.t533 = trunc i64 %898 to i32
  br label %map_get.exit202

map_get.exit202:                                  ; preds = %map_get.exit207, %893
  %.0.i201.off0 = phi i32 [ %extract.t533, %893 ], [ -1, %map_get.exit207 ]
  %899 = icmp sgt i32 %2, %466
  %or.cond.i197 = and i1 %19, %899
  %or.cond.i197.not = xor i1 %or.cond.i197, true
  %or.cond1644.not = or i1 %480, %or.cond.i197.not
  %.not1645 = xor i1 %28, true
  %brmerge1646 = or i1 %or.cond1644.not, %.not1645
  br i1 %brmerge1646, label %map_get.exit199, label %900

; <label>:900                                     ; preds = %map_get.exit202
  %901 = mul nsw i32 %4, %466
  %902 = add nsw i32 %901, %24
  %903 = mul nsw i32 %902, %5
  %904 = add nsw i32 %903, %x.01117
  %905 = getelementptr inbounds i64* %6, i32 %904
  %906 = load i64* %905, align 4, !tbaa !7
  %extract.t534 = trunc i64 %906 to i32
  br label %map_get.exit199

map_get.exit199:                                  ; preds = %map_get.exit202, %900
  %.0.i198.off0 = phi i32 [ %extract.t534, %900 ], [ -1, %map_get.exit202 ]
  %907 = icmp sgt i32 %2, %466
  %or.cond.i194 = and i1 %20, %907
  %or.cond.i194.not = xor i1 %or.cond.i194, true
  %or.cond1648.not = or i1 %490, %or.cond.i194.not
  %.not1649 = xor i1 %28, true
  %brmerge1650 = or i1 %or.cond1648.not, %.not1649
  br i1 %brmerge1650, label %map_get.exit196, label %908

; <label>:908                                     ; preds = %map_get.exit199
  %909 = mul nsw i32 %4, %466
  %910 = add nsw i32 %909, %24
  %911 = mul nsw i32 %910, %5
  %912 = add nsw i32 %911, %16
  %913 = getelementptr inbounds i64* %6, i32 %912
  %914 = load i64* %913, align 4, !tbaa !7
  %extract.t535 = trunc i64 %914 to i32
  %phitmp536 = icmp ne i32 %extract.t535, -1
  br label %map_get.exit196

map_get.exit196:                                  ; preds = %map_get.exit199, %908
  %.0.i195.off0 = phi i1 [ %phitmp536, %908 ], [ false, %map_get.exit199 ]
  %915 = and i32 %.0.i198.off0, %.0.i201.off0
  %916 = icmp ne i32 %915, -1
  %or.cond3.i192 = or i1 %916, %.0.i195.off0
  %917 = zext i1 %or.cond3.i192 to i64
  %..i193 = shl nuw nsw i64 %917, 50
  %918 = xor i64 %..i193, 1125899906842624
  %919 = or i64 %918, %891
  store i64 %919, i64* %35, align 4, !tbaa !7
  %920 = icmp sgt i32 %2, %y.01104
  %or.cond.i189 = and i1 %18, %920
  %or.cond.i189.not = xor i1 %or.cond.i189, true
  %or.cond1652.not = or i1 %634, %or.cond.i189.not
  %.not1653 = xor i1 %28, true
  %brmerge1654 = or i1 %or.cond1652.not, %.not1653
  br i1 %brmerge1654, label %map_get.exit191, label %921

; <label>:921                                     ; preds = %map_get.exit196
  %922 = add nsw i32 %31, %24
  %923 = mul nsw i32 %922, %5
  %924 = add nsw i32 %923, %17
  %925 = getelementptr inbounds i64* %6, i32 %924
  %926 = load i64* %925, align 4, !tbaa !7
  %extract.t537 = trunc i64 %926 to i32
  br label %map_get.exit191

map_get.exit191:                                  ; preds = %map_get.exit196, %921
  %.0.i190.off0 = phi i32 [ %extract.t537, %921 ], [ -1, %map_get.exit196 ]
  %927 = icmp sgt i32 %2, %466
  %or.cond.i186 = and i1 %19, %927
  %or.cond.i186.not = xor i1 %or.cond.i186, true
  %or.cond1656.not = or i1 %480, %or.cond.i186.not
  %.not1657 = xor i1 %28, true
  %brmerge1658 = or i1 %or.cond1656.not, %.not1657
  br i1 %brmerge1658, label %map_get.exit188, label %928

; <label>:928                                     ; preds = %map_get.exit191
  %929 = mul nsw i32 %4, %466
  %930 = add nsw i32 %929, %24
  %931 = mul nsw i32 %930, %5
  %932 = add nsw i32 %931, %x.01117
  %933 = getelementptr inbounds i64* %6, i32 %932
  %934 = load i64* %933, align 4, !tbaa !7
  %extract.t538 = trunc i64 %934 to i32
  br label %map_get.exit188

map_get.exit188:                                  ; preds = %map_get.exit191, %928
  %.0.i187.off0 = phi i32 [ %extract.t538, %928 ], [ -1, %map_get.exit191 ]
  %935 = icmp sgt i32 %2, %466
  %or.cond.i183 = and i1 %18, %935
  %or.cond.i183.not = xor i1 %or.cond.i183, true
  %or.cond1660.not = or i1 %524, %or.cond.i183.not
  %.not1661 = xor i1 %28, true
  %brmerge1662 = or i1 %or.cond1660.not, %.not1661
  br i1 %brmerge1662, label %map_get.exit185, label %936

; <label>:936                                     ; preds = %map_get.exit188
  %937 = mul nsw i32 %4, %466
  %938 = add nsw i32 %937, %24
  %939 = mul nsw i32 %938, %5
  %940 = add nsw i32 %939, %17
  %941 = getelementptr inbounds i64* %6, i32 %940
  %942 = load i64* %941, align 4, !tbaa !7
  %extract.t539 = trunc i64 %942 to i32
  %phitmp540 = icmp ne i32 %extract.t539, -1
  br label %map_get.exit185

map_get.exit185:                                  ; preds = %map_get.exit188, %936
  %.0.i184.off0 = phi i1 [ %phitmp540, %936 ], [ false, %map_get.exit188 ]
  %943 = and i32 %.0.i187.off0, %.0.i190.off0
  %944 = icmp ne i32 %943, -1
  %or.cond3.i181 = or i1 %944, %.0.i184.off0
  %945 = zext i1 %or.cond3.i181 to i64
  %..i182 = shl nuw nsw i64 %945, 51
  %946 = xor i64 %..i182, 2251799813685248
  %947 = or i64 %946, %919
  store i64 %947, i64* %35, align 4, !tbaa !7
  %948 = icmp sgt i32 %2, %y.01104
  %or.cond.i178 = and i1 %20, %948
  %or.cond.i178.not = xor i1 %or.cond.i178, true
  %or.cond1664.not = or i1 %721, %or.cond.i178.not
  %.not1665 = xor i1 %27, true
  %brmerge1666 = or i1 %or.cond1664.not, %.not1665
  br i1 %brmerge1666, label %map_get.exit180, label %949

; <label>:949                                     ; preds = %map_get.exit185
  %950 = add nsw i32 %31, %26
  %951 = mul nsw i32 %950, %5
  %952 = add nsw i32 %951, %16
  %953 = getelementptr inbounds i64* %6, i32 %952
  %954 = load i64* %953, align 4, !tbaa !7
  %extract.t541 = trunc i64 %954 to i32
  br label %map_get.exit180

map_get.exit180:                                  ; preds = %map_get.exit185, %949
  %.0.i179.off0 = phi i32 [ %extract.t541, %949 ], [ -1, %map_get.exit185 ]
  %955 = icmp sgt i32 %2, %330
  %or.cond.i175 = and i1 %19, %955
  %or.cond.i175.not = xor i1 %or.cond.i175, true
  %or.cond1668.not = or i1 %411, %or.cond.i175.not
  %.not1669 = xor i1 %27, true
  %brmerge1670 = or i1 %or.cond1668.not, %.not1669
  br i1 %brmerge1670, label %map_get.exit177, label %956

; <label>:956                                     ; preds = %map_get.exit180
  %957 = mul nsw i32 %4, %330
  %958 = add nsw i32 %957, %26
  %959 = mul nsw i32 %958, %5
  %960 = add nsw i32 %959, %x.01117
  %961 = getelementptr inbounds i64* %6, i32 %960
  %962 = load i64* %961, align 4, !tbaa !7
  %extract.t542 = trunc i64 %962 to i32
  br label %map_get.exit177

map_get.exit177:                                  ; preds = %map_get.exit180, %956
  %.0.i176.off0 = phi i32 [ %extract.t542, %956 ], [ -1, %map_get.exit180 ]
  %963 = icmp sgt i32 %2, %330
  %or.cond.i172 = and i1 %20, %963
  %or.cond.i172.not = xor i1 %or.cond.i172, true
  %or.cond1672.not = or i1 %421, %or.cond.i172.not
  %.not1673 = xor i1 %27, true
  %brmerge1674 = or i1 %or.cond1672.not, %.not1673
  br i1 %brmerge1674, label %map_get.exit174, label %964

; <label>:964                                     ; preds = %map_get.exit177
  %965 = mul nsw i32 %4, %330
  %966 = add nsw i32 %965, %26
  %967 = mul nsw i32 %966, %5
  %968 = add nsw i32 %967, %16
  %969 = getelementptr inbounds i64* %6, i32 %968
  %970 = load i64* %969, align 4, !tbaa !7
  %extract.t543 = trunc i64 %970 to i32
  %phitmp544 = icmp ne i32 %extract.t543, -1
  br label %map_get.exit174

map_get.exit174:                                  ; preds = %map_get.exit177, %964
  %.0.i173.off0 = phi i1 [ %phitmp544, %964 ], [ false, %map_get.exit177 ]
  %971 = and i32 %.0.i176.off0, %.0.i179.off0
  %972 = icmp ne i32 %971, -1
  %or.cond3.i170 = or i1 %972, %.0.i173.off0
  %973 = zext i1 %or.cond3.i170 to i64
  %..i171 = shl nuw nsw i64 %973, 52
  %974 = xor i64 %..i171, 4503599627370496
  %975 = or i64 %974, %947
  store i64 %975, i64* %35, align 4, !tbaa !7
  %976 = icmp sgt i32 %2, %y.01104
  %or.cond.i167 = and i1 %18, %976
  %or.cond.i167.not = xor i1 %or.cond.i167, true
  %or.cond1676.not = or i1 %604, %or.cond.i167.not
  %.not1677 = xor i1 %27, true
  %brmerge1678 = or i1 %or.cond1676.not, %.not1677
  br i1 %brmerge1678, label %map_get.exit169, label %977

; <label>:977                                     ; preds = %map_get.exit174
  %978 = add nsw i32 %31, %26
  %979 = mul nsw i32 %978, %5
  %980 = add nsw i32 %979, %17
  %981 = getelementptr inbounds i64* %6, i32 %980
  %982 = load i64* %981, align 4, !tbaa !7
  %extract.t545 = trunc i64 %982 to i32
  br label %map_get.exit169

map_get.exit169:                                  ; preds = %map_get.exit174, %977
  %.0.i168.off0 = phi i32 [ %extract.t545, %977 ], [ -1, %map_get.exit174 ]
  %983 = icmp sgt i32 %2, %330
  %or.cond.i164 = and i1 %19, %983
  %or.cond.i164.not = xor i1 %or.cond.i164, true
  %or.cond1680.not = or i1 %411, %or.cond.i164.not
  %.not1681 = xor i1 %27, true
  %brmerge1682 = or i1 %or.cond1680.not, %.not1681
  br i1 %brmerge1682, label %map_get.exit166, label %984

; <label>:984                                     ; preds = %map_get.exit169
  %985 = mul nsw i32 %4, %330
  %986 = add nsw i32 %985, %26
  %987 = mul nsw i32 %986, %5
  %988 = add nsw i32 %987, %x.01117
  %989 = getelementptr inbounds i64* %6, i32 %988
  %990 = load i64* %989, align 4, !tbaa !7
  %extract.t546 = trunc i64 %990 to i32
  br label %map_get.exit166

map_get.exit166:                                  ; preds = %map_get.exit169, %984
  %.0.i165.off0 = phi i32 [ %extract.t546, %984 ], [ -1, %map_get.exit169 ]
  %991 = icmp sgt i32 %2, %330
  %or.cond.i161 = and i1 %18, %991
  %or.cond.i161.not = xor i1 %or.cond.i161, true
  %or.cond1684.not = or i1 %452, %or.cond.i161.not
  %.not1685 = xor i1 %27, true
  %brmerge1686 = or i1 %or.cond1684.not, %.not1685
  br i1 %brmerge1686, label %map_get.exit163, label %992

; <label>:992                                     ; preds = %map_get.exit166
  %993 = mul nsw i32 %4, %330
  %994 = add nsw i32 %993, %26
  %995 = mul nsw i32 %994, %5
  %996 = add nsw i32 %995, %17
  %997 = getelementptr inbounds i64* %6, i32 %996
  %998 = load i64* %997, align 4, !tbaa !7
  %extract.t547 = trunc i64 %998 to i32
  %phitmp548 = icmp ne i32 %extract.t547, -1
  br label %map_get.exit163

map_get.exit163:                                  ; preds = %map_get.exit166, %992
  %.0.i162.off0 = phi i1 [ %phitmp548, %992 ], [ false, %map_get.exit166 ]
  %999 = and i32 %.0.i165.off0, %.0.i168.off0
  %1000 = icmp ne i32 %999, -1
  %or.cond3.i159 = or i1 %1000, %.0.i162.off0
  %1001 = zext i1 %or.cond3.i159 to i64
  %..i160 = shl nuw nsw i64 %1001, 53
  %1002 = xor i64 %..i160, 9007199254740992
  %1003 = or i64 %1002, %975
  store i64 %1003, i64* %35, align 4, !tbaa !7
  %1004 = icmp sgt i32 %2, %y.01104
  %or.cond.i156 = and i1 %20, %1004
  %or.cond.i156.not = xor i1 %or.cond.i156, true
  %or.cond1688.not = or i1 %721, %or.cond.i156.not
  %.not1689 = xor i1 %27, true
  %brmerge1690 = or i1 %or.cond1688.not, %.not1689
  br i1 %brmerge1690, label %map_get.exit158, label %1005

; <label>:1005                                    ; preds = %map_get.exit163
  %1006 = add nsw i32 %31, %26
  %1007 = mul nsw i32 %1006, %5
  %1008 = add nsw i32 %1007, %16
  %1009 = getelementptr inbounds i64* %6, i32 %1008
  %1010 = load i64* %1009, align 4, !tbaa !7
  %extract.t549 = trunc i64 %1010 to i32
  br label %map_get.exit158

map_get.exit158:                                  ; preds = %map_get.exit163, %1005
  %.0.i157.off0 = phi i32 [ %extract.t549, %1005 ], [ -1, %map_get.exit163 ]
  %1011 = icmp sgt i32 %2, %466
  %or.cond.i153 = and i1 %19, %1011
  %or.cond.i153.not = xor i1 %or.cond.i153, true
  %or.cond1692.not = or i1 %547, %or.cond.i153.not
  %.not1693 = xor i1 %27, true
  %brmerge1694 = or i1 %or.cond1692.not, %.not1693
  br i1 %brmerge1694, label %map_get.exit155, label %1012

; <label>:1012                                    ; preds = %map_get.exit158
  %1013 = mul nsw i32 %4, %466
  %1014 = add nsw i32 %1013, %26
  %1015 = mul nsw i32 %1014, %5
  %1016 = add nsw i32 %1015, %x.01117
  %1017 = getelementptr inbounds i64* %6, i32 %1016
  %1018 = load i64* %1017, align 4, !tbaa !7
  %extract.t550 = trunc i64 %1018 to i32
  br label %map_get.exit155

map_get.exit155:                                  ; preds = %map_get.exit158, %1012
  %.0.i154.off0 = phi i32 [ %extract.t550, %1012 ], [ -1, %map_get.exit158 ]
  %1019 = icmp sgt i32 %2, %466
  %or.cond.i150 = and i1 %20, %1019
  %or.cond.i150.not = xor i1 %or.cond.i150, true
  %or.cond1696.not = or i1 %557, %or.cond.i150.not
  %.not1697 = xor i1 %27, true
  %brmerge1698 = or i1 %or.cond1696.not, %.not1697
  br i1 %brmerge1698, label %map_get.exit152, label %1020

; <label>:1020                                    ; preds = %map_get.exit155
  %1021 = mul nsw i32 %4, %466
  %1022 = add nsw i32 %1021, %26
  %1023 = mul nsw i32 %1022, %5
  %1024 = add nsw i32 %1023, %16
  %1025 = getelementptr inbounds i64* %6, i32 %1024
  %1026 = load i64* %1025, align 4, !tbaa !7
  %extract.t551 = trunc i64 %1026 to i32
  %phitmp552 = icmp ne i32 %extract.t551, -1
  br label %map_get.exit152

map_get.exit152:                                  ; preds = %map_get.exit155, %1020
  %.0.i151.off0 = phi i1 [ %phitmp552, %1020 ], [ false, %map_get.exit155 ]
  %1027 = and i32 %.0.i154.off0, %.0.i157.off0
  %1028 = icmp ne i32 %1027, -1
  %or.cond3.i148 = or i1 %1028, %.0.i151.off0
  %1029 = zext i1 %or.cond3.i148 to i64
  %..i149 = shl nuw nsw i64 %1029, 54
  %1030 = xor i64 %..i149, 18014398509481984
  %1031 = or i64 %1030, %1003
  store i64 %1031, i64* %35, align 4, !tbaa !7
  %1032 = icmp sgt i32 %2, %y.01104
  %or.cond.i145 = and i1 %18, %1032
  %or.cond.i145.not = xor i1 %or.cond.i145, true
  %or.cond1700.not = or i1 %604, %or.cond.i145.not
  %.not1701 = xor i1 %27, true
  %brmerge1702 = or i1 %or.cond1700.not, %.not1701
  br i1 %brmerge1702, label %map_get.exit147, label %1033

; <label>:1033                                    ; preds = %map_get.exit152
  %1034 = add nsw i32 %31, %26
  %1035 = mul nsw i32 %1034, %5
  %1036 = add nsw i32 %1035, %17
  %1037 = getelementptr inbounds i64* %6, i32 %1036
  %1038 = load i64* %1037, align 4, !tbaa !7
  %extract.t553 = trunc i64 %1038 to i32
  br label %map_get.exit147

map_get.exit147:                                  ; preds = %map_get.exit152, %1033
  %.0.i146.off0 = phi i32 [ %extract.t553, %1033 ], [ -1, %map_get.exit152 ]
  %1039 = icmp sgt i32 %2, %466
  %or.cond.i142 = and i1 %19, %1039
  %or.cond.i142.not = xor i1 %or.cond.i142, true
  %or.cond1704.not = or i1 %547, %or.cond.i142.not
  %.not1705 = xor i1 %27, true
  %brmerge1706 = or i1 %or.cond1704.not, %.not1705
  br i1 %brmerge1706, label %map_get.exit144, label %1040

; <label>:1040                                    ; preds = %map_get.exit147
  %1041 = mul nsw i32 %4, %466
  %1042 = add nsw i32 %1041, %26
  %1043 = mul nsw i32 %1042, %5
  %1044 = add nsw i32 %1043, %x.01117
  %1045 = getelementptr inbounds i64* %6, i32 %1044
  %1046 = load i64* %1045, align 4, !tbaa !7
  %extract.t554 = trunc i64 %1046 to i32
  br label %map_get.exit144

map_get.exit144:                                  ; preds = %map_get.exit147, %1040
  %.0.i143.off0 = phi i32 [ %extract.t554, %1040 ], [ -1, %map_get.exit147 ]
  %1047 = icmp sgt i32 %2, %466
  %or.cond.i139 = and i1 %18, %1047
  %or.cond.i139.not = xor i1 %or.cond.i139, true
  %or.cond1708.not = or i1 %588, %or.cond.i139.not
  %.not1709 = xor i1 %27, true
  %brmerge1710 = or i1 %or.cond1708.not, %.not1709
  br i1 %brmerge1710, label %map_get.exit141, label %1048

; <label>:1048                                    ; preds = %map_get.exit144
  %1049 = mul nsw i32 %4, %466
  %1050 = add nsw i32 %1049, %26
  %1051 = mul nsw i32 %1050, %5
  %1052 = add nsw i32 %1051, %17
  %1053 = getelementptr inbounds i64* %6, i32 %1052
  %1054 = load i64* %1053, align 4, !tbaa !7
  %extract.t555 = trunc i64 %1054 to i32
  %phitmp556 = icmp ne i32 %extract.t555, -1
  br label %map_get.exit141

map_get.exit141:                                  ; preds = %map_get.exit144, %1048
  %.0.i140.off0 = phi i1 [ %phitmp556, %1048 ], [ false, %map_get.exit144 ]
  %1055 = and i32 %.0.i143.off0, %.0.i146.off0
  %1056 = icmp ne i32 %1055, -1
  %or.cond3.i = or i1 %1056, %.0.i140.off0
  %1057 = zext i1 %or.cond3.i to i64
  %..i = shl nuw nsw i64 %1057, 55
  %1058 = xor i64 %..i, 36028797018963968
  %1059 = or i64 %1058, %1031
  br label %1062

; <label>:1060                                    ; preds = %map_get.exit403.thread._crit_edge
  %1061 = or i64 %328, -4294967296
  br label %1062

; <label>:1062                                    ; preds = %1060, %map_get.exit141
  %storemerge = phi i64 [ %1059, %map_get.exit141 ], [ %1061, %1060 ]
  store i64 %storemerge, i64* %35, align 4, !tbaa !7
  %1063 = icmp eq i32 %y.01104, %9
  br i1 %1063, label %1073, label %1064

; <label>:1064                                    ; preds = %1062
  %1065 = add nsw i32 %y.01104, 1
  %1066 = mul nsw i32 %4, %1065
  %1067 = add nsw i32 %1066, %z.01113
  %1068 = mul nsw i32 %1067, %5
  %1069 = add nsw i32 %1068, %x.01117
  %1070 = getelementptr inbounds i64* %6, i32 %1069
  %1071 = load i64* %1070, align 4, !tbaa !7
  %1072 = icmp eq i64 %1071, 4294967295
  br i1 %1072, label %1073, label %1075

; <label>:1073                                    ; preds = %1064, %1062
  %1074 = add nsw i32 %size.21108, 1
  br label %1075

; <label>:1075                                    ; preds = %1073, %1064
  %size.3 = phi i32 [ %1074, %1073 ], [ %size.21108, %1064 ]
  %1076 = icmp sgt i32 %y.01104, 0
  br i1 %1076, label %1077, label %1087

; <label>:1077                                    ; preds = %1075
  %1078 = add nsw i32 %y.01104, -1
  %1079 = mul nsw i32 %4, %1078
  %1080 = add nsw i32 %1079, %z.01113
  %1081 = mul nsw i32 %1080, %5
  %1082 = add nsw i32 %1081, %x.01117
  %1083 = getelementptr inbounds i64* %6, i32 %1082
  %1084 = load i64* %1083, align 4, !tbaa !7
  %1085 = icmp eq i64 %1084, 4294967295
  %1086 = zext i1 %1085 to i32
  %.size.3 = add nsw i32 %1086, %size.3
  br label %1087

; <label>:1087                                    ; preds = %1077, %1075
  %size.4 = phi i32 [ %size.3, %1075 ], [ %.size.3, %1077 ]
  br i1 %12, label %1088, label %1093

; <label>:1088                                    ; preds = %1087
  %1089 = add nsw i32 %10, %33
  %1090 = getelementptr inbounds i64* %6, i32 %1089
  %1091 = load i64* %1090, align 4, !tbaa !7
  %1092 = icmp eq i64 %1091, 4294967295
  br i1 %1092, label %1099, label %.thread

; <label>:1093                                    ; preds = %1087
  br i1 %15, label %1094, label %.thread

; <label>:1094                                    ; preds = %1093
  %1095 = add nsw i32 %34, -1
  %1096 = getelementptr inbounds i64* %6, i32 %1095
  %1097 = load i64* %1096, align 4, !tbaa !7
  %1098 = icmp eq i64 %1097, 4294967295
  br i1 %1098, label %1099, label %.thread

; <label>:1099                                    ; preds = %1094, %1088
  %1100 = add nsw i32 %size.4, 1
  br label %.thread

.thread:                                          ; preds = %1088, %1099, %1094, %1093
  %size.5 = phi i32 [ %1100, %1099 ], [ %size.4, %1094 ], [ %size.4, %1093 ], [ %size.4, %1088 ]
  br i1 %13, label %1101, label %1105

; <label>:1101                                    ; preds = %.thread
  %1102 = getelementptr inbounds i64* %6, i32 %33
  %1103 = load i64* %1102, align 4, !tbaa !7
  %1104 = icmp eq i64 %1103, 4294967295
  br i1 %1104, label %1111, label %1105

; <label>:1105                                    ; preds = %1101, %.thread
  br i1 %14, label %1106, label %1113

; <label>:1106                                    ; preds = %1105
  %1107 = add nsw i32 %34, 1
  %1108 = getelementptr inbounds i64* %6, i32 %1107
  %1109 = load i64* %1108, align 4, !tbaa !7
  %1110 = icmp eq i64 %1109, 4294967295
  br i1 %1110, label %1111, label %1113

; <label>:1111                                    ; preds = %1106, %1101
  %1112 = add nsw i32 %size.5, 1
  br label %1113

; <label>:1113                                    ; preds = %1111, %1106, %1105
  %size.6 = phi i32 [ %1112, %1111 ], [ %size.5, %1106 ], [ %size.5, %1105 ]
  br i1 %21, label %1114, label %1121

; <label>:1114                                    ; preds = %1113
  %1115 = add i32 %11, %31
  %1116 = mul nsw i32 %1115, %5
  %1117 = add nsw i32 %1116, %x.01117
  %1118 = getelementptr inbounds i64* %6, i32 %1117
  %1119 = load i64* %1118, align 4, !tbaa !7
  %1120 = icmp eq i64 %1119, 4294967295
  br i1 %1120, label %1129, label %.thread452

; <label>:1121                                    ; preds = %1113
  br i1 %25, label %1122, label %.thread452

; <label>:1122                                    ; preds = %1121
  %1123 = add i32 %26, %31
  %1124 = mul nsw i32 %1123, %5
  %1125 = add nsw i32 %1124, %x.01117
  %1126 = getelementptr inbounds i64* %6, i32 %1125
  %1127 = load i64* %1126, align 4, !tbaa !7
  %1128 = icmp eq i64 %1127, 4294967295
  br i1 %1128, label %1129, label %.thread452

; <label>:1129                                    ; preds = %1122, %1114
  %1130 = add nsw i32 %size.6, 1
  br label %.thread452

.thread452:                                       ; preds = %1114, %1129, %1122, %1121
  %size.7 = phi i32 [ %1130, %1129 ], [ %size.6, %1122 ], [ %size.6, %1121 ], [ %size.6, %1114 ]
  br i1 %22, label %1131, label %1137

; <label>:1131                                    ; preds = %.thread452
  %1132 = mul nsw i32 %31, %5
  %1133 = add nsw i32 %1132, %x.01117
  %1134 = getelementptr inbounds i64* %6, i32 %1133
  %1135 = load i64* %1134, align 4, !tbaa !7
  %1136 = icmp eq i64 %1135, 4294967295
  br i1 %1136, label %1145, label %1137

; <label>:1137                                    ; preds = %1131, %.thread452
  br i1 %23, label %1138, label %1147

; <label>:1138                                    ; preds = %1137
  %1139 = add i32 %24, %31
  %1140 = mul nsw i32 %5, %1139
  %1141 = add nsw i32 %1140, %x.01117
  %1142 = getelementptr inbounds i64* %6, i32 %1141
  %1143 = load i64* %1142, align 4, !tbaa !7
  %1144 = icmp eq i64 %1143, 4294967295
  br i1 %1144, label %1145, label %1147

; <label>:1145                                    ; preds = %1138, %1131
  %1146 = add nsw i32 %size.7, 1
  br label %1147

; <label>:1147                                    ; preds = %30, %1145, %1138, %1137
  %max_height.4 = phi i32 [ %y.0.max_height.2, %1145 ], [ %y.0.max_height.2, %1138 ], [ %y.0.max_height.2, %1137 ], [ %max_height.21107, %30 ]
  %size.8 = phi i32 [ %1146, %1145 ], [ %size.7, %1138 ], [ %size.7, %1137 ], [ %size.21108, %30 ]
  %1148 = add nsw i32 %y.01104, 1
  %exitcond1348 = icmp eq i32 %1148, %2
  br i1 %exitcond1348, label %._crit_edge1110.loopexit, label %30

._crit_edge1110.loopexit:                         ; preds = %1147
  %size.8.lcssa = phi i32 [ %size.8, %1147 ]
  %max_height.4.lcssa = phi i32 [ %max_height.4, %1147 ]
  br label %._crit_edge1110

._crit_edge1110:                                  ; preds = %._crit_edge1110.loopexit, %.preheader606._crit_edge
  %.pre-phi = phi i32 [ %.pre, %.preheader606._crit_edge ], [ %24, %._crit_edge1110.loopexit ]
  %size.2.lcssa = phi i32 [ %size.11116, %.preheader606._crit_edge ], [ %size.8.lcssa, %._crit_edge1110.loopexit ]
  %max_height.2.lcssa = phi i32 [ %max_height.11115, %.preheader606._crit_edge ], [ %max_height.4.lcssa, %._crit_edge1110.loopexit ]
  %1149 = add nsw i32 %chunk_y, 15
  %1150 = icmp slt i32 %z.01113, %1149
  br i1 %1150, label %.preheader606, label %1151

; <label>:1151                                    ; preds = %._crit_edge1110
  %max_height.2.lcssa.lcssa = phi i32 [ %max_height.2.lcssa, %._crit_edge1110 ]
  %size.2.lcssa.lcssa = phi i32 [ %size.2.lcssa, %._crit_edge1110 ]
  %1152 = icmp slt i32 %17, %1
  br i1 %1152, label %.preheader607, label %1153

; <label>:1153                                    ; preds = %1151
  %size.2.lcssa.lcssa.lcssa = phi i32 [ %size.2.lcssa.lcssa, %1151 ]
  %max_height.2.lcssa.lcssa.lcssa = phi i32 [ %max_height.2.lcssa.lcssa, %1151 ]
  %1154 = mul nsw i32 %size.2.lcssa.lcssa.lcssa, 24
  %1155 = tail call noalias i8* @malloc(i32 %1154) #4
  %1156 = bitcast i8* %1155 to i16*
  %1157 = mul nsw i32 %size.2.lcssa.lcssa.lcssa, 12
  %1158 = tail call noalias i8* @malloc(i32 %1157) #4
  %1159 = tail call noalias i8* @malloc(i32 %size.2.lcssa.lcssa.lcssa) #4
  %1160 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start(i64 512, i8* %1160) #4
  %1161 = shl nsw i32 %2, 4
  %1162 = shl i32 %2, 5
  %1163 = alloca i8, i32 %1162, align 1
  %1164 = add nsw i32 %chunk_y, 16
  %1165 = shl i32 %2, 4
  %1166 = shl i32 %2, 4
  %1167 = icmp sgt i32 %1166, 1
  %smax = select i1 %1167, i32 %1166, i32 1
  %1168 = icmp sgt i32 %1166, 1
  %smax1769 = select i1 %1168, i32 %1166, i32 1
  %1169 = add i32 %smax1769, -1
  %scevgep1770 = getelementptr i8* %1163, i32 %1169
  %scevgep1771 = getelementptr i8* %1163, i32 %1166
  %1170 = add i32 %smax1769, %1166
  %1171 = add i32 %1170, -1
  %scevgep1772 = getelementptr i8* %1163, i32 %1171
  br label %.preheader605

.preheader605:                                    ; preds = %1153, %2175
  %chunk_vertex_index.01095 = phi i32 [ 0, %1153 ], [ %chunk_vertex_index.2.lcssa.lcssa, %2175 ]
  %chunk_color_index.01094 = phi i32 [ 0, %1153 ], [ %chunk_color_index.2.lcssa.lcssa, %2175 ]
  %chunk_shadow_index.01093 = phi i32 [ 0, %1153 ], [ %chunk_shadow_index.2.lcssa.lcssa, %2175 ]
  %z1.01092 = phi i32 [ %chunk_y, %1153 ], [ %1203, %2175 ]
  br i1 %3, label %.lr.ph933.preheader, label %.preheader604

.lr.ph933.preheader:                              ; preds = %.preheader605
  %backedge.overflow = icmp eq i32 %smax, 0
  br i1 %backedge.overflow, label %.lr.ph933.preheader1840, label %overflow.checked

.lr.ph933.preheader1840:                          ; preds = %middle.block, %.lr.ph933.preheader
  %k.0932.ph = phi i32 [ 0, %.lr.ph933.preheader ], [ %resume.val, %middle.block ]
  br label %.lr.ph933

overflow.checked:                                 ; preds = %.lr.ph933.preheader
  %n.vec = and i32 %smax, -32
  %cmp.zero = icmp eq i32 %n.vec, 0
  br i1 %cmp.zero, label %middle.block, label %vector.memcheck

vector.memcheck:                                  ; preds = %overflow.checked
  %bound0 = icmp ule i8* %1163, %scevgep1772
  %bound1 = icmp ule i8* %scevgep1771, %scevgep1770
  %memcheck.conflict = and i1 %bound0, %bound1
  br i1 %memcheck.conflict, label %middle.block, label %vector.body.preheader

vector.body.preheader:                            ; preds = %vector.memcheck
  br label %vector.body

vector.body:                                      ; preds = %vector.body.preheader, %vector.body
  %index = phi i32 [ %index.next, %vector.body ], [ 0, %vector.body.preheader ]
  %1172 = getelementptr inbounds i8* %1163, i32 %index
  %1173 = bitcast i8* %1172 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %1173, align 1, !tbaa !9
  %.sum18331834 = or i32 %index, 16
  %1174 = getelementptr i8* %1163, i32 %.sum18331834
  %1175 = bitcast i8* %1174 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %1175, align 1, !tbaa !9
  %1176 = add i32 %index, %1161
  %1177 = getelementptr inbounds i8* %1163, i32 %1176
  %1178 = bitcast i8* %1177 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %1178, align 1, !tbaa !9
  %.sum1835 = add i32 %1176, 16
  %1179 = getelementptr i8* %1163, i32 %.sum1835
  %1180 = bitcast i8* %1179 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %1180, align 1, !tbaa !9
  %index.next = add i32 %index, 32
  %1181 = icmp eq i32 %index.next, %n.vec
  br i1 %1181, label %middle.block.loopexit, label %vector.body, !llvm.loop !15

middle.block.loopexit:                            ; preds = %vector.body
  br label %middle.block

middle.block:                                     ; preds = %middle.block.loopexit, %vector.memcheck, %overflow.checked
  %resume.val = phi i32 [ 0, %overflow.checked ], [ 0, %vector.memcheck ], [ %n.vec, %middle.block.loopexit ]
  %cmp.n = icmp eq i32 %smax, %resume.val
  br i1 %cmp.n, label %.preheader604, label %.lr.ph933.preheader1840

.preheader590:                                    ; preds = %2175
  %chunk_vertex_index.2.lcssa.lcssa.lcssa = phi i32 [ %chunk_vertex_index.2.lcssa.lcssa, %2175 ]
  %chunk_color_index.2.lcssa.lcssa.lcssa = phi i32 [ %chunk_color_index.2.lcssa.lcssa, %2175 ]
  %chunk_shadow_index.2.lcssa.lcssa.lcssa = phi i32 [ %chunk_shadow_index.2.lcssa.lcssa, %2175 ]
  %1182 = add nsw i32 %max_height.2.lcssa.lcssa.lcssa, 1
  %1183 = load i32* @map_size_y, align 4, !tbaa !1
  %1184 = icmp sgt i32 %1183, 0
  %1185 = load i32* @map_size_z, align 4, !tbaa !1
  %1186 = load i32* @map_size_x, align 4, !tbaa !1
  %1187 = load i64** @map_colors, align 4, !tbaa !5
  %1188 = add nsw i32 %1186, -1
  %1189 = shl nsw i32 %1183, 4
  %1190 = shl i32 %1183, 4
  %1191 = icmp sgt i32 %1190, 1
  %smax1776 = select i1 %1191, i32 %1190, i32 1
  %1192 = icmp sgt i32 %1190, 1
  %smax1790 = select i1 %1192, i32 %1190, i32 1
  %1193 = add i32 %smax1790, -1
  %scevgep1791 = getelementptr i8* %1163, i32 %1193
  %1194 = shl i32 %2, 4
  %scevgep1792 = getelementptr i8* %1163, i32 %1194
  %1195 = add i32 %smax1790, %1194
  %1196 = add i32 %1195, -1
  %scevgep1793 = getelementptr i8* %1163, i32 %1196
  br label %.preheader589

.preheader604.loopexit:                           ; preds = %.lr.ph933
  br label %.preheader604

.preheader604:                                    ; preds = %.preheader604.loopexit, %middle.block, %.preheader605
  %1197 = icmp eq i32 %z1.01092, 0
  %1198 = trunc i32 %z1.01092 to i16
  %1199 = icmp sgt i32 %4, %z1.01092
  %1200 = icmp sgt i32 %z1.01092, 0
  %1201 = add i32 %z1.01092, -1
  %1202 = icmp eq i32 %z1.01092, %11
  %1203 = add i32 %z1.01092, 1
  %1204 = trunc i32 %1203 to i16
  %1205 = icmp slt i32 %z1.01092, %11
  br label %.preheader603

.lr.ph933:                                        ; preds = %.lr.ph933.preheader1840, %.lr.ph933
  %k.0932 = phi i32 [ %1208, %.lr.ph933 ], [ %k.0932.ph, %.lr.ph933.preheader1840 ]
  %1206 = getelementptr inbounds i8* %1163, i32 %k.0932
  store i8 0, i8* %1206, align 1, !tbaa !9
  %.sum120 = add i32 %k.0932, %1161
  %1207 = getelementptr inbounds i8* %1163, i32 %.sum120
  store i8 0, i8* %1207, align 1, !tbaa !9
  %1208 = add nsw i32 %k.0932, 1
  %1209 = icmp slt i32 %1208, %1161
  br i1 %1209, label %.lr.ph933, label %.preheader604.loopexit, !llvm.loop !18

.preheader603:                                    ; preds = %.preheader604, %._crit_edge1083
  %indvar1332 = phi i32 [ 0, %.preheader604 ], [ %indvar.next1333, %._crit_edge1083 ]
  %chunk_vertex_index.11091 = phi i32 [ %chunk_vertex_index.01095, %.preheader604 ], [ %chunk_vertex_index.2.lcssa, %._crit_edge1083 ]
  %chunk_color_index.11090 = phi i32 [ %chunk_color_index.01094, %.preheader604 ], [ %chunk_color_index.2.lcssa, %._crit_edge1083 ]
  %chunk_shadow_index.11089 = phi i32 [ %chunk_shadow_index.01093, %.preheader604 ], [ %chunk_shadow_index.2.lcssa, %._crit_edge1083 ]
  %x2.01087 = phi i32 [ %chunk_x, %.preheader604 ], [ %2173, %._crit_edge1083 ]
  %1210 = mul i32 %2, %indvar1332
  %1211 = add i32 %1165, %1210
  br i1 %3, label %.lr.ph1082, label %._crit_edge1083

.lr.ph1082:                                       ; preds = %.preheader603
  %1212 = sub i32 %x2.01087, %chunk_x
  %1213 = mul nsw i32 %2, %1212
  %1214 = sub nsw i32 %1, %x2.01087
  %1215 = icmp sgt i32 %1214, 1
  %1216 = or i32 %x2.01087, %z1.01092
  %1217 = trunc i32 %x2.01087 to i16
  %1218 = icmp sgt i32 %5, %x2.01087
  br label %1219

; <label>:1219                                    ; preds = %.lr.ph1082, %2170
  %chunk_vertex_index.21081 = phi i32 [ %chunk_vertex_index.11091, %.lr.ph1082 ], [ %chunk_vertex_index.4, %2170 ]
  %chunk_color_index.21080 = phi i32 [ %chunk_color_index.11090, %.lr.ph1082 ], [ %chunk_color_index.4, %2170 ]
  %chunk_shadow_index.21077 = phi i32 [ %chunk_shadow_index.11089, %.lr.ph1082 ], [ %chunk_shadow_index.6, %2170 ]
  %y3.01075 = phi i32 [ 0, %.lr.ph1082 ], [ %2171, %2170 ]
  %1220 = add i32 %1211, %y3.01075
  %1221 = add i32 %1210, %y3.01075
  %1222 = mul nsw i32 %4, %y3.01075
  %1223 = add nsw i32 %1222, %z1.01092
  %1224 = mul nsw i32 %1223, %5
  %1225 = add nsw i32 %1224, %x2.01087
  %1226 = getelementptr inbounds i64* %6, i32 %1225
  %1227 = load i64* %1226, align 4, !tbaa !7
  %1228 = icmp eq i64 %1227, 4294967295
  br i1 %1228, label %2170, label %1229

; <label>:1229                                    ; preds = %1219
  %1230 = trunc i64 %1227 to i32
  %1231 = lshr i64 %1227, 8
  %1232 = trunc i64 %1231 to i32
  %1233 = lshr i64 %1227, 16
  %1234 = trunc i64 %1233 to i32
  br i1 %1197, label %1235, label %1242

; <label>:1235                                    ; preds = %1229
  %1236 = add i32 %11, %1222
  %1237 = mul nsw i32 %1236, %5
  %1238 = add nsw i32 %1237, %x2.01087
  %1239 = getelementptr inbounds i64* %6, i32 %1238
  %1240 = load i64* %1239, align 4, !tbaa !7
  %1241 = icmp eq i64 %1240, 4294967295
  br i1 %1241, label %1250, label %.thread453

; <label>:1242                                    ; preds = %1229
  br i1 %1200, label %1243, label %.thread453

; <label>:1243                                    ; preds = %1242
  %1244 = add i32 %1201, %1222
  %1245 = mul nsw i32 %1244, %5
  %1246 = add nsw i32 %1245, %x2.01087
  %1247 = getelementptr inbounds i64* %6, i32 %1246
  %1248 = load i64* %1247, align 4, !tbaa !7
  %1249 = icmp eq i64 %1248, 4294967295
  br i1 %1249, label %1250, label %.thread453

; <label>:1250                                    ; preds = %1243, %1235
  %1251 = add nsw i32 %1213, %y3.01075
  %1252 = getelementptr inbounds i8* %1163, i32 %1251
  %1253 = load i8* %1252, align 1, !tbaa !9
  %1254 = icmp eq i8 %1253, 0
  br i1 %1254, label %.preheader602, label %.thread453

.preheader602:                                    ; preds = %1250
  %1255 = sub nsw i32 %2, %y3.01075
  %1256 = icmp sgt i32 %1255, 0
  br i1 %1256, label %.lr.ph936.preheader, label %.thread454.preheader

.lr.ph936.preheader:                              ; preds = %.preheader602
  br label %.lr.ph936

.lr.ph936:                                        ; preds = %.lr.ph936.preheader, %1290
  %1257 = phi i32 [ %1292, %1290 ], [ 0, %.lr.ph936.preheader ]
  %a4.0935 = phi i8 [ %1291, %1290 ], [ 0, %.lr.ph936.preheader ]
  %1258 = add nsw i32 %1257, %y3.01075
  %1259 = mul nsw i32 %4, %1258
  %1260 = add nsw i32 %1259, %z1.01092
  %1261 = mul nsw i32 %1260, %5
  %1262 = add nsw i32 %1261, %x2.01087
  %1263 = getelementptr inbounds i64* %6, i32 %1262
  %1264 = load i64* %1263, align 4, !tbaa !7
  %1265 = xor i64 %1264, %1227
  %1266 = and i64 %1265, 67553998185431039
  %1267 = icmp eq i64 %1266, 0
  br i1 %1267, label %1268, label %.thread454.preheader.loopexit

; <label>:1268                                    ; preds = %.lr.ph936
  %1269 = add nsw i32 %1258, %1213
  %1270 = getelementptr inbounds i8* %1163, i32 %1269
  %1271 = load i8* %1270, align 1, !tbaa !9
  %1272 = icmp eq i8 %1271, 0
  br i1 %1272, label %1273, label %.thread454.preheader.loopexit

; <label>:1273                                    ; preds = %1268
  br i1 %1197, label %1274, label %1282

; <label>:1274                                    ; preds = %1273
  %1275 = add i32 %11, %1259
  %1276 = mul nsw i32 %1275, %5
  %1277 = add nsw i32 %1276, %x2.01087
  %1278 = getelementptr inbounds i64* %6, i32 %1277
  %1279 = load i64* %1278, align 4, !tbaa !7
  %1280 = icmp eq i64 %1279, 4294967295
  br i1 %1280, label %1290, label %.thread454.preheader.loopexit

.thread454.preheader.loopexit:                    ; preds = %.lr.ph936, %1268, %1282, %1283, %1290, %1274
  %len_y1.0.lcssa.ph = phi i8 [ %a4.0935, %1274 ], [ %1291, %1290 ], [ %a4.0935, %1283 ], [ %a4.0935, %1282 ], [ %a4.0935, %1268 ], [ %a4.0935, %.lr.ph936 ]
  br label %.thread454.preheader

.thread454.preheader:                             ; preds = %.thread454.preheader.loopexit, %.preheader602
  %len_y1.0.lcssa = phi i8 [ 0, %.preheader602 ], [ %len_y1.0.lcssa.ph, %.thread454.preheader.loopexit ]
  br i1 %1215, label %.preheader596.lr.ph, label %.preheader601

.preheader596.lr.ph:                              ; preds = %.thread454.preheader
  %1281 = icmp eq i8 %len_y1.0.lcssa, 0
  br label %.preheader596

; <label>:1282                                    ; preds = %1273
  br i1 %1200, label %1283, label %.thread454.preheader.loopexit

; <label>:1283                                    ; preds = %1282
  %1284 = add i32 %1201, %1259
  %1285 = mul nsw i32 %1284, %5
  %1286 = add nsw i32 %1285, %x2.01087
  %1287 = getelementptr inbounds i64* %6, i32 %1286
  %1288 = load i64* %1287, align 4, !tbaa !7
  %1289 = icmp eq i64 %1288, 4294967295
  br i1 %1289, label %1290, label %.thread454.preheader.loopexit

; <label>:1290                                    ; preds = %1283, %1274
  %1291 = add i8 %a4.0935, 1
  %1292 = zext i8 %1291 to i32
  %1293 = icmp slt i32 %1292, %1255
  br i1 %1293, label %.lr.ph936, label %.thread454.preheader.loopexit

.preheader601.loopexit:                           ; preds = %.thread455, %.thread454
  %len_x1.0.lcssa.ph = phi i8 [ %1340, %.thread454 ], [ %b5.0962, %.thread455 ]
  br label %.preheader601

.preheader601:                                    ; preds = %.preheader601.loopexit, %.thread454.preheader
  %len_x1.0.lcssa = phi i8 [ 1, %.thread454.preheader ], [ %len_x1.0.lcssa.ph, %.preheader601.loopexit ]
  %1294 = icmp sgt i32 %1214, 0
  br i1 %1294, label %.lr.ph969, label %.thread456.preheader

.lr.ph969:                                        ; preds = %.preheader601
  %1295 = add i32 %11, %1222
  %1296 = mul nsw i32 %1295, %5
  %1297 = add i32 %1201, %1222
  %1298 = mul nsw i32 %1297, %5
  br label %1343

.preheader596:                                    ; preds = %.preheader596.lr.ph, %.thread454
  %1299 = phi i32 [ 1, %.preheader596.lr.ph ], [ %1341, %.thread454 ]
  %b5.0962 = phi i8 [ 1, %.preheader596.lr.ph ], [ %1340, %.thread454 ]
  br i1 %1281, label %.thread455, label %.lr.ph949

.lr.ph949:                                        ; preds = %.preheader596
  %1300 = add i32 %1212, %1299
  %1301 = add i32 %1299, %x2.01087
  %1302 = mul nsw i32 %2, %1300
  br label %1303

; <label>:1303                                    ; preds = %.lr.ph949, %1336
  %a6.0948 = phi i8 [ 0, %.lr.ph949 ], [ %1337, %1336 ]
  %1304 = zext i8 %a6.0948 to i32
  %1305 = add nsw i32 %1304, %y3.01075
  %1306 = mul nsw i32 %4, %1305
  %1307 = add nsw i32 %1306, %z1.01092
  %1308 = mul nsw i32 %1307, %5
  %1309 = add i32 %1301, %1308
  %1310 = getelementptr inbounds i64* %6, i32 %1309
  %1311 = load i64* %1310, align 4, !tbaa !7
  %1312 = xor i64 %1311, %1227
  %1313 = and i64 %1312, 67553998185431039
  %1314 = icmp eq i64 %1313, 0
  br i1 %1314, label %1315, label %.thread455.loopexit

; <label>:1315                                    ; preds = %1303
  %1316 = add nsw i32 %1302, %1305
  %1317 = getelementptr inbounds i8* %1163, i32 %1316
  %1318 = load i8* %1317, align 1, !tbaa !9
  %1319 = icmp eq i8 %1318, 0
  br i1 %1319, label %1320, label %.thread455.loopexit

; <label>:1320                                    ; preds = %1315
  br i1 %1197, label %1321, label %1328

; <label>:1321                                    ; preds = %1320
  %1322 = add i32 %11, %1306
  %1323 = mul nsw i32 %1322, %5
  %1324 = add i32 %1301, %1323
  %1325 = getelementptr inbounds i64* %6, i32 %1324
  %1326 = load i64* %1325, align 4, !tbaa !7
  %1327 = icmp eq i64 %1326, 4294967295
  br i1 %1327, label %1336, label %.thread455.loopexit

; <label>:1328                                    ; preds = %1320
  br i1 %1200, label %1329, label %.thread455.loopexit

; <label>:1329                                    ; preds = %1328
  %1330 = add i32 %1201, %1306
  %1331 = mul nsw i32 %1330, %5
  %1332 = add i32 %1301, %1331
  %1333 = getelementptr inbounds i64* %6, i32 %1332
  %1334 = load i64* %1333, align 4, !tbaa !7
  %1335 = icmp eq i64 %1334, 4294967295
  br i1 %1335, label %1336, label %.thread455.loopexit

; <label>:1336                                    ; preds = %1321, %1329
  %1337 = add i8 %a6.0948, 1
  %1338 = icmp ult i8 %1337, %len_y1.0.lcssa
  br i1 %1338, label %1303, label %.thread455.loopexit

.thread455.loopexit:                              ; preds = %1321, %1315, %1303, %1328, %1329, %1336
  %a6.0.lcssa.ph = phi i8 [ %1337, %1336 ], [ %a6.0948, %1329 ], [ %a6.0948, %1328 ], [ %a6.0948, %1303 ], [ %a6.0948, %1315 ], [ %a6.0948, %1321 ]
  br label %.thread455

.thread455:                                       ; preds = %.thread455.loopexit, %.preheader596
  %a6.0.lcssa = phi i8 [ 0, %.preheader596 ], [ %a6.0.lcssa.ph, %.thread455.loopexit ]
  %1339 = icmp eq i8 %a6.0.lcssa, %len_y1.0.lcssa
  br i1 %1339, label %.thread454, label %.preheader601.loopexit

.thread454:                                       ; preds = %.thread455
  %1340 = add i8 %b5.0962, 1
  %1341 = zext i8 %1340 to i32
  %1342 = icmp slt i32 %1341, %1214
  br i1 %1342, label %.preheader596, label %.preheader601.loopexit

; <label>:1343                                    ; preds = %.lr.ph969, %1373
  %1344 = phi i32 [ 0, %.lr.ph969 ], [ %1375, %1373 ]
  %a7.0968 = phi i8 [ 0, %.lr.ph969 ], [ %1374, %1373 ]
  %1345 = add i32 %1344, %x2.01087
  %1346 = add i32 %1345, %1224
  %1347 = getelementptr inbounds i64* %6, i32 %1346
  %1348 = load i64* %1347, align 4, !tbaa !7
  %1349 = xor i64 %1348, %1227
  %1350 = and i64 %1349, 67553998185431039
  %1351 = icmp eq i64 %1350, 0
  br i1 %1351, label %1352, label %.thread456.preheader.loopexit

; <label>:1352                                    ; preds = %1343
  %1353 = add i32 %1212, %1344
  %1354 = mul nsw i32 %2, %1353
  %1355 = add nsw i32 %1354, %y3.01075
  %1356 = getelementptr inbounds i8* %1163, i32 %1355
  %1357 = load i8* %1356, align 1, !tbaa !9
  %1358 = icmp eq i8 %1357, 0
  br i1 %1358, label %1359, label %.thread456.preheader.loopexit

; <label>:1359                                    ; preds = %1352
  br i1 %1197, label %1360, label %1367

; <label>:1360                                    ; preds = %1359
  %1361 = add i32 %1345, %1296
  %1362 = getelementptr inbounds i64* %6, i32 %1361
  %1363 = load i64* %1362, align 4, !tbaa !7
  %1364 = icmp eq i64 %1363, 4294967295
  br i1 %1364, label %1373, label %.thread456.preheader.loopexit

.thread456.preheader.loopexit:                    ; preds = %1343, %1352, %1367, %1368, %1373, %1360
  %len_x2.0.lcssa.ph = phi i8 [ %a7.0968, %1360 ], [ %1374, %1373 ], [ %a7.0968, %1368 ], [ %a7.0968, %1367 ], [ %a7.0968, %1352 ], [ %a7.0968, %1343 ]
  br label %.thread456.preheader

.thread456.preheader:                             ; preds = %.thread456.preheader.loopexit, %.preheader601
  %len_x2.0.lcssa = phi i8 [ 0, %.preheader601 ], [ %len_x2.0.lcssa.ph, %.thread456.preheader.loopexit ]
  %1365 = icmp sgt i32 %1255, 1
  br i1 %1365, label %.preheader595.lr.ph, label %.thread457._crit_edge

.preheader595.lr.ph:                              ; preds = %.thread456.preheader
  %1366 = icmp eq i8 %len_x2.0.lcssa, 0
  br label %.preheader595

; <label>:1367                                    ; preds = %1359
  br i1 %1200, label %1368, label %.thread456.preheader.loopexit

; <label>:1368                                    ; preds = %1367
  %1369 = add i32 %1345, %1298
  %1370 = getelementptr inbounds i64* %6, i32 %1369
  %1371 = load i64* %1370, align 4, !tbaa !7
  %1372 = icmp eq i64 %1371, 4294967295
  br i1 %1372, label %1373, label %.thread456.preheader.loopexit

; <label>:1373                                    ; preds = %1368, %1360
  %1374 = add i8 %a7.0968, 1
  %1375 = zext i8 %1374 to i32
  %1376 = icmp slt i32 %1375, %1214
  br i1 %1376, label %1343, label %.thread456.preheader.loopexit

.preheader595:                                    ; preds = %.preheader595.lr.ph, %.thread456
  %1377 = phi i32 [ 1, %.preheader595.lr.ph ], [ %1426, %.thread456 ]
  %b8.0995 = phi i8 [ 1, %.preheader595.lr.ph ], [ %1425, %.thread456 ]
  %1378 = add nsw i32 %1377, %y3.01075
  br i1 %1366, label %.thread457, label %.lr.ph982

.lr.ph982:                                        ; preds = %.preheader595
  %1379 = mul nsw i32 %4, %1378
  %1380 = add nsw i32 %1379, %z1.01092
  %1381 = mul nsw i32 %1380, %5
  %1382 = add i32 %11, %1379
  %1383 = mul nsw i32 %1382, %5
  %1384 = add i32 %1201, %1379
  %1385 = mul nsw i32 %1384, %5
  br label %1386

; <label>:1386                                    ; preds = %.lr.ph982, %1414
  %indvars.iv1324 = phi i32 [ 0, %.lr.ph982 ], [ %indvars.iv.next1325, %1414 ]
  %1387 = phi i32 [ 0, %.lr.ph982 ], [ %1417, %1414 ]
  %1388 = add i32 %1387, %x2.01087
  %1389 = add i32 %1388, %1381
  %1390 = getelementptr inbounds i64* %6, i32 %1389
  %1391 = load i64* %1390, align 4, !tbaa !7
  %1392 = xor i64 %1391, %1227
  %1393 = and i64 %1392, 67553998185431039
  %1394 = icmp eq i64 %1393, 0
  br i1 %1394, label %1395, label %..thread457_crit_edge986

; <label>:1395                                    ; preds = %1386
  %1396 = add i32 %1212, %1387
  %1397 = mul nsw i32 %2, %1396
  %1398 = add nsw i32 %1397, %1378
  %1399 = getelementptr inbounds i8* %1163, i32 %1398
  %1400 = load i8* %1399, align 1, !tbaa !9
  %1401 = icmp eq i8 %1400, 0
  br i1 %1401, label %1402, label %..thread457_crit_edge984

; <label>:1402                                    ; preds = %1395
  br i1 %1197, label %1403, label %1408

; <label>:1403                                    ; preds = %1402
  %1404 = add i32 %1388, %1383
  %1405 = getelementptr inbounds i64* %6, i32 %1404
  %1406 = load i64* %1405, align 4, !tbaa !7
  %1407 = icmp eq i64 %1406, 4294967295
  br i1 %1407, label %1414, label %..thread457_crit_edge

; <label>:1408                                    ; preds = %1402
  br i1 %1200, label %1409, label %..thread457_crit_edge988

; <label>:1409                                    ; preds = %1408
  %1410 = add i32 %1388, %1385
  %1411 = getelementptr inbounds i64* %6, i32 %1410
  %1412 = load i64* %1411, align 4, !tbaa !7
  %1413 = icmp eq i64 %1412, 4294967295
  br i1 %1413, label %1414, label %..thread457_crit_edge990

; <label>:1414                                    ; preds = %1403, %1409
  %1415 = trunc i32 %indvars.iv1324 to i8
  %1416 = add i8 %1415, 1
  %1417 = zext i8 %1416 to i32
  %1418 = icmp ult i8 %1416, %len_x2.0.lcssa
  %indvars.iv.next1325 = add nuw nsw i32 %indvars.iv1324, 1
  br i1 %1418, label %1386, label %.thread457.loopexit

..thread457_crit_edge:                            ; preds = %1403
  %indvars.iv1324.lcssa1867 = phi i32 [ %indvars.iv1324, %1403 ]
  %1419 = trunc i32 %indvars.iv1324.lcssa1867 to i8
  br label %.thread457

..thread457_crit_edge984:                         ; preds = %1395
  %indvars.iv1324.lcssa1864 = phi i32 [ %indvars.iv1324, %1395 ]
  %1420 = trunc i32 %indvars.iv1324.lcssa1864 to i8
  br label %.thread457

..thread457_crit_edge986:                         ; preds = %1386
  %indvars.iv1324.lcssa = phi i32 [ %indvars.iv1324, %1386 ]
  %1421 = trunc i32 %indvars.iv1324.lcssa to i8
  br label %.thread457

..thread457_crit_edge988:                         ; preds = %1408
  %indvars.iv1324.lcssa1865 = phi i32 [ %indvars.iv1324, %1408 ]
  %1422 = trunc i32 %indvars.iv1324.lcssa1865 to i8
  br label %.thread457

..thread457_crit_edge990:                         ; preds = %1409
  %indvars.iv1324.lcssa1866 = phi i32 [ %indvars.iv1324, %1409 ]
  %1423 = trunc i32 %indvars.iv1324.lcssa1866 to i8
  br label %.thread457

.thread457.loopexit:                              ; preds = %1414
  %.lcssa1869 = phi i8 [ %1416, %1414 ]
  br label %.thread457

.thread457:                                       ; preds = %.thread457.loopexit, %.preheader595, %..thread457_crit_edge990, %..thread457_crit_edge988, %..thread457_crit_edge986, %..thread457_crit_edge984, %..thread457_crit_edge
  %a9.0.lcssa = phi i8 [ %1419, %..thread457_crit_edge ], [ %1420, %..thread457_crit_edge984 ], [ %1421, %..thread457_crit_edge986 ], [ %1422, %..thread457_crit_edge988 ], [ %1423, %..thread457_crit_edge990 ], [ 0, %.preheader595 ], [ %.lcssa1869, %.thread457.loopexit ]
  %1424 = icmp eq i8 %a9.0.lcssa, %len_x2.0.lcssa
  br i1 %1424, label %.thread456, label %.thread457._crit_edge.loopexit

.thread456:                                       ; preds = %.thread457
  %1425 = add i8 %b8.0995, 1
  %1426 = zext i8 %1425 to i32
  %1427 = icmp slt i32 %1426, %1255
  br i1 %1427, label %.preheader595, label %.thread457._crit_edge.loopexit

.thread457._crit_edge.loopexit:                   ; preds = %.thread457, %.thread456
  %len_y2.0.lcssa.ph = phi i8 [ %1425, %.thread456 ], [ %b8.0995, %.thread457 ]
  br label %.thread457._crit_edge

.thread457._crit_edge:                            ; preds = %.thread457._crit_edge.loopexit, %.thread456.preheader
  %len_y2.0.lcssa = phi i8 [ 1, %.thread456.preheader ], [ %len_y2.0.lcssa.ph, %.thread457._crit_edge.loopexit ]
  %1428 = zext i8 %len_y1.0.lcssa to i32
  %1429 = zext i8 %len_x1.0.lcssa to i32
  %1430 = mul nsw i32 %1429, %1428
  %1431 = zext i8 %len_y2.0.lcssa to i32
  %1432 = zext i8 %len_x2.0.lcssa to i32
  %1433 = mul nsw i32 %1431, %1432
  %1434 = icmp ugt i32 %1430, %1433
  %len_x1.0.len_x2.0 = select i1 %1434, i8 %len_x1.0.lcssa, i8 %len_x2.0.lcssa
  %len_y1.0.len_y2.0 = select i1 %1434, i8 %len_y1.0.lcssa, i8 %len_y2.0.lcssa
  %1435 = zext i8 %len_x1.0.len_x2.0 to i32
  %1436 = icmp eq i8 %len_x1.0.len_x2.0, 0
  br i1 %1436, label %._crit_edge1002, label %.preheader594.lr.ph

.preheader594.lr.ph:                              ; preds = %.thread457._crit_edge
  %1437 = icmp eq i8 %len_y1.0.len_y2.0, 0
  %1438 = add i8 %len_y1.0.len_y2.0, -1
  %1439 = zext i8 %1438 to i32
  %1440 = add nuw nsw i32 %1439, 1
  br label %.preheader594

.preheader594:                                    ; preds = %1443, %.preheader594.lr.ph
  %indvar1330 = phi i32 [ 0, %.preheader594.lr.ph ], [ %indvar.next1331, %1443 ]
  br i1 %1437, label %1443, label %.lr.ph999

.lr.ph999:                                        ; preds = %.preheader594
  %1441 = mul i32 %2, %indvar1330
  %1442 = add i32 %1221, %1441
  %scevgep1334 = getelementptr i8* %1163, i32 %1442
  call void @llvm.memset.p0i8.i32(i8* %scevgep1334, i8 1, i32 %1440, i32 1, i1 false)
  br label %1443

; <label>:1443                                    ; preds = %.preheader594, %.lr.ph999
  %indvar.next1331 = add i32 %indvar1330, 1
  %lftr.wideiv1335 = trunc i32 %indvar.next1331 to i8
  %exitcond1336 = icmp eq i8 %lftr.wideiv1335, %len_x1.0.len_x2.0
  br i1 %exitcond1336, label %._crit_edge1002.loopexit, label %.preheader594

._crit_edge1002.loopexit:                         ; preds = %1443
  br label %._crit_edge1002

._crit_edge1002:                                  ; preds = %._crit_edge1002.loopexit, %.thread457._crit_edge
  %1444 = or i32 %1216, %y3.01075
  %1445 = icmp sgt i32 %1444, -1
  %1446 = icmp sgt i32 %2, %y3.01075
  %or.cond.i136 = and i1 %1218, %1446
  %or.cond1711 = and i1 %1445, %or.cond.i136
  %brmerge1713.demorgan = and i1 %or.cond1711, %1199
  br i1 %brmerge1713.demorgan, label %map_get.exit138, label %map_get.exit138.thread

map_get.exit138.thread:                           ; preds = %._crit_edge1002
  %1447 = getelementptr inbounds i8* %1159, i32 %chunk_shadow_index.21077
  br label %1452

map_get.exit138:                                  ; preds = %._crit_edge1002
  %1448 = load i64* %1226, align 4, !tbaa !7
  %1449 = and i64 %1448, 536870912
  %1450 = icmp eq i64 %1449, 0
  %1451 = getelementptr inbounds i8* %1159, i32 %chunk_shadow_index.21077
  br i1 %1450, label %1454, label %1452

; <label>:1452                                    ; preds = %map_get.exit138.thread, %map_get.exit138
  %1453 = phi i8* [ %1447, %map_get.exit138.thread ], [ %1451, %map_get.exit138 ]
  store i8 1, i8* %1453, align 1, !tbaa !9
  br label %1455

; <label>:1454                                    ; preds = %map_get.exit138
  store i8 0, i8* %1451, align 1, !tbaa !9
  br label %1455

; <label>:1455                                    ; preds = %1454, %1452
  %s.0 = phi float [ 7.500000e-01, %1452 ], [ 1.000000e+00, %1454 ]
  %chunk_shadow_index.3 = add nsw i32 %chunk_shadow_index.21077, 1
  %1456 = lshr i64 %1227, 54
  %1457 = and i64 %1456, 1
  %1458 = lshr i64 %1227, 53
  %1459 = and i64 %1458, 1
  %1460 = add nuw nsw i64 %1457, %1459
  %1461 = lshr i64 %1227, 52
  %1462 = and i64 %1461, 1
  %1463 = lshr i64 %1227, 55
  %1464 = and i64 %1463, 1
  %1465 = add nuw nsw i64 %1462, %1464
  %1466 = icmp ugt i64 %1460, %1465
  %1467 = and i32 %1230, 255
  %1468 = sitofp i32 %1467 to float
  %1469 = fmul fast float %1468, 0x3FE6666660000000
  %1470 = fmul fast float %1469, %s.0
  br i1 %1466, label %1471, label %1588

; <label>:1471                                    ; preds = %1455
  %1472 = uitofp i64 %1457 to float
  %1473 = getelementptr inbounds i8* %1158, i32 %chunk_color_index.21080
  %1474 = and i32 %1232, 255
  %1475 = sitofp i32 %1474 to float
  %1476 = fmul fast float %1475, 0x3FE6666660000000
  %1477 = fmul fast float %1476, %s.0
  %1478 = and i32 %1234, 255
  %1479 = sitofp i32 %1478 to float
  %1480 = fmul fast float %1479, 0x3FE6666660000000
  %1481 = fmul fast float %1480, %s.0
  %1482 = uitofp i64 %1462 to float
  %1483 = insertelement <2 x float> undef, float %1472, i32 0
  %1484 = insertelement <2 x float> %1483, float %1482, i32 1
  %1485 = insertelement <2 x float> undef, float %1470, i32 0
  %1486 = insertelement <2 x float> %1485, float %1470, i32 1
  %1487 = insertelement <2 x float> undef, float %1477, i32 0
  %1488 = insertelement <2 x float> %1487, float %1477, i32 1
  %1489 = insertelement <2 x float> undef, float %1481, i32 0
  %1490 = insertelement <2 x float> %1489, float %1481, i32 1
  %1491 = uitofp i64 %1459 to float
  %1492 = add nsw i32 %chunk_color_index.21080, 8
  %1493 = getelementptr inbounds i8* %1158, i32 %1492
  %1494 = uitofp i64 %1464 to float
  %1495 = insertelement <2 x float> undef, float %1491, i32 0
  %1496 = insertelement <2 x float> %1495, float %1494, i32 1
  %1497 = shufflevector <2 x float> %1484, <2 x float> %1496, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1498 = fmul fast <4 x float> %1497, <float 0x3FD6666660000000, float 0x3FD6666660000000, float 0x3FD6666660000000, float 0x3FD6666660000000>
  %1499 = fadd fast <4 x float> %1498, <float 0x3FE4CCCCC0000000, float 0x3FE4CCCCC0000000, float 0x3FE4CCCCC0000000, float 0x3FE4CCCCC0000000>
  %1500 = shufflevector <2 x float> %1486, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %1501 = fmul fast <4 x float> %1499, %1500
  %1502 = extractelement <4 x float> %1501, i32 0
  %1503 = extractelement <4 x float> %1501, i32 1
  %1504 = fptosi float %1502 to i32
  %1505 = trunc i32 %1504 to i8
  %1506 = fptosi float %1503 to i32
  %1507 = trunc i32 %1506 to i8
  %1508 = insertelement <2 x i8> undef, i8 %1505, i32 0
  %1509 = extractelement <4 x float> %1501, i32 2
  %1510 = extractelement <4 x float> %1501, i32 3
  %1511 = fptosi float %1509 to i32
  %1512 = trunc i32 %1511 to i8
  %1513 = fptosi float %1510 to i32
  %1514 = trunc i32 %1513 to i8
  %1515 = shufflevector <2 x float> %1488, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %1516 = fmul fast <4 x float> %1499, %1515
  %1517 = extractelement <4 x float> %1516, i32 0
  %1518 = extractelement <4 x float> %1516, i32 1
  %1519 = fptosi float %1517 to i32
  %1520 = trunc i32 %1519 to i8
  %1521 = fptosi float %1518 to i32
  %1522 = trunc i32 %1521 to i8
  %1523 = insertelement <2 x i8> undef, i8 %1522, i32 0
  %1524 = insertelement <2 x i8> %1508, i8 %1520, i32 1
  %1525 = extractelement <4 x float> %1516, i32 2
  %1526 = extractelement <4 x float> %1516, i32 3
  %1527 = fptosi float %1525 to i32
  %1528 = trunc i32 %1527 to i8
  %1529 = insertelement <2 x i8> undef, i8 %1512, i32 0
  %1530 = insertelement <2 x i8> %1529, i8 %1528, i32 1
  %1531 = fptosi float %1526 to i32
  %1532 = trunc i32 %1531 to i8
  %1533 = shufflevector <2 x float> %1490, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %1534 = fmul fast <4 x float> %1499, %1533
  %1535 = extractelement <4 x float> %1534, i32 0
  %1536 = extractelement <4 x float> %1534, i32 1
  %1537 = fptosi float %1535 to i32
  %1538 = trunc i32 %1537 to i8
  %1539 = insertelement <2 x i8> undef, i8 %1538, i32 0
  %1540 = fptosi float %1536 to i32
  %1541 = trunc i32 %1540 to i8
  %1542 = insertelement <2 x i8> %1539, i8 %1507, i32 1
  %1543 = insertelement <2 x i8> %1523, i8 %1541, i32 1
  %1544 = shufflevector <2 x i8> %1542, <2 x i8> %1530, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1545 = shufflevector <2 x i8> %1524, <2 x i8> %1543, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1546 = shufflevector <4 x i8> %1545, <4 x i8> %1544, <8 x i32> <i32 0, i32 1, i32 4, i32 5, i32 2, i32 3, i32 6, i32 7>
  %1547 = bitcast i8* %1473 to <8 x i8>*
  store <8 x i8> %1546, <8 x i8>* %1547, align 1, !tbaa !9
  %1548 = extractelement <4 x float> %1534, i32 2
  %1549 = extractelement <4 x float> %1534, i32 3
  %1550 = fptosi float %1548 to i32
  %1551 = trunc i32 %1550 to i8
  %1552 = insertelement <2 x i8> undef, i8 %1551, i32 0
  %1553 = insertelement <2 x i8> %1552, i8 %1514, i32 1
  %1554 = bitcast i8* %1493 to <4 x i8>*
  %1555 = fptosi float %1549 to i32
  %1556 = trunc i32 %1555 to i8
  %1557 = add nsw i32 %chunk_color_index.21080, 12
  %1558 = insertelement <2 x i8> undef, i8 %1532, i32 0
  %1559 = insertelement <2 x i8> %1558, i8 %1556, i32 1
  %1560 = shufflevector <2 x i8> %1553, <2 x i8> %1559, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i8> %1560, <4 x i8>* %1554, align 1, !tbaa !9
  %1561 = getelementptr inbounds i16* %1156, i32 %chunk_vertex_index.21081
  %1562 = trunc i32 %y3.01075 to i16
  %1563 = insertelement <2 x i16> undef, i16 %1217, i32 0
  %1564 = insertelement <2 x i16> %1563, i16 %1562, i32 1
  %1565 = insertelement <2 x i16> undef, i16 %1198, i32 0
  %1566 = insertelement <2 x i16> %1565, i16 %1217, i32 1
  %1567 = zext i8 %len_y1.0.len_y2.0 to i32
  %1568 = add nsw i32 %1567, %y3.01075
  %1569 = trunc i32 %1568 to i16
  %1570 = insertelement <2 x i16> undef, i16 %1569, i32 0
  %1571 = insertelement <2 x i16> %1570, i16 %1198, i32 1
  %1572 = add nsw i32 %1435, %x2.01087
  %1573 = trunc i32 %1572 to i16
  %1574 = add nsw i32 %chunk_vertex_index.21081, 8
  %1575 = insertelement <2 x i16> undef, i16 %1573, i32 0
  %1576 = insertelement <2 x i16> %1575, i16 %1569, i32 1
  %1577 = shufflevector <2 x i16> %1566, <2 x i16> %1576, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1578 = shufflevector <2 x i16> %1564, <2 x i16> %1571, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1579 = shufflevector <4 x i16> %1578, <4 x i16> %1577, <8 x i32> <i32 0, i32 1, i32 4, i32 5, i32 2, i32 3, i32 6, i32 7>
  %1580 = bitcast i16* %1561 to <8 x i16>*
  store <8 x i16> %1579, <8 x i16>* %1580, align 2, !tbaa !19
  %1581 = getelementptr inbounds i16* %1156, i32 %1574
  %1582 = insertelement <2 x i16> %1565, i16 %1573, i32 1
  %1583 = bitcast i16* %1581 to <4 x i16>*
  %1584 = add nsw i32 %chunk_vertex_index.21081, 12
  %1585 = insertelement <2 x i16> undef, i16 %1562, i32 0
  %1586 = insertelement <2 x i16> %1585, i16 %1198, i32 1
  %1587 = shufflevector <2 x i16> %1582, <2 x i16> %1586, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i16> %1587, <4 x i16>* %1583, align 2, !tbaa !19
  br label %.thread453

; <label>:1588                                    ; preds = %1455
  %1589 = uitofp i64 %1462 to float
  %1590 = getelementptr inbounds i8* %1158, i32 %chunk_color_index.21080
  %1591 = and i32 %1232, 255
  %1592 = sitofp i32 %1591 to float
  %1593 = fmul fast float %1592, 0x3FE6666660000000
  %1594 = fmul fast float %1593, %s.0
  %1595 = and i32 %1234, 255
  %1596 = sitofp i32 %1595 to float
  %1597 = fmul fast float %1596, 0x3FE6666660000000
  %1598 = fmul fast float %1597, %s.0
  %1599 = uitofp i64 %1459 to float
  %1600 = insertelement <2 x float> undef, float %1589, i32 0
  %1601 = insertelement <2 x float> %1600, float %1599, i32 1
  %1602 = insertelement <2 x float> undef, float %1470, i32 0
  %1603 = insertelement <2 x float> %1602, float %1470, i32 1
  %1604 = insertelement <2 x float> undef, float %1594, i32 0
  %1605 = insertelement <2 x float> %1604, float %1594, i32 1
  %1606 = insertelement <2 x float> undef, float %1598, i32 0
  %1607 = insertelement <2 x float> %1606, float %1598, i32 1
  %1608 = uitofp i64 %1464 to float
  %1609 = add nsw i32 %chunk_color_index.21080, 8
  %1610 = getelementptr inbounds i8* %1158, i32 %1609
  %1611 = uitofp i64 %1457 to float
  %1612 = insertelement <2 x float> undef, float %1608, i32 0
  %1613 = insertelement <2 x float> %1612, float %1611, i32 1
  %1614 = shufflevector <2 x float> %1601, <2 x float> %1613, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1615 = fmul fast <4 x float> %1614, <float 0x3FD6666660000000, float 0x3FD6666660000000, float 0x3FD6666660000000, float 0x3FD6666660000000>
  %1616 = fadd fast <4 x float> %1615, <float 0x3FE4CCCCC0000000, float 0x3FE4CCCCC0000000, float 0x3FE4CCCCC0000000, float 0x3FE4CCCCC0000000>
  %1617 = shufflevector <2 x float> %1603, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %1618 = fmul fast <4 x float> %1616, %1617
  %1619 = extractelement <4 x float> %1618, i32 0
  %1620 = extractelement <4 x float> %1618, i32 1
  %1621 = fptosi float %1619 to i32
  %1622 = trunc i32 %1621 to i8
  %1623 = fptosi float %1620 to i32
  %1624 = trunc i32 %1623 to i8
  %1625 = insertelement <2 x i8> undef, i8 %1622, i32 0
  %1626 = extractelement <4 x float> %1618, i32 2
  %1627 = extractelement <4 x float> %1618, i32 3
  %1628 = fptosi float %1626 to i32
  %1629 = trunc i32 %1628 to i8
  %1630 = fptosi float %1627 to i32
  %1631 = trunc i32 %1630 to i8
  %1632 = shufflevector <2 x float> %1605, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %1633 = fmul fast <4 x float> %1616, %1632
  %1634 = extractelement <4 x float> %1633, i32 0
  %1635 = extractelement <4 x float> %1633, i32 1
  %1636 = fptosi float %1634 to i32
  %1637 = trunc i32 %1636 to i8
  %1638 = fptosi float %1635 to i32
  %1639 = trunc i32 %1638 to i8
  %1640 = insertelement <2 x i8> undef, i8 %1639, i32 0
  %1641 = insertelement <2 x i8> %1625, i8 %1637, i32 1
  %1642 = extractelement <4 x float> %1633, i32 2
  %1643 = extractelement <4 x float> %1633, i32 3
  %1644 = fptosi float %1642 to i32
  %1645 = trunc i32 %1644 to i8
  %1646 = insertelement <2 x i8> undef, i8 %1629, i32 0
  %1647 = insertelement <2 x i8> %1646, i8 %1645, i32 1
  %1648 = fptosi float %1643 to i32
  %1649 = trunc i32 %1648 to i8
  %1650 = shufflevector <2 x float> %1607, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %1651 = fmul fast <4 x float> %1616, %1650
  %1652 = extractelement <4 x float> %1651, i32 0
  %1653 = extractelement <4 x float> %1651, i32 1
  %1654 = fptosi float %1652 to i32
  %1655 = trunc i32 %1654 to i8
  %1656 = insertelement <2 x i8> undef, i8 %1655, i32 0
  %1657 = fptosi float %1653 to i32
  %1658 = trunc i32 %1657 to i8
  %1659 = insertelement <2 x i8> %1656, i8 %1624, i32 1
  %1660 = insertelement <2 x i8> %1640, i8 %1658, i32 1
  %1661 = shufflevector <2 x i8> %1659, <2 x i8> %1647, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1662 = shufflevector <2 x i8> %1641, <2 x i8> %1660, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1663 = shufflevector <4 x i8> %1662, <4 x i8> %1661, <8 x i32> <i32 0, i32 1, i32 4, i32 5, i32 2, i32 3, i32 6, i32 7>
  %1664 = bitcast i8* %1590 to <8 x i8>*
  store <8 x i8> %1663, <8 x i8>* %1664, align 1, !tbaa !9
  %1665 = extractelement <4 x float> %1651, i32 2
  %1666 = extractelement <4 x float> %1651, i32 3
  %1667 = fptosi float %1665 to i32
  %1668 = trunc i32 %1667 to i8
  %1669 = insertelement <2 x i8> undef, i8 %1668, i32 0
  %1670 = insertelement <2 x i8> %1669, i8 %1631, i32 1
  %1671 = bitcast i8* %1610 to <4 x i8>*
  %1672 = fptosi float %1666 to i32
  %1673 = trunc i32 %1672 to i8
  %1674 = add nsw i32 %chunk_color_index.21080, 12
  %1675 = insertelement <2 x i8> undef, i8 %1649, i32 0
  %1676 = insertelement <2 x i8> %1675, i8 %1673, i32 1
  %1677 = shufflevector <2 x i8> %1670, <2 x i8> %1676, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i8> %1677, <4 x i8>* %1671, align 1, !tbaa !9
  %1678 = getelementptr inbounds i16* %1156, i32 %chunk_vertex_index.21081
  %1679 = zext i8 %len_y1.0.len_y2.0 to i32
  %1680 = add nsw i32 %1679, %y3.01075
  %1681 = trunc i32 %1680 to i16
  %1682 = insertelement <2 x i16> undef, i16 %1217, i32 0
  %1683 = insertelement <2 x i16> %1682, i16 %1681, i32 1
  %1684 = add nsw i32 %1435, %x2.01087
  %1685 = trunc i32 %1684 to i16
  %1686 = insertelement <2 x i16> undef, i16 %1198, i32 0
  %1687 = insertelement <2 x i16> %1686, i16 %1685, i32 1
  %1688 = insertelement <2 x i16> undef, i16 %1681, i32 0
  %1689 = insertelement <2 x i16> %1688, i16 %1198, i32 1
  %1690 = trunc i32 %y3.01075 to i16
  %1691 = add nsw i32 %chunk_vertex_index.21081, 8
  %1692 = insertelement <2 x i16> undef, i16 %1685, i32 0
  %1693 = insertelement <2 x i16> %1692, i16 %1690, i32 1
  %1694 = shufflevector <2 x i16> %1687, <2 x i16> %1693, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1695 = shufflevector <2 x i16> %1683, <2 x i16> %1689, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1696 = shufflevector <4 x i16> %1695, <4 x i16> %1694, <8 x i32> <i32 0, i32 1, i32 4, i32 5, i32 2, i32 3, i32 6, i32 7>
  %1697 = bitcast i16* %1678 to <8 x i16>*
  store <8 x i16> %1696, <8 x i16>* %1697, align 2, !tbaa !19
  %1698 = getelementptr inbounds i16* %1156, i32 %1691
  %1699 = insertelement <2 x i16> %1686, i16 %1217, i32 1
  %1700 = bitcast i16* %1698 to <4 x i16>*
  %1701 = add nsw i32 %chunk_vertex_index.21081, 12
  %1702 = insertelement <2 x i16> undef, i16 %1690, i32 0
  %1703 = insertelement <2 x i16> %1702, i16 %1198, i32 1
  %1704 = shufflevector <2 x i16> %1699, <2 x i16> %1703, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i16> %1704, <4 x i16>* %1700, align 2, !tbaa !19
  br label %.thread453

.thread453:                                       ; preds = %1235, %1250, %1588, %1471, %1243, %1242
  %chunk_shadow_index.4 = phi i32 [ %chunk_shadow_index.3, %1471 ], [ %chunk_shadow_index.3, %1588 ], [ %chunk_shadow_index.21077, %1250 ], [ %chunk_shadow_index.21077, %1243 ], [ %chunk_shadow_index.21077, %1242 ], [ %chunk_shadow_index.21077, %1235 ]
  %chunk_color_index.3 = phi i32 [ %1557, %1471 ], [ %1674, %1588 ], [ %chunk_color_index.21080, %1250 ], [ %chunk_color_index.21080, %1243 ], [ %chunk_color_index.21080, %1242 ], [ %chunk_color_index.21080, %1235 ]
  %chunk_vertex_index.3 = phi i32 [ %1584, %1471 ], [ %1701, %1588 ], [ %chunk_vertex_index.21081, %1250 ], [ %chunk_vertex_index.21081, %1243 ], [ %chunk_vertex_index.21081, %1242 ], [ %chunk_vertex_index.21081, %1235 ]
  br i1 %1202, label %1705, label %1711

; <label>:1705                                    ; preds = %.thread453
  %1706 = mul nsw i32 %1222, %5
  %1707 = add nsw i32 %1706, %x2.01087
  %1708 = getelementptr inbounds i64* %6, i32 %1707
  %1709 = load i64* %1708, align 4, !tbaa !7
  %1710 = icmp eq i64 %1709, 4294967295
  br i1 %1710, label %1719, label %1711

; <label>:1711                                    ; preds = %1705, %.thread453
  br i1 %1205, label %1712, label %2170

; <label>:1712                                    ; preds = %1711
  %1713 = add i32 %1203, %1222
  %1714 = mul nsw i32 %5, %1713
  %1715 = add nsw i32 %1714, %x2.01087
  %1716 = getelementptr inbounds i64* %6, i32 %1715
  %1717 = load i64* %1716, align 4, !tbaa !7
  %1718 = icmp eq i64 %1717, 4294967295
  br i1 %1718, label %1719, label %2170

; <label>:1719                                    ; preds = %1712, %1705
  %1720 = add i32 %y3.01075, %1161
  %.sum114 = add i32 %1720, %1213
  %1721 = getelementptr inbounds i8* %1163, i32 %.sum114
  %1722 = load i8* %1721, align 1, !tbaa !9
  %1723 = icmp eq i8 %1722, 0
  br i1 %1723, label %.preheader600, label %2170

.preheader600:                                    ; preds = %1719
  %1724 = sub nsw i32 %2, %y3.01075
  %1725 = icmp sgt i32 %1724, 0
  br i1 %1725, label %.lr.ph1007.preheader, label %.preheader599

.lr.ph1007.preheader:                             ; preds = %.preheader600
  %1726 = add i32 %1213, %1161
  br label %.lr.ph1007

.preheader599.loopexit:                           ; preds = %.lr.ph1007, %1739, %1750, %1751, %1758
  %len_y112.0.lcssa.ph = phi i8 [ %1759, %1758 ], [ %a16.01006, %1751 ], [ %a16.01006, %1750 ], [ %a16.01006, %1739 ], [ %a16.01006, %.lr.ph1007 ]
  br label %.preheader599

.preheader599:                                    ; preds = %.preheader599.loopexit, %.preheader600
  %len_y112.0.lcssa = phi i8 [ 0, %.preheader600 ], [ %len_y112.0.lcssa.ph, %.preheader599.loopexit ]
  br i1 %1215, label %.preheader593.lr.ph, label %.preheader598

.preheader593.lr.ph:                              ; preds = %.preheader599
  %1727 = icmp eq i8 %len_y112.0.lcssa, 0
  br label %.preheader593

.lr.ph1007:                                       ; preds = %.lr.ph1007.preheader, %1758
  %1728 = phi i32 [ %1760, %1758 ], [ 0, %.lr.ph1007.preheader ]
  %a16.01006 = phi i8 [ %1759, %1758 ], [ 0, %.lr.ph1007.preheader ]
  %1729 = add nsw i32 %1728, %y3.01075
  %1730 = mul nsw i32 %4, %1729
  %1731 = add nsw i32 %1730, %z1.01092
  %1732 = mul nsw i32 %1731, %5
  %1733 = add nsw i32 %1732, %x2.01087
  %1734 = getelementptr inbounds i64* %6, i32 %1733
  %1735 = load i64* %1734, align 4, !tbaa !7
  %1736 = xor i64 %1735, %1227
  %1737 = and i64 %1736, 4222128157097983
  %1738 = icmp eq i64 %1737, 0
  br i1 %1738, label %1739, label %.preheader599.loopexit

; <label>:1739                                    ; preds = %.lr.ph1007
  %.sum119 = add i32 %1726, %1729
  %1740 = getelementptr inbounds i8* %1163, i32 %.sum119
  %1741 = load i8* %1740, align 1, !tbaa !9
  %1742 = icmp eq i8 %1741, 0
  br i1 %1742, label %1743, label %.preheader599.loopexit

; <label>:1743                                    ; preds = %1739
  br i1 %1202, label %1744, label %1750

; <label>:1744                                    ; preds = %1743
  %1745 = mul nsw i32 %1730, %5
  %1746 = add nsw i32 %1745, %x2.01087
  %1747 = getelementptr inbounds i64* %6, i32 %1746
  %1748 = load i64* %1747, align 4, !tbaa !7
  %1749 = icmp eq i64 %1748, 4294967295
  br i1 %1749, label %1758, label %1750

; <label>:1750                                    ; preds = %1744, %1743
  br i1 %1205, label %1751, label %.preheader599.loopexit

; <label>:1751                                    ; preds = %1750
  %1752 = add i32 %1203, %1730
  %1753 = mul nsw i32 %5, %1752
  %1754 = add nsw i32 %1753, %x2.01087
  %1755 = getelementptr inbounds i64* %6, i32 %1754
  %1756 = load i64* %1755, align 4, !tbaa !7
  %1757 = icmp eq i64 %1756, 4294967295
  br i1 %1757, label %1758, label %.preheader599.loopexit

; <label>:1758                                    ; preds = %1751, %1744
  %1759 = add i8 %a16.01006, 1
  %1760 = zext i8 %1759 to i32
  %1761 = icmp slt i32 %1760, %1724
  br i1 %1761, label %.lr.ph1007, label %.preheader599.loopexit

.preheader598.loopexit:                           ; preds = %._crit_edge1020, %1806
  %len_x113.0.lcssa.ph = phi i8 [ %1807, %1806 ], [ %b17.01031, %._crit_edge1020 ]
  br label %.preheader598

.preheader598:                                    ; preds = %.preheader598.loopexit, %.preheader599
  %len_x113.0.lcssa = phi i8 [ 1, %.preheader599 ], [ %len_x113.0.lcssa.ph, %.preheader598.loopexit ]
  %1762 = icmp sgt i32 %1214, 0
  br i1 %1762, label %.lr.ph1040, label %.preheader597

.lr.ph1040:                                       ; preds = %.preheader598
  %1763 = mul nsw i32 %1222, %5
  %1764 = add i32 %1203, %1222
  %1765 = mul nsw i32 %5, %1764
  br label %1812

.preheader593:                                    ; preds = %.preheader593.lr.ph, %1806
  %1766 = phi i32 [ 1, %.preheader593.lr.ph ], [ %1808, %1806 ]
  %b17.01031 = phi i8 [ 1, %.preheader593.lr.ph ], [ %1807, %1806 ]
  br i1 %1727, label %._crit_edge1020, label %.lr.ph1019

.lr.ph1019:                                       ; preds = %.preheader593
  %1767 = add i32 %1212, %1766
  %1768 = add i32 %1766, %x2.01087
  %1769 = mul nsw i32 %2, %1767
  br label %1770

; <label>:1770                                    ; preds = %.lr.ph1019, %1802
  %a18.01017 = phi i8 [ 0, %.lr.ph1019 ], [ %1803, %1802 ]
  %1771 = zext i8 %a18.01017 to i32
  %1772 = add nsw i32 %1771, %y3.01075
  %1773 = mul nsw i32 %4, %1772
  %1774 = add nsw i32 %1773, %z1.01092
  %1775 = mul nsw i32 %1774, %5
  %1776 = add i32 %1768, %1775
  %1777 = getelementptr inbounds i64* %6, i32 %1776
  %1778 = load i64* %1777, align 4, !tbaa !7
  %1779 = xor i64 %1778, %1227
  %1780 = and i64 %1779, 4222128157097983
  %1781 = icmp eq i64 %1780, 0
  br i1 %1781, label %1782, label %._crit_edge1020.loopexit

; <label>:1782                                    ; preds = %1770
  %1783 = add i32 %1772, %1161
  %.sum118 = add i32 %1783, %1769
  %1784 = getelementptr inbounds i8* %1163, i32 %.sum118
  %1785 = load i8* %1784, align 1, !tbaa !9
  %1786 = icmp eq i8 %1785, 0
  br i1 %1786, label %1787, label %._crit_edge1020.loopexit

; <label>:1787                                    ; preds = %1782
  br i1 %1202, label %1788, label %1794

; <label>:1788                                    ; preds = %1787
  %1789 = mul nsw i32 %1773, %5
  %1790 = add i32 %1768, %1789
  %1791 = getelementptr inbounds i64* %6, i32 %1790
  %1792 = load i64* %1791, align 4, !tbaa !7
  %1793 = icmp eq i64 %1792, 4294967295
  br i1 %1793, label %1802, label %1794

; <label>:1794                                    ; preds = %1788, %1787
  br i1 %1205, label %1795, label %._crit_edge1020.loopexit

; <label>:1795                                    ; preds = %1794
  %1796 = add i32 %1203, %1773
  %1797 = mul nsw i32 %5, %1796
  %1798 = add i32 %1768, %1797
  %1799 = getelementptr inbounds i64* %6, i32 %1798
  %1800 = load i64* %1799, align 4, !tbaa !7
  %1801 = icmp eq i64 %1800, 4294967295
  br i1 %1801, label %1802, label %._crit_edge1020.loopexit

; <label>:1802                                    ; preds = %1788, %1795
  %1803 = add i8 %a18.01017, 1
  %1804 = icmp ult i8 %1803, %len_y112.0.lcssa
  br i1 %1804, label %1770, label %._crit_edge1020.loopexit

._crit_edge1020.loopexit:                         ; preds = %1782, %1770, %1794, %1795, %1802
  %a18.0.lcssa.ph = phi i8 [ %1803, %1802 ], [ %a18.01017, %1795 ], [ %a18.01017, %1794 ], [ %a18.01017, %1770 ], [ %a18.01017, %1782 ]
  br label %._crit_edge1020

._crit_edge1020:                                  ; preds = %._crit_edge1020.loopexit, %.preheader593
  %a18.0.lcssa = phi i8 [ 0, %.preheader593 ], [ %a18.0.lcssa.ph, %._crit_edge1020.loopexit ]
  %1805 = icmp eq i8 %a18.0.lcssa, %len_y112.0.lcssa
  br i1 %1805, label %1806, label %.preheader598.loopexit

; <label>:1806                                    ; preds = %._crit_edge1020
  %1807 = add i8 %b17.01031, 1
  %1808 = zext i8 %1807 to i32
  %1809 = icmp slt i32 %1808, %1214
  br i1 %1809, label %.preheader593, label %.preheader598.loopexit

.preheader597.loopexit:                           ; preds = %1812, %1821, %1833, %1834, %1839
  %len_x215.0.lcssa.ph = phi i8 [ %1840, %1839 ], [ %a19.01039, %1834 ], [ %a19.01039, %1833 ], [ %a19.01039, %1821 ], [ %a19.01039, %1812 ]
  br label %.preheader597

.preheader597:                                    ; preds = %.preheader597.loopexit, %.preheader598
  %len_x215.0.lcssa = phi i8 [ 0, %.preheader598 ], [ %len_x215.0.lcssa.ph, %.preheader597.loopexit ]
  %1810 = icmp sgt i32 %1724, 1
  br i1 %1810, label %.preheader592.lr.ph, label %._crit_edge1065

.preheader592.lr.ph:                              ; preds = %.preheader597
  %1811 = icmp eq i8 %len_x215.0.lcssa, 0
  br label %.preheader592

; <label>:1812                                    ; preds = %.lr.ph1040, %1839
  %1813 = phi i32 [ 0, %.lr.ph1040 ], [ %1841, %1839 ]
  %a19.01039 = phi i8 [ 0, %.lr.ph1040 ], [ %1840, %1839 ]
  %1814 = add i32 %1813, %x2.01087
  %1815 = add i32 %1814, %1224
  %1816 = getelementptr inbounds i64* %6, i32 %1815
  %1817 = load i64* %1816, align 4, !tbaa !7
  %1818 = xor i64 %1817, %1227
  %1819 = and i64 %1818, 4222128157097983
  %1820 = icmp eq i64 %1819, 0
  br i1 %1820, label %1821, label %.preheader597.loopexit

; <label>:1821                                    ; preds = %1812
  %1822 = add i32 %1212, %1813
  %1823 = mul nsw i32 %2, %1822
  %.sum117 = add i32 %1720, %1823
  %1824 = getelementptr inbounds i8* %1163, i32 %.sum117
  %1825 = load i8* %1824, align 1, !tbaa !9
  %1826 = icmp eq i8 %1825, 0
  br i1 %1826, label %1827, label %.preheader597.loopexit

; <label>:1827                                    ; preds = %1821
  br i1 %1202, label %1828, label %1833

; <label>:1828                                    ; preds = %1827
  %1829 = add i32 %1814, %1763
  %1830 = getelementptr inbounds i64* %6, i32 %1829
  %1831 = load i64* %1830, align 4, !tbaa !7
  %1832 = icmp eq i64 %1831, 4294967295
  br i1 %1832, label %1839, label %1833

; <label>:1833                                    ; preds = %1828, %1827
  br i1 %1205, label %1834, label %.preheader597.loopexit

; <label>:1834                                    ; preds = %1833
  %1835 = add i32 %1814, %1765
  %1836 = getelementptr inbounds i64* %6, i32 %1835
  %1837 = load i64* %1836, align 4, !tbaa !7
  %1838 = icmp eq i64 %1837, 4294967295
  br i1 %1838, label %1839, label %.preheader597.loopexit

; <label>:1839                                    ; preds = %1834, %1828
  %1840 = add i8 %a19.01039, 1
  %1841 = zext i8 %1840 to i32
  %1842 = icmp slt i32 %1841, %1214
  br i1 %1842, label %1812, label %.preheader597.loopexit

.preheader592:                                    ; preds = %.preheader592.lr.ph, %1889
  %1843 = phi i32 [ 1, %.preheader592.lr.ph ], [ %1891, %1889 ]
  %b20.01064 = phi i8 [ 1, %.preheader592.lr.ph ], [ %1890, %1889 ]
  %1844 = add nsw i32 %1843, %y3.01075
  br i1 %1811, label %._crit_edge1061, label %.lr.ph1052

.lr.ph1052:                                       ; preds = %.preheader592
  %1845 = mul nsw i32 %4, %1844
  %1846 = add nsw i32 %1845, %z1.01092
  %1847 = mul nsw i32 %1846, %5
  %1848 = add i32 %1844, %1161
  %1849 = mul nsw i32 %1845, %5
  %1850 = add i32 %1203, %1845
  %1851 = mul nsw i32 %5, %1850
  br label %1852

; <label>:1852                                    ; preds = %.lr.ph1052, %1879
  %indvars.iv1337 = phi i32 [ 0, %.lr.ph1052 ], [ %indvars.iv.next1338, %1879 ]
  %1853 = phi i32 [ 0, %.lr.ph1052 ], [ %1882, %1879 ]
  %1854 = add i32 %1853, %x2.01087
  %1855 = add i32 %1854, %1847
  %1856 = getelementptr inbounds i64* %6, i32 %1855
  %1857 = load i64* %1856, align 4, !tbaa !7
  %1858 = xor i64 %1857, %1227
  %1859 = and i64 %1858, 4222128157097983
  %1860 = icmp eq i64 %1859, 0
  br i1 %1860, label %1861, label %._crit_edge1055

; <label>:1861                                    ; preds = %1852
  %1862 = add i32 %1212, %1853
  %1863 = mul nsw i32 %2, %1862
  %.sum116 = add i32 %1848, %1863
  %1864 = getelementptr inbounds i8* %1163, i32 %.sum116
  %1865 = load i8* %1864, align 1, !tbaa !9
  %1866 = icmp eq i8 %1865, 0
  br i1 %1866, label %1867, label %._crit_edge1053

; <label>:1867                                    ; preds = %1861
  br i1 %1202, label %1868, label %1873

; <label>:1868                                    ; preds = %1867
  %1869 = add i32 %1854, %1849
  %1870 = getelementptr inbounds i64* %6, i32 %1869
  %1871 = load i64* %1870, align 4, !tbaa !7
  %1872 = icmp eq i64 %1871, 4294967295
  br i1 %1872, label %1879, label %1873

; <label>:1873                                    ; preds = %1868, %1867
  br i1 %1205, label %1874, label %._crit_edge1057

; <label>:1874                                    ; preds = %1873
  %1875 = add i32 %1854, %1851
  %1876 = getelementptr inbounds i64* %6, i32 %1875
  %1877 = load i64* %1876, align 4, !tbaa !7
  %1878 = icmp eq i64 %1877, 4294967295
  br i1 %1878, label %1879, label %._crit_edge1059

; <label>:1879                                    ; preds = %1868, %1874
  %1880 = trunc i32 %indvars.iv1337 to i8
  %1881 = add i8 %1880, 1
  %1882 = zext i8 %1881 to i32
  %1883 = icmp ult i8 %1881, %len_x215.0.lcssa
  %indvars.iv.next1338 = add nuw nsw i32 %indvars.iv1337, 1
  br i1 %1883, label %1852, label %._crit_edge1061.loopexit

._crit_edge1053:                                  ; preds = %1861
  %indvars.iv1337.lcssa1870 = phi i32 [ %indvars.iv1337, %1861 ]
  %1884 = trunc i32 %indvars.iv1337.lcssa1870 to i8
  br label %._crit_edge1061

._crit_edge1055:                                  ; preds = %1852
  %indvars.iv1337.lcssa = phi i32 [ %indvars.iv1337, %1852 ]
  %1885 = trunc i32 %indvars.iv1337.lcssa to i8
  br label %._crit_edge1061

._crit_edge1057:                                  ; preds = %1873
  %indvars.iv1337.lcssa1871 = phi i32 [ %indvars.iv1337, %1873 ]
  %1886 = trunc i32 %indvars.iv1337.lcssa1871 to i8
  br label %._crit_edge1061

._crit_edge1059:                                  ; preds = %1874
  %indvars.iv1337.lcssa1872 = phi i32 [ %indvars.iv1337, %1874 ]
  %1887 = trunc i32 %indvars.iv1337.lcssa1872 to i8
  br label %._crit_edge1061

._crit_edge1061.loopexit:                         ; preds = %1879
  %.lcssa1874 = phi i8 [ %1881, %1879 ]
  br label %._crit_edge1061

._crit_edge1061:                                  ; preds = %._crit_edge1061.loopexit, %.preheader592, %._crit_edge1059, %._crit_edge1057, %._crit_edge1055, %._crit_edge1053
  %a21.0.lcssa = phi i8 [ %1884, %._crit_edge1053 ], [ %1885, %._crit_edge1055 ], [ %1886, %._crit_edge1057 ], [ %1887, %._crit_edge1059 ], [ 0, %.preheader592 ], [ %.lcssa1874, %._crit_edge1061.loopexit ]
  %1888 = icmp eq i8 %a21.0.lcssa, %len_x215.0.lcssa
  br i1 %1888, label %1889, label %._crit_edge1065.loopexit

; <label>:1889                                    ; preds = %._crit_edge1061
  %1890 = add i8 %b20.01064, 1
  %1891 = zext i8 %1890 to i32
  %1892 = icmp slt i32 %1891, %1724
  br i1 %1892, label %.preheader592, label %._crit_edge1065.loopexit

._crit_edge1065.loopexit:                         ; preds = %._crit_edge1061, %1889
  %len_y214.0.lcssa.ph = phi i8 [ %1890, %1889 ], [ %b20.01064, %._crit_edge1061 ]
  br label %._crit_edge1065

._crit_edge1065:                                  ; preds = %._crit_edge1065.loopexit, %.preheader597
  %len_y214.0.lcssa = phi i8 [ 1, %.preheader597 ], [ %len_y214.0.lcssa.ph, %._crit_edge1065.loopexit ]
  %1893 = zext i8 %len_y112.0.lcssa to i32
  %1894 = zext i8 %len_x113.0.lcssa to i32
  %1895 = mul nsw i32 %1894, %1893
  %1896 = zext i8 %len_y214.0.lcssa to i32
  %1897 = zext i8 %len_x215.0.lcssa to i32
  %1898 = mul nsw i32 %1896, %1897
  %1899 = icmp ugt i32 %1895, %1898
  %len_x113.0.len_x215.0 = select i1 %1899, i8 %len_x113.0.lcssa, i8 %len_x215.0.lcssa
  %len_y112.0.len_y214.0 = select i1 %1899, i8 %len_y112.0.lcssa, i8 %len_y214.0.lcssa
  %1900 = zext i8 %len_x113.0.len_x215.0 to i32
  %1901 = icmp eq i8 %len_x113.0.len_x215.0, 0
  br i1 %1901, label %._crit_edge1073, label %.preheader591.lr.ph

.preheader591.lr.ph:                              ; preds = %._crit_edge1065
  %1902 = icmp eq i8 %len_y112.0.len_y214.0, 0
  %1903 = add i8 %len_y112.0.len_y214.0, -1
  %1904 = zext i8 %1903 to i32
  %1905 = add nuw nsw i32 %1904, 1
  br label %.preheader591

.preheader591:                                    ; preds = %1908, %.preheader591.lr.ph
  %indvar1343 = phi i32 [ 0, %.preheader591.lr.ph ], [ %indvar.next1344, %1908 ]
  br i1 %1902, label %1908, label %.lr.ph1070

.lr.ph1070:                                       ; preds = %.preheader591
  %1906 = mul i32 %2, %indvar1343
  %1907 = add i32 %1220, %1906
  %scevgep1345 = getelementptr i8* %1163, i32 %1907
  call void @llvm.memset.p0i8.i32(i8* %scevgep1345, i8 1, i32 %1905, i32 1, i1 false)
  br label %1908

; <label>:1908                                    ; preds = %.preheader591, %.lr.ph1070
  %indvar.next1344 = add i32 %indvar1343, 1
  %lftr.wideiv1346 = trunc i32 %indvar.next1344 to i8
  %exitcond1347 = icmp eq i8 %lftr.wideiv1346, %len_x113.0.len_x215.0
  br i1 %exitcond1347, label %._crit_edge1073.loopexit, label %.preheader591

._crit_edge1073.loopexit:                         ; preds = %1908
  br label %._crit_edge1073

._crit_edge1073:                                  ; preds = %._crit_edge1073.loopexit, %._crit_edge1065
  %1909 = or i32 %1216, %y3.01075
  %1910 = icmp sgt i32 %1909, -1
  %1911 = icmp sgt i32 %2, %y3.01075
  %or.cond.i133 = and i1 %1218, %1911
  %or.cond1714 = and i1 %1910, %or.cond.i133
  %brmerge1716.demorgan = and i1 %or.cond1714, %1199
  br i1 %brmerge1716.demorgan, label %map_get.exit135, label %map_get.exit135.thread

map_get.exit135.thread:                           ; preds = %._crit_edge1073
  %1912 = getelementptr inbounds i8* %1159, i32 %chunk_shadow_index.4
  br label %1917

map_get.exit135:                                  ; preds = %._crit_edge1073
  %1913 = load i64* %1226, align 4, !tbaa !7
  %1914 = and i64 %1913, 268435456
  %1915 = icmp eq i64 %1914, 0
  %1916 = getelementptr inbounds i8* %1159, i32 %chunk_shadow_index.4
  br i1 %1915, label %1919, label %1917

; <label>:1917                                    ; preds = %map_get.exit135.thread, %map_get.exit135
  %1918 = phi i8* [ %1912, %map_get.exit135.thread ], [ %1916, %map_get.exit135 ]
  store i8 1, i8* %1918, align 1, !tbaa !9
  br label %1920

; <label>:1919                                    ; preds = %map_get.exit135
  store i8 0, i8* %1916, align 1, !tbaa !9
  br label %1920

; <label>:1920                                    ; preds = %1919, %1917
  %s26.0 = phi float [ 7.500000e-01, %1917 ], [ 1.000000e+00, %1919 ]
  %chunk_shadow_index.5 = add nsw i32 %chunk_shadow_index.4, 1
  %1921 = lshr i64 %1227, 50
  %1922 = and i64 %1921, 1
  %1923 = lshr i64 %1227, 49
  %1924 = and i64 %1923, 1
  %1925 = add nuw nsw i64 %1922, %1924
  %1926 = lshr i64 %1227, 51
  %1927 = and i64 %1926, 1
  %1928 = lshr i64 %1227, 48
  %1929 = and i64 %1928, 1
  %1930 = add nuw nsw i64 %1927, %1929
  %1931 = icmp ugt i64 %1925, %1930
  %1932 = and i32 %1230, 255
  %1933 = sitofp i32 %1932 to float
  %1934 = fmul fast float %1933, 0x3FE3333340000000
  %1935 = fmul fast float %1934, %s26.0
  br i1 %1931, label %1936, label %2053

; <label>:1936                                    ; preds = %1920
  %1937 = uitofp i64 %1922 to float
  %1938 = getelementptr inbounds i8* %1158, i32 %chunk_color_index.3
  %1939 = and i32 %1232, 255
  %1940 = sitofp i32 %1939 to float
  %1941 = fmul fast float %1940, 0x3FE3333340000000
  %1942 = fmul fast float %1941, %s26.0
  %1943 = and i32 %1234, 255
  %1944 = sitofp i32 %1943 to float
  %1945 = fmul fast float %1944, 0x3FE3333340000000
  %1946 = fmul fast float %1945, %s26.0
  %1947 = uitofp i64 %1927 to float
  %1948 = insertelement <2 x float> undef, float %1937, i32 0
  %1949 = insertelement <2 x float> %1948, float %1947, i32 1
  %1950 = insertelement <2 x float> undef, float %1935, i32 0
  %1951 = insertelement <2 x float> %1950, float %1935, i32 1
  %1952 = insertelement <2 x float> undef, float %1942, i32 0
  %1953 = insertelement <2 x float> %1952, float %1942, i32 1
  %1954 = insertelement <2 x float> undef, float %1946, i32 0
  %1955 = insertelement <2 x float> %1954, float %1946, i32 1
  %1956 = uitofp i64 %1924 to float
  %1957 = add nsw i32 %chunk_color_index.3, 8
  %1958 = getelementptr inbounds i8* %1158, i32 %1957
  %1959 = uitofp i64 %1929 to float
  %1960 = insertelement <2 x float> undef, float %1956, i32 0
  %1961 = insertelement <2 x float> %1960, float %1959, i32 1
  %1962 = shufflevector <2 x float> %1949, <2 x float> %1961, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1963 = fmul fast <4 x float> %1962, <float 0x3FD6666660000000, float 0x3FD6666660000000, float 0x3FD6666660000000, float 0x3FD6666660000000>
  %1964 = fadd fast <4 x float> %1963, <float 0x3FE4CCCCC0000000, float 0x3FE4CCCCC0000000, float 0x3FE4CCCCC0000000, float 0x3FE4CCCCC0000000>
  %1965 = shufflevector <2 x float> %1951, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %1966 = fmul fast <4 x float> %1964, %1965
  %1967 = extractelement <4 x float> %1966, i32 0
  %1968 = extractelement <4 x float> %1966, i32 1
  %1969 = fptosi float %1967 to i32
  %1970 = trunc i32 %1969 to i8
  %1971 = fptosi float %1968 to i32
  %1972 = trunc i32 %1971 to i8
  %1973 = insertelement <2 x i8> undef, i8 %1970, i32 0
  %1974 = extractelement <4 x float> %1966, i32 2
  %1975 = extractelement <4 x float> %1966, i32 3
  %1976 = fptosi float %1974 to i32
  %1977 = trunc i32 %1976 to i8
  %1978 = fptosi float %1975 to i32
  %1979 = trunc i32 %1978 to i8
  %1980 = shufflevector <2 x float> %1953, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %1981 = fmul fast <4 x float> %1964, %1980
  %1982 = extractelement <4 x float> %1981, i32 0
  %1983 = extractelement <4 x float> %1981, i32 1
  %1984 = fptosi float %1982 to i32
  %1985 = trunc i32 %1984 to i8
  %1986 = fptosi float %1983 to i32
  %1987 = trunc i32 %1986 to i8
  %1988 = insertelement <2 x i8> undef, i8 %1987, i32 0
  %1989 = insertelement <2 x i8> %1973, i8 %1985, i32 1
  %1990 = extractelement <4 x float> %1981, i32 2
  %1991 = extractelement <4 x float> %1981, i32 3
  %1992 = fptosi float %1990 to i32
  %1993 = trunc i32 %1992 to i8
  %1994 = insertelement <2 x i8> undef, i8 %1977, i32 0
  %1995 = insertelement <2 x i8> %1994, i8 %1993, i32 1
  %1996 = fptosi float %1991 to i32
  %1997 = trunc i32 %1996 to i8
  %1998 = shufflevector <2 x float> %1955, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %1999 = fmul fast <4 x float> %1964, %1998
  %2000 = extractelement <4 x float> %1999, i32 0
  %2001 = extractelement <4 x float> %1999, i32 1
  %2002 = fptosi float %2000 to i32
  %2003 = trunc i32 %2002 to i8
  %2004 = insertelement <2 x i8> undef, i8 %2003, i32 0
  %2005 = fptosi float %2001 to i32
  %2006 = trunc i32 %2005 to i8
  %2007 = insertelement <2 x i8> %2004, i8 %1972, i32 1
  %2008 = insertelement <2 x i8> %1988, i8 %2006, i32 1
  %2009 = shufflevector <2 x i8> %2007, <2 x i8> %1995, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2010 = shufflevector <2 x i8> %1989, <2 x i8> %2008, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2011 = shufflevector <4 x i8> %2010, <4 x i8> %2009, <8 x i32> <i32 0, i32 1, i32 4, i32 5, i32 2, i32 3, i32 6, i32 7>
  %2012 = bitcast i8* %1938 to <8 x i8>*
  store <8 x i8> %2011, <8 x i8>* %2012, align 1, !tbaa !9
  %2013 = extractelement <4 x float> %1999, i32 2
  %2014 = extractelement <4 x float> %1999, i32 3
  %2015 = fptosi float %2013 to i32
  %2016 = trunc i32 %2015 to i8
  %2017 = insertelement <2 x i8> undef, i8 %2016, i32 0
  %2018 = insertelement <2 x i8> %2017, i8 %1979, i32 1
  %2019 = bitcast i8* %1958 to <4 x i8>*
  %2020 = fptosi float %2014 to i32
  %2021 = trunc i32 %2020 to i8
  %2022 = add nsw i32 %chunk_color_index.3, 12
  %2023 = insertelement <2 x i8> undef, i8 %1997, i32 0
  %2024 = insertelement <2 x i8> %2023, i8 %2021, i32 1
  %2025 = shufflevector <2 x i8> %2018, <2 x i8> %2024, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i8> %2025, <4 x i8>* %2019, align 1, !tbaa !9
  %2026 = getelementptr inbounds i16* %1156, i32 %chunk_vertex_index.3
  %2027 = trunc i32 %y3.01075 to i16
  %2028 = insertelement <2 x i16> undef, i16 %1217, i32 0
  %2029 = insertelement <2 x i16> %2028, i16 %2027, i32 1
  %2030 = add nsw i32 %1900, %x2.01087
  %2031 = trunc i32 %2030 to i16
  %2032 = insertelement <2 x i16> undef, i16 %1204, i32 0
  %2033 = insertelement <2 x i16> %2032, i16 %2031, i32 1
  %2034 = insertelement <2 x i16> undef, i16 %2027, i32 0
  %2035 = insertelement <2 x i16> %2034, i16 %1204, i32 1
  %2036 = zext i8 %len_y112.0.len_y214.0 to i32
  %2037 = add nsw i32 %2036, %y3.01075
  %2038 = trunc i32 %2037 to i16
  %2039 = add nsw i32 %chunk_vertex_index.3, 8
  %2040 = insertelement <2 x i16> undef, i16 %2031, i32 0
  %2041 = insertelement <2 x i16> %2040, i16 %2038, i32 1
  %2042 = shufflevector <2 x i16> %2033, <2 x i16> %2041, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2043 = shufflevector <2 x i16> %2029, <2 x i16> %2035, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2044 = shufflevector <4 x i16> %2043, <4 x i16> %2042, <8 x i32> <i32 0, i32 1, i32 4, i32 5, i32 2, i32 3, i32 6, i32 7>
  %2045 = bitcast i16* %2026 to <8 x i16>*
  store <8 x i16> %2044, <8 x i16>* %2045, align 2, !tbaa !19
  %2046 = getelementptr inbounds i16* %1156, i32 %2039
  %2047 = insertelement <2 x i16> %2032, i16 %1217, i32 1
  %2048 = bitcast i16* %2046 to <4 x i16>*
  %2049 = add nsw i32 %chunk_vertex_index.3, 12
  %2050 = insertelement <2 x i16> undef, i16 %2038, i32 0
  %2051 = insertelement <2 x i16> %2050, i16 %1204, i32 1
  %2052 = shufflevector <2 x i16> %2047, <2 x i16> %2051, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i16> %2052, <4 x i16>* %2048, align 2, !tbaa !19
  br label %2170

; <label>:2053                                    ; preds = %1920
  %2054 = uitofp i64 %1927 to float
  %2055 = getelementptr inbounds i8* %1158, i32 %chunk_color_index.3
  %2056 = and i32 %1232, 255
  %2057 = sitofp i32 %2056 to float
  %2058 = fmul fast float %2057, 0x3FE3333340000000
  %2059 = fmul fast float %2058, %s26.0
  %2060 = and i32 %1234, 255
  %2061 = sitofp i32 %2060 to float
  %2062 = fmul fast float %2061, 0x3FE3333340000000
  %2063 = fmul fast float %2062, %s26.0
  %2064 = uitofp i64 %1924 to float
  %2065 = insertelement <2 x float> undef, float %2054, i32 0
  %2066 = insertelement <2 x float> %2065, float %2064, i32 1
  %2067 = insertelement <2 x float> undef, float %1935, i32 0
  %2068 = insertelement <2 x float> %2067, float %1935, i32 1
  %2069 = insertelement <2 x float> undef, float %2059, i32 0
  %2070 = insertelement <2 x float> %2069, float %2059, i32 1
  %2071 = insertelement <2 x float> undef, float %2063, i32 0
  %2072 = insertelement <2 x float> %2071, float %2063, i32 1
  %2073 = uitofp i64 %1929 to float
  %2074 = add nsw i32 %chunk_color_index.3, 8
  %2075 = getelementptr inbounds i8* %1158, i32 %2074
  %2076 = uitofp i64 %1922 to float
  %2077 = insertelement <2 x float> undef, float %2073, i32 0
  %2078 = insertelement <2 x float> %2077, float %2076, i32 1
  %2079 = shufflevector <2 x float> %2066, <2 x float> %2078, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2080 = fmul fast <4 x float> %2079, <float 0x3FD6666660000000, float 0x3FD6666660000000, float 0x3FD6666660000000, float 0x3FD6666660000000>
  %2081 = fadd fast <4 x float> %2080, <float 0x3FE4CCCCC0000000, float 0x3FE4CCCCC0000000, float 0x3FE4CCCCC0000000, float 0x3FE4CCCCC0000000>
  %2082 = shufflevector <2 x float> %2068, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %2083 = fmul fast <4 x float> %2081, %2082
  %2084 = extractelement <4 x float> %2083, i32 0
  %2085 = extractelement <4 x float> %2083, i32 1
  %2086 = fptosi float %2084 to i32
  %2087 = trunc i32 %2086 to i8
  %2088 = fptosi float %2085 to i32
  %2089 = trunc i32 %2088 to i8
  %2090 = insertelement <2 x i8> undef, i8 %2087, i32 0
  %2091 = extractelement <4 x float> %2083, i32 2
  %2092 = extractelement <4 x float> %2083, i32 3
  %2093 = fptosi float %2091 to i32
  %2094 = trunc i32 %2093 to i8
  %2095 = fptosi float %2092 to i32
  %2096 = trunc i32 %2095 to i8
  %2097 = shufflevector <2 x float> %2070, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %2098 = fmul fast <4 x float> %2081, %2097
  %2099 = extractelement <4 x float> %2098, i32 0
  %2100 = extractelement <4 x float> %2098, i32 1
  %2101 = fptosi float %2099 to i32
  %2102 = trunc i32 %2101 to i8
  %2103 = fptosi float %2100 to i32
  %2104 = trunc i32 %2103 to i8
  %2105 = insertelement <2 x i8> undef, i8 %2104, i32 0
  %2106 = insertelement <2 x i8> %2090, i8 %2102, i32 1
  %2107 = extractelement <4 x float> %2098, i32 2
  %2108 = extractelement <4 x float> %2098, i32 3
  %2109 = fptosi float %2107 to i32
  %2110 = trunc i32 %2109 to i8
  %2111 = insertelement <2 x i8> undef, i8 %2094, i32 0
  %2112 = insertelement <2 x i8> %2111, i8 %2110, i32 1
  %2113 = fptosi float %2108 to i32
  %2114 = trunc i32 %2113 to i8
  %2115 = shufflevector <2 x float> %2072, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %2116 = fmul fast <4 x float> %2081, %2115
  %2117 = extractelement <4 x float> %2116, i32 0
  %2118 = extractelement <4 x float> %2116, i32 1
  %2119 = fptosi float %2117 to i32
  %2120 = trunc i32 %2119 to i8
  %2121 = insertelement <2 x i8> undef, i8 %2120, i32 0
  %2122 = fptosi float %2118 to i32
  %2123 = trunc i32 %2122 to i8
  %2124 = insertelement <2 x i8> %2121, i8 %2089, i32 1
  %2125 = insertelement <2 x i8> %2105, i8 %2123, i32 1
  %2126 = shufflevector <2 x i8> %2124, <2 x i8> %2112, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2127 = shufflevector <2 x i8> %2106, <2 x i8> %2125, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2128 = shufflevector <4 x i8> %2127, <4 x i8> %2126, <8 x i32> <i32 0, i32 1, i32 4, i32 5, i32 2, i32 3, i32 6, i32 7>
  %2129 = bitcast i8* %2055 to <8 x i8>*
  store <8 x i8> %2128, <8 x i8>* %2129, align 1, !tbaa !9
  %2130 = extractelement <4 x float> %2116, i32 2
  %2131 = extractelement <4 x float> %2116, i32 3
  %2132 = fptosi float %2130 to i32
  %2133 = trunc i32 %2132 to i8
  %2134 = insertelement <2 x i8> undef, i8 %2133, i32 0
  %2135 = insertelement <2 x i8> %2134, i8 %2096, i32 1
  %2136 = bitcast i8* %2075 to <4 x i8>*
  %2137 = fptosi float %2131 to i32
  %2138 = trunc i32 %2137 to i8
  %2139 = add nsw i32 %chunk_color_index.3, 12
  %2140 = insertelement <2 x i8> undef, i8 %2114, i32 0
  %2141 = insertelement <2 x i8> %2140, i8 %2138, i32 1
  %2142 = shufflevector <2 x i8> %2135, <2 x i8> %2141, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i8> %2142, <4 x i8>* %2136, align 1, !tbaa !9
  %2143 = add nsw i32 %1900, %x2.01087
  %2144 = trunc i32 %2143 to i16
  %2145 = getelementptr inbounds i16* %1156, i32 %chunk_vertex_index.3
  %2146 = trunc i32 %y3.01075 to i16
  %2147 = insertelement <2 x i16> undef, i16 %2144, i32 0
  %2148 = insertelement <2 x i16> %2147, i16 %2146, i32 1
  %2149 = insertelement <2 x i16> undef, i16 %1204, i32 0
  %2150 = insertelement <2 x i16> %2149, i16 %2144, i32 1
  %2151 = zext i8 %len_y112.0.len_y214.0 to i32
  %2152 = add nsw i32 %2151, %y3.01075
  %2153 = trunc i32 %2152 to i16
  %2154 = insertelement <2 x i16> undef, i16 %2153, i32 0
  %2155 = insertelement <2 x i16> %2154, i16 %1204, i32 1
  %2156 = add nsw i32 %chunk_vertex_index.3, 8
  %2157 = insertelement <2 x i16> undef, i16 %1217, i32 0
  %2158 = insertelement <2 x i16> %2157, i16 %2153, i32 1
  %2159 = shufflevector <2 x i16> %2150, <2 x i16> %2158, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2160 = shufflevector <2 x i16> %2148, <2 x i16> %2155, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2161 = shufflevector <4 x i16> %2160, <4 x i16> %2159, <8 x i32> <i32 0, i32 1, i32 4, i32 5, i32 2, i32 3, i32 6, i32 7>
  %2162 = bitcast i16* %2145 to <8 x i16>*
  store <8 x i16> %2161, <8 x i16>* %2162, align 2, !tbaa !19
  %2163 = getelementptr inbounds i16* %1156, i32 %2156
  %2164 = insertelement <2 x i16> %2149, i16 %1217, i32 1
  %2165 = bitcast i16* %2163 to <4 x i16>*
  %2166 = add nsw i32 %chunk_vertex_index.3, 12
  %2167 = insertelement <2 x i16> undef, i16 %2146, i32 0
  %2168 = insertelement <2 x i16> %2167, i16 %1204, i32 1
  %2169 = shufflevector <2 x i16> %2164, <2 x i16> %2168, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i16> %2169, <4 x i16>* %2165, align 2, !tbaa !19
  br label %2170

; <label>:2170                                    ; preds = %1219, %1719, %2053, %1936, %1712, %1711
  %chunk_shadow_index.6 = phi i32 [ %chunk_shadow_index.5, %1936 ], [ %chunk_shadow_index.5, %2053 ], [ %chunk_shadow_index.4, %1719 ], [ %chunk_shadow_index.4, %1712 ], [ %chunk_shadow_index.4, %1711 ], [ %chunk_shadow_index.21077, %1219 ]
  %chunk_color_index.4 = phi i32 [ %2022, %1936 ], [ %2139, %2053 ], [ %chunk_color_index.3, %1719 ], [ %chunk_color_index.3, %1712 ], [ %chunk_color_index.3, %1711 ], [ %chunk_color_index.21080, %1219 ]
  %chunk_vertex_index.4 = phi i32 [ %2049, %1936 ], [ %2166, %2053 ], [ %chunk_vertex_index.3, %1719 ], [ %chunk_vertex_index.3, %1712 ], [ %chunk_vertex_index.3, %1711 ], [ %chunk_vertex_index.21081, %1219 ]
  %2171 = add nsw i32 %y3.01075, 1
  %2172 = icmp slt i32 %2171, %2
  br i1 %2172, label %1219, label %._crit_edge1083.loopexit

._crit_edge1083.loopexit:                         ; preds = %2170
  %chunk_vertex_index.4.lcssa = phi i32 [ %chunk_vertex_index.4, %2170 ]
  %chunk_color_index.4.lcssa = phi i32 [ %chunk_color_index.4, %2170 ]
  %chunk_shadow_index.6.lcssa = phi i32 [ %chunk_shadow_index.6, %2170 ]
  br label %._crit_edge1083

._crit_edge1083:                                  ; preds = %._crit_edge1083.loopexit, %.preheader603
  %chunk_vertex_index.2.lcssa = phi i32 [ %chunk_vertex_index.11091, %.preheader603 ], [ %chunk_vertex_index.4.lcssa, %._crit_edge1083.loopexit ]
  %chunk_color_index.2.lcssa = phi i32 [ %chunk_color_index.11090, %.preheader603 ], [ %chunk_color_index.4.lcssa, %._crit_edge1083.loopexit ]
  %chunk_shadow_index.2.lcssa = phi i32 [ %chunk_shadow_index.11089, %.preheader603 ], [ %chunk_shadow_index.6.lcssa, %._crit_edge1083.loopexit ]
  %2173 = add nsw i32 %x2.01087, 1
  %2174 = icmp sgt i32 %1, %2173
  %indvar.next1333 = add i32 %indvar1332, 1
  br i1 %2174, label %.preheader603, label %2175

; <label>:2175                                    ; preds = %._crit_edge1083
  %chunk_shadow_index.2.lcssa.lcssa = phi i32 [ %chunk_shadow_index.2.lcssa, %._crit_edge1083 ]
  %chunk_color_index.2.lcssa.lcssa = phi i32 [ %chunk_color_index.2.lcssa, %._crit_edge1083 ]
  %chunk_vertex_index.2.lcssa.lcssa = phi i32 [ %chunk_vertex_index.2.lcssa, %._crit_edge1083 ]
  %2176 = icmp slt i32 %1203, %1164
  br i1 %2176, label %.preheader605, label %.preheader590

.preheader589:                                    ; preds = %.preheader590, %3132
  %chunk_vertex_index.5931 = phi i32 [ %chunk_vertex_index.2.lcssa.lcssa.lcssa, %.preheader590 ], [ %chunk_vertex_index.7.lcssa.lcssa, %3132 ]
  %chunk_color_index.5930 = phi i32 [ %chunk_color_index.2.lcssa.lcssa.lcssa, %.preheader590 ], [ %chunk_color_index.7.lcssa.lcssa, %3132 ]
  %x27.0929 = phi i32 [ %chunk_x, %.preheader590 ], [ %2199, %3132 ]
  %chunk_shadow_index.7928 = phi i32 [ %chunk_shadow_index.2.lcssa.lcssa.lcssa, %.preheader590 ], [ %chunk_shadow_index.9.lcssa.lcssa, %3132 ]
  br i1 %1184, label %.lr.ph769.preheader, label %.preheader588

.lr.ph769.preheader:                              ; preds = %.preheader589
  %backedge.overflow1777 = icmp eq i32 %smax1776, 0
  br i1 %backedge.overflow1777, label %.lr.ph769.preheader1839, label %overflow.checked1789

.lr.ph769.preheader1839:                          ; preds = %middle.block1781, %.lr.ph769.preheader
  %k28.0768.ph = phi i32 [ 0, %.lr.ph769.preheader ], [ %resume.val1799, %middle.block1781 ]
  br label %.lr.ph769

overflow.checked1789:                             ; preds = %.lr.ph769.preheader
  %n.vec1786 = and i32 %smax1776, -32
  %cmp.zero1788 = icmp eq i32 %n.vec1786, 0
  br i1 %cmp.zero1788, label %middle.block1781, label %vector.memcheck1798

vector.memcheck1798:                              ; preds = %overflow.checked1789
  %bound01794 = icmp ule i8* %1163, %scevgep1793
  %bound11795 = icmp ule i8* %scevgep1792, %scevgep1791
  %memcheck.conflict1797 = and i1 %bound01794, %bound11795
  br i1 %memcheck.conflict1797, label %middle.block1781, label %vector.body1780.preheader

vector.body1780.preheader:                        ; preds = %vector.memcheck1798
  br label %vector.body1780

vector.body1780:                                  ; preds = %vector.body1780.preheader, %vector.body1780
  %index1783 = phi i32 [ %index.next1804, %vector.body1780 ], [ 0, %vector.body1780.preheader ]
  %2177 = getelementptr inbounds i8* %1163, i32 %index1783
  %2178 = bitcast i8* %2177 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %2178, align 1, !tbaa !9
  %.sum18301831 = or i32 %index1783, 16
  %2179 = getelementptr i8* %1163, i32 %.sum18301831
  %2180 = bitcast i8* %2179 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %2180, align 1, !tbaa !9
  %2181 = add i32 %index1783, %1161
  %2182 = getelementptr inbounds i8* %1163, i32 %2181
  %2183 = bitcast i8* %2182 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %2183, align 1, !tbaa !9
  %.sum1832 = add i32 %2181, 16
  %2184 = getelementptr i8* %1163, i32 %.sum1832
  %2185 = bitcast i8* %2184 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %2185, align 1, !tbaa !9
  %index.next1804 = add i32 %index1783, 32
  %2186 = icmp eq i32 %index.next1804, %n.vec1786
  br i1 %2186, label %middle.block1781.loopexit, label %vector.body1780, !llvm.loop !21

middle.block1781.loopexit:                        ; preds = %vector.body1780
  br label %middle.block1781

middle.block1781:                                 ; preds = %middle.block1781.loopexit, %vector.memcheck1798, %overflow.checked1789
  %resume.val1799 = phi i32 [ 0, %overflow.checked1789 ], [ 0, %vector.memcheck1798 ], [ %n.vec1786, %middle.block1781.loopexit ]
  %cmp.n1803 = icmp eq i32 %smax1776, %resume.val1799
  br i1 %cmp.n1803, label %.preheader588, label %.lr.ph769.preheader1839

.preheader574:                                    ; preds = %3132
  %chunk_vertex_index.7.lcssa.lcssa.lcssa = phi i32 [ %chunk_vertex_index.7.lcssa.lcssa, %3132 ]
  %chunk_color_index.7.lcssa.lcssa.lcssa = phi i32 [ %chunk_color_index.7.lcssa.lcssa, %3132 ]
  %chunk_shadow_index.9.lcssa.lcssa.lcssa = phi i32 [ %chunk_shadow_index.9.lcssa.lcssa, %3132 ]
  %2187 = load i32* @map_size_y, align 4, !tbaa !1
  %2188 = icmp sgt i32 %2187, 0
  br i1 %2188, label %.preheader573.lr.ph, label %._crit_edge765

.preheader573.lr.ph:                              ; preds = %.preheader574
  %2189 = load i32* @map_size_z, align 4, !tbaa !1
  %2190 = load i32* @map_size_x, align 4, !tbaa !1
  %2191 = load i64** @map_colors, align 4, !tbaa !5
  %2192 = add nsw i32 %2187, -1
  br label %vector.ph1815

.preheader588.loopexit:                           ; preds = %.lr.ph769
  br label %.preheader588

.preheader588:                                    ; preds = %.preheader588.loopexit, %middle.block1781, %.preheader589
  %2193 = icmp eq i32 %x27.0929, 0
  %2194 = trunc i32 %x27.0929 to i16
  %2195 = icmp sgt i32 %1186, %x27.0929
  %2196 = icmp sgt i32 %x27.0929, 0
  %2197 = add i32 %x27.0929, -1
  %2198 = icmp eq i32 %x27.0929, %1188
  %2199 = add i32 %x27.0929, 1
  %2200 = trunc i32 %2199 to i16
  %2201 = icmp slt i32 %x27.0929, %1188
  br label %.preheader587

.lr.ph769:                                        ; preds = %.lr.ph769.preheader1839, %.lr.ph769
  %k28.0768 = phi i32 [ %2204, %.lr.ph769 ], [ %k28.0768.ph, %.lr.ph769.preheader1839 ]
  %2202 = getelementptr inbounds i8* %1163, i32 %k28.0768
  store i8 0, i8* %2202, align 1, !tbaa !9
  %.sum113 = add i32 %k28.0768, %1161
  %2203 = getelementptr inbounds i8* %1163, i32 %.sum113
  store i8 0, i8* %2203, align 1, !tbaa !9
  %2204 = add nsw i32 %k28.0768, 1
  %2205 = icmp slt i32 %2204, %1189
  br i1 %2205, label %.lr.ph769, label %.preheader588.loopexit, !llvm.loop !22

.preheader587:                                    ; preds = %.preheader588, %._crit_edge919
  %indvar1306 = phi i32 [ 0, %.preheader588 ], [ %indvar.next1307, %._crit_edge919 ]
  %chunk_vertex_index.6927 = phi i32 [ %chunk_vertex_index.5931, %.preheader588 ], [ %chunk_vertex_index.7.lcssa, %._crit_edge919 ]
  %chunk_color_index.6926 = phi i32 [ %chunk_color_index.5930, %.preheader588 ], [ %chunk_color_index.7.lcssa, %._crit_edge919 ]
  %z29.0924 = phi i32 [ %chunk_y, %.preheader588 ], [ %3130, %._crit_edge919 ]
  %chunk_shadow_index.8923 = phi i32 [ %chunk_shadow_index.7928, %.preheader588 ], [ %chunk_shadow_index.9.lcssa, %._crit_edge919 ]
  %2206 = mul i32 %1183, %indvar1306
  %2207 = add i32 %1165, %2206
  br i1 %1184, label %.lr.ph918, label %._crit_edge919

.lr.ph918:                                        ; preds = %.preheader587
  %2208 = sub i32 %z29.0924, %chunk_y
  %2209 = mul nsw i32 %1183, %2208
  %2210 = sub nsw i32 %1164, %z29.0924
  %2211 = icmp sgt i32 %2210, 1
  %2212 = or i32 %z29.0924, %x27.0929
  %2213 = trunc i32 %z29.0924 to i16
  %2214 = icmp sgt i32 %1185, %z29.0924
  br label %2215

; <label>:2215                                    ; preds = %3128, %.lr.ph918
  %chunk_vertex_index.7917 = phi i32 [ %chunk_vertex_index.6927, %.lr.ph918 ], [ %chunk_vertex_index.9, %3128 ]
  %chunk_color_index.7916 = phi i32 [ %chunk_color_index.6926, %.lr.ph918 ], [ %chunk_color_index.9, %3128 ]
  %y30.0914 = phi i32 [ 0, %.lr.ph918 ], [ %3129, %3128 ]
  %chunk_shadow_index.9911 = phi i32 [ %chunk_shadow_index.8923, %.lr.ph918 ], [ %chunk_shadow_index.13, %3128 ]
  %2216 = add i32 %2207, %y30.0914
  %2217 = add i32 %2206, %y30.0914
  %2218 = mul nsw i32 %1185, %y30.0914
  %2219 = add nsw i32 %2218, %z29.0924
  %2220 = mul nsw i32 %2219, %1186
  %2221 = add nsw i32 %2220, %x27.0929
  %2222 = getelementptr inbounds i64* %1187, i32 %2221
  %2223 = load i64* %2222, align 4, !tbaa !7
  %2224 = icmp eq i64 %2223, 4294967295
  br i1 %2224, label %3128, label %2225

; <label>:2225                                    ; preds = %2215
  %2226 = trunc i64 %2223 to i32
  %2227 = lshr i64 %2223, 8
  %2228 = trunc i64 %2227 to i32
  %2229 = lshr i64 %2223, 16
  %2230 = trunc i64 %2229 to i32
  br i1 %2193, label %2231, label %2236

; <label>:2231                                    ; preds = %2225
  %2232 = add nsw i32 %1188, %2220
  %2233 = getelementptr inbounds i64* %1187, i32 %2232
  %2234 = load i64* %2233, align 4, !tbaa !7
  %2235 = icmp eq i64 %2234, 4294967295
  br i1 %2235, label %2242, label %.thread458

; <label>:2236                                    ; preds = %2225
  br i1 %2196, label %2237, label %.thread458

; <label>:2237                                    ; preds = %2236
  %2238 = add i32 %2197, %2220
  %2239 = getelementptr inbounds i64* %1187, i32 %2238
  %2240 = load i64* %2239, align 4, !tbaa !7
  %2241 = icmp eq i64 %2240, 4294967295
  br i1 %2241, label %2242, label %.thread458

; <label>:2242                                    ; preds = %2237, %2231
  %2243 = add nsw i32 %2209, %y30.0914
  %2244 = getelementptr inbounds i8* %1163, i32 %2243
  %2245 = load i8* %2244, align 1, !tbaa !9
  %2246 = icmp eq i8 %2245, 0
  br i1 %2246, label %.preheader586, label %.thread458

.preheader586:                                    ; preds = %2242
  %2247 = sub nsw i32 %1183, %y30.0914
  %2248 = icmp sgt i32 %2247, 0
  br i1 %2248, label %.lr.ph772.preheader, label %.thread459.preheader

.lr.ph772.preheader:                              ; preds = %.preheader586
  br label %.lr.ph772

.lr.ph772:                                        ; preds = %.lr.ph772.preheader, %2278
  %2249 = phi i32 [ %2280, %2278 ], [ 0, %.lr.ph772.preheader ]
  %a37.0771 = phi i8 [ %2279, %2278 ], [ 0, %.lr.ph772.preheader ]
  %2250 = add nsw i32 %2249, %y30.0914
  %2251 = mul nsw i32 %1185, %2250
  %2252 = add nsw i32 %2251, %z29.0924
  %2253 = mul nsw i32 %2252, %1186
  %2254 = add nsw i32 %2253, %x27.0929
  %2255 = getelementptr inbounds i64* %1187, i32 %2254
  %2256 = load i64* %2255, align 4, !tbaa !7
  %2257 = xor i64 %2256, %2223
  %2258 = and i64 %2257, 263886162886655
  %2259 = icmp eq i64 %2258, 0
  br i1 %2259, label %2260, label %.thread459.preheader.loopexit

; <label>:2260                                    ; preds = %.lr.ph772
  %2261 = add nsw i32 %2250, %2209
  %2262 = getelementptr inbounds i8* %1163, i32 %2261
  %2263 = load i8* %2262, align 1, !tbaa !9
  %2264 = icmp eq i8 %2263, 0
  br i1 %2264, label %2265, label %.thread459.preheader.loopexit

; <label>:2265                                    ; preds = %2260
  br i1 %2193, label %2266, label %2272

; <label>:2266                                    ; preds = %2265
  %2267 = add nsw i32 %1188, %2253
  %2268 = getelementptr inbounds i64* %1187, i32 %2267
  %2269 = load i64* %2268, align 4, !tbaa !7
  %2270 = icmp eq i64 %2269, 4294967295
  br i1 %2270, label %2278, label %.thread459.preheader.loopexit

.thread459.preheader.loopexit:                    ; preds = %.lr.ph772, %2260, %2272, %2273, %2278, %2266
  %len_y135.0.lcssa.ph = phi i8 [ %a37.0771, %2266 ], [ %2279, %2278 ], [ %a37.0771, %2273 ], [ %a37.0771, %2272 ], [ %a37.0771, %2260 ], [ %a37.0771, %.lr.ph772 ]
  br label %.thread459.preheader

.thread459.preheader:                             ; preds = %.thread459.preheader.loopexit, %.preheader586
  %len_y135.0.lcssa = phi i8 [ 0, %.preheader586 ], [ %len_y135.0.lcssa.ph, %.thread459.preheader.loopexit ]
  br i1 %2211, label %.preheader580.lr.ph, label %.preheader585

.preheader580.lr.ph:                              ; preds = %.thread459.preheader
  %2271 = icmp eq i8 %len_y135.0.lcssa, 0
  br label %.preheader580

; <label>:2272                                    ; preds = %2265
  br i1 %2196, label %2273, label %.thread459.preheader.loopexit

; <label>:2273                                    ; preds = %2272
  %2274 = add i32 %2197, %2253
  %2275 = getelementptr inbounds i64* %1187, i32 %2274
  %2276 = load i64* %2275, align 4, !tbaa !7
  %2277 = icmp eq i64 %2276, 4294967295
  br i1 %2277, label %2278, label %.thread459.preheader.loopexit

; <label>:2278                                    ; preds = %2273, %2266
  %2279 = add i8 %a37.0771, 1
  %2280 = zext i8 %2279 to i32
  %2281 = icmp slt i32 %2280, %2247
  br i1 %2281, label %.lr.ph772, label %.thread459.preheader.loopexit

.preheader585.loopexit:                           ; preds = %.thread460, %.thread459
  %len_z1.0.lcssa.ph = phi i8 [ %2320, %.thread459 ], [ %b38.0798, %.thread460 ]
  br label %.preheader585

.preheader585:                                    ; preds = %.preheader585.loopexit, %.thread459.preheader
  %len_z1.0.lcssa = phi i8 [ 1, %.thread459.preheader ], [ %len_z1.0.lcssa.ph, %.preheader585.loopexit ]
  %2282 = icmp sgt i32 %2210, 0
  br i1 %2282, label %.lr.ph805.preheader, label %.thread461.preheader

.lr.ph805.preheader:                              ; preds = %.preheader585
  br label %.lr.ph805

.preheader580:                                    ; preds = %.preheader580.lr.ph, %.thread459
  %2283 = phi i32 [ 1, %.preheader580.lr.ph ], [ %2321, %.thread459 ]
  %b38.0798 = phi i8 [ 1, %.preheader580.lr.ph ], [ %2320, %.thread459 ]
  br i1 %2271, label %.thread460, label %.lr.ph785

.lr.ph785:                                        ; preds = %.preheader580
  %2284 = add i32 %2208, %2283
  %2285 = add i32 %2283, %z29.0924
  %2286 = mul nsw i32 %1183, %2284
  br label %2287

; <label>:2287                                    ; preds = %.lr.ph785, %2316
  %a39.0784 = phi i8 [ 0, %.lr.ph785 ], [ %2317, %2316 ]
  %2288 = zext i8 %a39.0784 to i32
  %2289 = add nsw i32 %2288, %y30.0914
  %2290 = mul nsw i32 %1185, %2289
  %2291 = add i32 %2285, %2290
  %2292 = mul nsw i32 %2291, %1186
  %2293 = add nsw i32 %2292, %x27.0929
  %2294 = getelementptr inbounds i64* %1187, i32 %2293
  %2295 = load i64* %2294, align 4, !tbaa !7
  %2296 = xor i64 %2295, %2223
  %2297 = and i64 %2296, 263886162886655
  %2298 = icmp eq i64 %2297, 0
  br i1 %2298, label %2299, label %.thread460.loopexit

; <label>:2299                                    ; preds = %2287
  %2300 = add nsw i32 %2286, %2289
  %2301 = getelementptr inbounds i8* %1163, i32 %2300
  %2302 = load i8* %2301, align 1, !tbaa !9
  %2303 = icmp eq i8 %2302, 0
  br i1 %2303, label %2304, label %.thread460.loopexit

; <label>:2304                                    ; preds = %2299
  br i1 %2193, label %2305, label %2310

; <label>:2305                                    ; preds = %2304
  %2306 = add nsw i32 %1188, %2292
  %2307 = getelementptr inbounds i64* %1187, i32 %2306
  %2308 = load i64* %2307, align 4, !tbaa !7
  %2309 = icmp eq i64 %2308, 4294967295
  br i1 %2309, label %2316, label %.thread460.loopexit

; <label>:2310                                    ; preds = %2304
  br i1 %2196, label %2311, label %.thread460.loopexit

; <label>:2311                                    ; preds = %2310
  %2312 = add i32 %2197, %2292
  %2313 = getelementptr inbounds i64* %1187, i32 %2312
  %2314 = load i64* %2313, align 4, !tbaa !7
  %2315 = icmp eq i64 %2314, 4294967295
  br i1 %2315, label %2316, label %.thread460.loopexit

; <label>:2316                                    ; preds = %2305, %2311
  %2317 = add i8 %a39.0784, 1
  %2318 = icmp ult i8 %2317, %len_y135.0.lcssa
  br i1 %2318, label %2287, label %.thread460.loopexit

.thread460.loopexit:                              ; preds = %2305, %2299, %2287, %2310, %2311, %2316
  %a39.0.lcssa.ph = phi i8 [ %2317, %2316 ], [ %a39.0784, %2311 ], [ %a39.0784, %2310 ], [ %a39.0784, %2287 ], [ %a39.0784, %2299 ], [ %a39.0784, %2305 ]
  br label %.thread460

.thread460:                                       ; preds = %.thread460.loopexit, %.preheader580
  %a39.0.lcssa = phi i8 [ 0, %.preheader580 ], [ %a39.0.lcssa.ph, %.thread460.loopexit ]
  %2319 = icmp eq i8 %a39.0.lcssa, %len_y135.0.lcssa
  br i1 %2319, label %.thread459, label %.preheader585.loopexit

.thread459:                                       ; preds = %.thread460
  %2320 = add i8 %b38.0798, 1
  %2321 = zext i8 %2320 to i32
  %2322 = icmp slt i32 %2321, %2210
  br i1 %2322, label %.preheader580, label %.preheader585.loopexit

.lr.ph805:                                        ; preds = %.lr.ph805.preheader, %2354
  %2323 = phi i32 [ %2356, %2354 ], [ 0, %.lr.ph805.preheader ]
  %a40.0804 = phi i8 [ %2355, %2354 ], [ 0, %.lr.ph805.preheader ]
  %2324 = add i32 %2323, %z29.0924
  %2325 = add i32 %2324, %2218
  %2326 = mul nsw i32 %2325, %1186
  %2327 = add nsw i32 %2326, %x27.0929
  %2328 = getelementptr inbounds i64* %1187, i32 %2327
  %2329 = load i64* %2328, align 4, !tbaa !7
  %2330 = xor i64 %2329, %2223
  %2331 = and i64 %2330, 263886162886655
  %2332 = icmp eq i64 %2331, 0
  br i1 %2332, label %2333, label %.thread461.preheader.loopexit

; <label>:2333                                    ; preds = %.lr.ph805
  %2334 = add i32 %2208, %2323
  %2335 = mul nsw i32 %1183, %2334
  %2336 = add nsw i32 %2335, %y30.0914
  %2337 = getelementptr inbounds i8* %1163, i32 %2336
  %2338 = load i8* %2337, align 1, !tbaa !9
  %2339 = icmp eq i8 %2338, 0
  br i1 %2339, label %2340, label %.thread461.preheader.loopexit

; <label>:2340                                    ; preds = %2333
  br i1 %2193, label %2341, label %2348

; <label>:2341                                    ; preds = %2340
  %2342 = add nsw i32 %1188, %2326
  %2343 = getelementptr inbounds i64* %1187, i32 %2342
  %2344 = load i64* %2343, align 4, !tbaa !7
  %2345 = icmp eq i64 %2344, 4294967295
  br i1 %2345, label %2354, label %.thread461.preheader.loopexit

.thread461.preheader.loopexit:                    ; preds = %.lr.ph805, %2333, %2348, %2349, %2354, %2341
  %len_z2.0.lcssa.ph = phi i8 [ %a40.0804, %2341 ], [ %2355, %2354 ], [ %a40.0804, %2349 ], [ %a40.0804, %2348 ], [ %a40.0804, %2333 ], [ %a40.0804, %.lr.ph805 ]
  br label %.thread461.preheader

.thread461.preheader:                             ; preds = %.thread461.preheader.loopexit, %.preheader585
  %len_z2.0.lcssa = phi i8 [ 0, %.preheader585 ], [ %len_z2.0.lcssa.ph, %.thread461.preheader.loopexit ]
  %2346 = icmp sgt i32 %2247, 1
  br i1 %2346, label %.preheader579.lr.ph, label %.thread462._crit_edge

.preheader579.lr.ph:                              ; preds = %.thread461.preheader
  %2347 = icmp eq i8 %len_z2.0.lcssa, 0
  br label %.preheader579

; <label>:2348                                    ; preds = %2340
  br i1 %2196, label %2349, label %.thread461.preheader.loopexit

; <label>:2349                                    ; preds = %2348
  %2350 = add i32 %2197, %2326
  %2351 = getelementptr inbounds i64* %1187, i32 %2350
  %2352 = load i64* %2351, align 4, !tbaa !7
  %2353 = icmp eq i64 %2352, 4294967295
  br i1 %2353, label %2354, label %.thread461.preheader.loopexit

; <label>:2354                                    ; preds = %2349, %2341
  %2355 = add i8 %a40.0804, 1
  %2356 = zext i8 %2355 to i32
  %2357 = icmp slt i32 %2356, %2210
  br i1 %2357, label %.lr.ph805, label %.thread461.preheader.loopexit

.preheader579:                                    ; preds = %.preheader579.lr.ph, %.thread461
  %2358 = phi i32 [ 1, %.preheader579.lr.ph ], [ %2403, %.thread461 ]
  %b41.0831 = phi i8 [ 1, %.preheader579.lr.ph ], [ %2402, %.thread461 ]
  %2359 = add nsw i32 %2358, %y30.0914
  br i1 %2347, label %.thread462, label %.lr.ph818

.lr.ph818:                                        ; preds = %.preheader579
  %2360 = mul nsw i32 %1185, %2359
  br label %2361

; <label>:2361                                    ; preds = %.lr.ph818, %2391
  %indvars.iv1298 = phi i32 [ 0, %.lr.ph818 ], [ %indvars.iv.next1299, %2391 ]
  %2362 = phi i32 [ 0, %.lr.ph818 ], [ %2394, %2391 ]
  %2363 = add i32 %2362, %z29.0924
  %2364 = add i32 %2363, %2360
  %2365 = mul nsw i32 %2364, %1186
  %2366 = add nsw i32 %2365, %x27.0929
  %2367 = getelementptr inbounds i64* %1187, i32 %2366
  %2368 = load i64* %2367, align 4, !tbaa !7
  %2369 = xor i64 %2368, %2223
  %2370 = and i64 %2369, 263886162886655
  %2371 = icmp eq i64 %2370, 0
  br i1 %2371, label %2372, label %..thread462_crit_edge822

; <label>:2372                                    ; preds = %2361
  %2373 = add i32 %2208, %2362
  %2374 = mul nsw i32 %1183, %2373
  %2375 = add nsw i32 %2374, %2359
  %2376 = getelementptr inbounds i8* %1163, i32 %2375
  %2377 = load i8* %2376, align 1, !tbaa !9
  %2378 = icmp eq i8 %2377, 0
  br i1 %2378, label %2379, label %..thread462_crit_edge820

; <label>:2379                                    ; preds = %2372
  br i1 %2193, label %2380, label %2385

; <label>:2380                                    ; preds = %2379
  %2381 = add nsw i32 %1188, %2365
  %2382 = getelementptr inbounds i64* %1187, i32 %2381
  %2383 = load i64* %2382, align 4, !tbaa !7
  %2384 = icmp eq i64 %2383, 4294967295
  br i1 %2384, label %2391, label %..thread462_crit_edge

; <label>:2385                                    ; preds = %2379
  br i1 %2196, label %2386, label %..thread462_crit_edge824

; <label>:2386                                    ; preds = %2385
  %2387 = add i32 %2197, %2365
  %2388 = getelementptr inbounds i64* %1187, i32 %2387
  %2389 = load i64* %2388, align 4, !tbaa !7
  %2390 = icmp eq i64 %2389, 4294967295
  br i1 %2390, label %2391, label %..thread462_crit_edge826

; <label>:2391                                    ; preds = %2380, %2386
  %2392 = trunc i32 %indvars.iv1298 to i8
  %2393 = add i8 %2392, 1
  %2394 = zext i8 %2393 to i32
  %2395 = icmp ult i8 %2393, %len_z2.0.lcssa
  %indvars.iv.next1299 = add nuw nsw i32 %indvars.iv1298, 1
  br i1 %2395, label %2361, label %.thread462.loopexit

..thread462_crit_edge:                            ; preds = %2380
  %indvars.iv1298.lcssa1856 = phi i32 [ %indvars.iv1298, %2380 ]
  %2396 = trunc i32 %indvars.iv1298.lcssa1856 to i8
  br label %.thread462

..thread462_crit_edge820:                         ; preds = %2372
  %indvars.iv1298.lcssa1853 = phi i32 [ %indvars.iv1298, %2372 ]
  %2397 = trunc i32 %indvars.iv1298.lcssa1853 to i8
  br label %.thread462

..thread462_crit_edge822:                         ; preds = %2361
  %indvars.iv1298.lcssa = phi i32 [ %indvars.iv1298, %2361 ]
  %2398 = trunc i32 %indvars.iv1298.lcssa to i8
  br label %.thread462

..thread462_crit_edge824:                         ; preds = %2385
  %indvars.iv1298.lcssa1854 = phi i32 [ %indvars.iv1298, %2385 ]
  %2399 = trunc i32 %indvars.iv1298.lcssa1854 to i8
  br label %.thread462

..thread462_crit_edge826:                         ; preds = %2386
  %indvars.iv1298.lcssa1855 = phi i32 [ %indvars.iv1298, %2386 ]
  %2400 = trunc i32 %indvars.iv1298.lcssa1855 to i8
  br label %.thread462

.thread462.loopexit:                              ; preds = %2391
  %.lcssa1858 = phi i8 [ %2393, %2391 ]
  br label %.thread462

.thread462:                                       ; preds = %.thread462.loopexit, %.preheader579, %..thread462_crit_edge826, %..thread462_crit_edge824, %..thread462_crit_edge822, %..thread462_crit_edge820, %..thread462_crit_edge
  %a42.0.lcssa = phi i8 [ %2396, %..thread462_crit_edge ], [ %2397, %..thread462_crit_edge820 ], [ %2398, %..thread462_crit_edge822 ], [ %2399, %..thread462_crit_edge824 ], [ %2400, %..thread462_crit_edge826 ], [ 0, %.preheader579 ], [ %.lcssa1858, %.thread462.loopexit ]
  %2401 = icmp eq i8 %a42.0.lcssa, %len_z2.0.lcssa
  br i1 %2401, label %.thread461, label %.thread462._crit_edge.loopexit

.thread461:                                       ; preds = %.thread462
  %2402 = add i8 %b41.0831, 1
  %2403 = zext i8 %2402 to i32
  %2404 = icmp slt i32 %2403, %2247
  br i1 %2404, label %.preheader579, label %.thread462._crit_edge.loopexit

.thread462._crit_edge.loopexit:                   ; preds = %.thread462, %.thread461
  %len_y236.0.lcssa.ph = phi i8 [ %2402, %.thread461 ], [ %b41.0831, %.thread462 ]
  br label %.thread462._crit_edge

.thread462._crit_edge:                            ; preds = %.thread462._crit_edge.loopexit, %.thread461.preheader
  %len_y236.0.lcssa = phi i8 [ 1, %.thread461.preheader ], [ %len_y236.0.lcssa.ph, %.thread462._crit_edge.loopexit ]
  %2405 = zext i8 %len_y135.0.lcssa to i32
  %2406 = zext i8 %len_z1.0.lcssa to i32
  %2407 = mul nsw i32 %2406, %2405
  %2408 = zext i8 %len_y236.0.lcssa to i32
  %2409 = zext i8 %len_z2.0.lcssa to i32
  %2410 = mul nsw i32 %2408, %2409
  %2411 = icmp ugt i32 %2407, %2410
  %len_y135.0.len_y236.0 = select i1 %2411, i8 %len_y135.0.lcssa, i8 %len_y236.0.lcssa
  %len_z1.0.len_z2.0 = select i1 %2411, i8 %len_z1.0.lcssa, i8 %len_z2.0.lcssa
  %2412 = zext i8 %len_z1.0.len_z2.0 to i32
  %2413 = icmp eq i8 %len_z1.0.len_z2.0, 0
  br i1 %2413, label %._crit_edge838, label %.preheader578.lr.ph

.preheader578.lr.ph:                              ; preds = %.thread462._crit_edge
  %2414 = icmp eq i8 %len_y135.0.len_y236.0, 0
  %2415 = add i8 %len_y135.0.len_y236.0, -1
  %2416 = zext i8 %2415 to i32
  %2417 = add nuw nsw i32 %2416, 1
  br label %.preheader578

.preheader578:                                    ; preds = %2420, %.preheader578.lr.ph
  %indvar1304 = phi i32 [ 0, %.preheader578.lr.ph ], [ %indvar.next1305, %2420 ]
  br i1 %2414, label %2420, label %.lr.ph835

.lr.ph835:                                        ; preds = %.preheader578
  %2418 = mul i32 %1183, %indvar1304
  %2419 = add i32 %2217, %2418
  %scevgep1308 = getelementptr i8* %1163, i32 %2419
  call void @llvm.memset.p0i8.i32(i8* %scevgep1308, i8 1, i32 %2417, i32 1, i1 false)
  br label %2420

; <label>:2420                                    ; preds = %.preheader578, %.lr.ph835
  %indvar.next1305 = add i32 %indvar1304, 1
  %lftr.wideiv1309 = trunc i32 %indvar.next1305 to i8
  %exitcond1310 = icmp eq i8 %lftr.wideiv1309, %len_z1.0.len_z2.0
  br i1 %exitcond1310, label %._crit_edge838.loopexit, label %.preheader578

._crit_edge838.loopexit:                          ; preds = %2420
  br label %._crit_edge838

._crit_edge838:                                   ; preds = %._crit_edge838.loopexit, %.thread462._crit_edge
  %2421 = or i32 %2212, %y30.0914
  %2422 = icmp sgt i32 %2421, -1
  %2423 = icmp sgt i32 %1183, %y30.0914
  %or.cond.i130 = and i1 %2195, %2423
  %or.cond1717 = and i1 %2422, %or.cond.i130
  %brmerge1719.demorgan = and i1 %or.cond1717, %2214
  br i1 %brmerge1719.demorgan, label %map_get.exit132, label %map_get.exit132.thread

map_get.exit132.thread:                           ; preds = %._crit_edge838
  %2424 = getelementptr inbounds i8* %1159, i32 %chunk_shadow_index.9911
  br label %2429

map_get.exit132:                                  ; preds = %._crit_edge838
  %2425 = load i64* %2222, align 4, !tbaa !7
  %2426 = and i64 %2425, 134217728
  %2427 = icmp eq i64 %2426, 0
  %2428 = getelementptr inbounds i8* %1159, i32 %chunk_shadow_index.9911
  br i1 %2427, label %2431, label %2429

; <label>:2429                                    ; preds = %map_get.exit132.thread, %map_get.exit132
  %2430 = phi i8* [ %2424, %map_get.exit132.thread ], [ %2428, %map_get.exit132 ]
  store i8 1, i8* %2430, align 1, !tbaa !9
  br label %2432

; <label>:2431                                    ; preds = %map_get.exit132
  store i8 0, i8* %2428, align 1, !tbaa !9
  br label %2432

; <label>:2432                                    ; preds = %2431, %2429
  %s46.0 = phi float [ 7.500000e-01, %2429 ], [ 1.000000e+00, %2431 ]
  %chunk_shadow_index.10 = add nsw i32 %chunk_shadow_index.9911, 1
  %2433 = lshr i64 %2223, 46
  %2434 = and i64 %2433, 1
  %2435 = lshr i64 %2223, 45
  %2436 = and i64 %2435, 1
  %2437 = add nuw nsw i64 %2434, %2436
  %2438 = lshr i64 %2223, 47
  %2439 = and i64 %2438, 1
  %2440 = lshr i64 %2223, 44
  %2441 = and i64 %2440, 1
  %2442 = add nuw nsw i64 %2439, %2441
  %2443 = icmp ugt i64 %2437, %2442
  %2444 = and i32 %2226, 255
  %2445 = sitofp i32 %2444 to float
  %2446 = fmul fast float %2445, 0x3FECCCCCC0000000
  %2447 = fmul fast float %2446, %s46.0
  br i1 %2443, label %2448, label %2565

; <label>:2448                                    ; preds = %2432
  %2449 = uitofp i64 %2434 to float
  %2450 = getelementptr inbounds i8* %1158, i32 %chunk_color_index.7916
  %2451 = and i32 %2228, 255
  %2452 = sitofp i32 %2451 to float
  %2453 = fmul fast float %2452, 0x3FECCCCCC0000000
  %2454 = fmul fast float %2453, %s46.0
  %2455 = and i32 %2230, 255
  %2456 = sitofp i32 %2455 to float
  %2457 = fmul fast float %2456, 0x3FECCCCCC0000000
  %2458 = fmul fast float %2457, %s46.0
  %2459 = uitofp i64 %2439 to float
  %2460 = insertelement <2 x float> undef, float %2449, i32 0
  %2461 = insertelement <2 x float> %2460, float %2459, i32 1
  %2462 = insertelement <2 x float> undef, float %2447, i32 0
  %2463 = insertelement <2 x float> %2462, float %2447, i32 1
  %2464 = insertelement <2 x float> undef, float %2454, i32 0
  %2465 = insertelement <2 x float> %2464, float %2454, i32 1
  %2466 = insertelement <2 x float> undef, float %2458, i32 0
  %2467 = insertelement <2 x float> %2466, float %2458, i32 1
  %2468 = uitofp i64 %2436 to float
  %2469 = add nsw i32 %chunk_color_index.7916, 8
  %2470 = getelementptr inbounds i8* %1158, i32 %2469
  %2471 = uitofp i64 %2441 to float
  %2472 = insertelement <2 x float> undef, float %2468, i32 0
  %2473 = insertelement <2 x float> %2472, float %2471, i32 1
  %2474 = shufflevector <2 x float> %2461, <2 x float> %2473, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2475 = fmul fast <4 x float> %2474, <float 0x3FD6666660000000, float 0x3FD6666660000000, float 0x3FD6666660000000, float 0x3FD6666660000000>
  %2476 = fadd fast <4 x float> %2475, <float 0x3FE4CCCCC0000000, float 0x3FE4CCCCC0000000, float 0x3FE4CCCCC0000000, float 0x3FE4CCCCC0000000>
  %2477 = shufflevector <2 x float> %2463, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %2478 = fmul fast <4 x float> %2476, %2477
  %2479 = extractelement <4 x float> %2478, i32 0
  %2480 = extractelement <4 x float> %2478, i32 1
  %2481 = fptosi float %2479 to i32
  %2482 = trunc i32 %2481 to i8
  %2483 = fptosi float %2480 to i32
  %2484 = trunc i32 %2483 to i8
  %2485 = insertelement <2 x i8> undef, i8 %2482, i32 0
  %2486 = extractelement <4 x float> %2478, i32 2
  %2487 = extractelement <4 x float> %2478, i32 3
  %2488 = fptosi float %2486 to i32
  %2489 = trunc i32 %2488 to i8
  %2490 = fptosi float %2487 to i32
  %2491 = trunc i32 %2490 to i8
  %2492 = shufflevector <2 x float> %2465, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %2493 = fmul fast <4 x float> %2476, %2492
  %2494 = extractelement <4 x float> %2493, i32 0
  %2495 = extractelement <4 x float> %2493, i32 1
  %2496 = fptosi float %2494 to i32
  %2497 = trunc i32 %2496 to i8
  %2498 = fptosi float %2495 to i32
  %2499 = trunc i32 %2498 to i8
  %2500 = insertelement <2 x i8> undef, i8 %2499, i32 0
  %2501 = insertelement <2 x i8> %2485, i8 %2497, i32 1
  %2502 = extractelement <4 x float> %2493, i32 2
  %2503 = extractelement <4 x float> %2493, i32 3
  %2504 = fptosi float %2502 to i32
  %2505 = trunc i32 %2504 to i8
  %2506 = insertelement <2 x i8> undef, i8 %2489, i32 0
  %2507 = insertelement <2 x i8> %2506, i8 %2505, i32 1
  %2508 = fptosi float %2503 to i32
  %2509 = trunc i32 %2508 to i8
  %2510 = shufflevector <2 x float> %2467, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %2511 = fmul fast <4 x float> %2476, %2510
  %2512 = extractelement <4 x float> %2511, i32 0
  %2513 = extractelement <4 x float> %2511, i32 1
  %2514 = fptosi float %2512 to i32
  %2515 = trunc i32 %2514 to i8
  %2516 = insertelement <2 x i8> undef, i8 %2515, i32 0
  %2517 = fptosi float %2513 to i32
  %2518 = trunc i32 %2517 to i8
  %2519 = insertelement <2 x i8> %2516, i8 %2484, i32 1
  %2520 = insertelement <2 x i8> %2500, i8 %2518, i32 1
  %2521 = shufflevector <2 x i8> %2519, <2 x i8> %2507, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2522 = shufflevector <2 x i8> %2501, <2 x i8> %2520, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2523 = shufflevector <4 x i8> %2522, <4 x i8> %2521, <8 x i32> <i32 0, i32 1, i32 4, i32 5, i32 2, i32 3, i32 6, i32 7>
  %2524 = bitcast i8* %2450 to <8 x i8>*
  store <8 x i8> %2523, <8 x i8>* %2524, align 1, !tbaa !9
  %2525 = extractelement <4 x float> %2511, i32 2
  %2526 = extractelement <4 x float> %2511, i32 3
  %2527 = fptosi float %2525 to i32
  %2528 = trunc i32 %2527 to i8
  %2529 = insertelement <2 x i8> undef, i8 %2528, i32 0
  %2530 = insertelement <2 x i8> %2529, i8 %2491, i32 1
  %2531 = bitcast i8* %2470 to <4 x i8>*
  %2532 = fptosi float %2526 to i32
  %2533 = trunc i32 %2532 to i8
  %2534 = add nsw i32 %chunk_color_index.7916, 12
  %2535 = insertelement <2 x i8> undef, i8 %2509, i32 0
  %2536 = insertelement <2 x i8> %2535, i8 %2533, i32 1
  %2537 = shufflevector <2 x i8> %2530, <2 x i8> %2536, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i8> %2537, <4 x i8>* %2531, align 1, !tbaa !9
  %2538 = getelementptr inbounds i16* %1156, i32 %chunk_vertex_index.7917
  %2539 = trunc i32 %y30.0914 to i16
  %2540 = insertelement <2 x i16> undef, i16 %2194, i32 0
  %2541 = insertelement <2 x i16> %2540, i16 %2539, i32 1
  %2542 = insertelement <2 x i16> undef, i16 %2213, i32 0
  %2543 = insertelement <2 x i16> %2542, i16 %2194, i32 1
  %2544 = add nsw i32 %2412, %z29.0924
  %2545 = trunc i32 %2544 to i16
  %2546 = insertelement <2 x i16> undef, i16 %2539, i32 0
  %2547 = insertelement <2 x i16> %2546, i16 %2545, i32 1
  %2548 = zext i8 %len_y135.0.len_y236.0 to i32
  %2549 = add nsw i32 %2548, %y30.0914
  %2550 = trunc i32 %2549 to i16
  %2551 = add nsw i32 %chunk_vertex_index.7917, 8
  %2552 = insertelement <2 x i16> %2540, i16 %2550, i32 1
  %2553 = shufflevector <2 x i16> %2543, <2 x i16> %2552, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2554 = shufflevector <2 x i16> %2541, <2 x i16> %2547, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2555 = shufflevector <4 x i16> %2554, <4 x i16> %2553, <8 x i32> <i32 0, i32 1, i32 4, i32 5, i32 2, i32 3, i32 6, i32 7>
  %2556 = bitcast i16* %2538 to <8 x i16>*
  store <8 x i16> %2555, <8 x i16>* %2556, align 2, !tbaa !19
  %2557 = getelementptr inbounds i16* %1156, i32 %2551
  %2558 = insertelement <2 x i16> undef, i16 %2545, i32 0
  %2559 = insertelement <2 x i16> %2558, i16 %2194, i32 1
  %2560 = bitcast i16* %2557 to <4 x i16>*
  %2561 = add nsw i32 %chunk_vertex_index.7917, 12
  %2562 = insertelement <2 x i16> undef, i16 %2550, i32 0
  %2563 = insertelement <2 x i16> %2562, i16 %2213, i32 1
  %2564 = shufflevector <2 x i16> %2559, <2 x i16> %2563, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i16> %2564, <4 x i16>* %2560, align 2, !tbaa !19
  br label %.thread458

; <label>:2565                                    ; preds = %2432
  %2566 = uitofp i64 %2439 to float
  %2567 = getelementptr inbounds i8* %1158, i32 %chunk_color_index.7916
  %2568 = and i32 %2228, 255
  %2569 = sitofp i32 %2568 to float
  %2570 = fmul fast float %2569, 0x3FECCCCCC0000000
  %2571 = fmul fast float %2570, %s46.0
  %2572 = and i32 %2230, 255
  %2573 = sitofp i32 %2572 to float
  %2574 = fmul fast float %2573, 0x3FECCCCCC0000000
  %2575 = fmul fast float %2574, %s46.0
  %2576 = uitofp i64 %2436 to float
  %2577 = insertelement <2 x float> undef, float %2566, i32 0
  %2578 = insertelement <2 x float> %2577, float %2576, i32 1
  %2579 = insertelement <2 x float> undef, float %2447, i32 0
  %2580 = insertelement <2 x float> %2579, float %2447, i32 1
  %2581 = insertelement <2 x float> undef, float %2571, i32 0
  %2582 = insertelement <2 x float> %2581, float %2571, i32 1
  %2583 = insertelement <2 x float> undef, float %2575, i32 0
  %2584 = insertelement <2 x float> %2583, float %2575, i32 1
  %2585 = uitofp i64 %2441 to float
  %2586 = add nsw i32 %chunk_color_index.7916, 8
  %2587 = getelementptr inbounds i8* %1158, i32 %2586
  %2588 = uitofp i64 %2434 to float
  %2589 = insertelement <2 x float> undef, float %2585, i32 0
  %2590 = insertelement <2 x float> %2589, float %2588, i32 1
  %2591 = shufflevector <2 x float> %2578, <2 x float> %2590, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2592 = fmul fast <4 x float> %2591, <float 0x3FD6666660000000, float 0x3FD6666660000000, float 0x3FD6666660000000, float 0x3FD6666660000000>
  %2593 = fadd fast <4 x float> %2592, <float 0x3FE4CCCCC0000000, float 0x3FE4CCCCC0000000, float 0x3FE4CCCCC0000000, float 0x3FE4CCCCC0000000>
  %2594 = shufflevector <2 x float> %2580, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %2595 = fmul fast <4 x float> %2593, %2594
  %2596 = extractelement <4 x float> %2595, i32 0
  %2597 = extractelement <4 x float> %2595, i32 1
  %2598 = fptosi float %2596 to i32
  %2599 = trunc i32 %2598 to i8
  %2600 = fptosi float %2597 to i32
  %2601 = trunc i32 %2600 to i8
  %2602 = insertelement <2 x i8> undef, i8 %2599, i32 0
  %2603 = extractelement <4 x float> %2595, i32 2
  %2604 = extractelement <4 x float> %2595, i32 3
  %2605 = fptosi float %2603 to i32
  %2606 = trunc i32 %2605 to i8
  %2607 = fptosi float %2604 to i32
  %2608 = trunc i32 %2607 to i8
  %2609 = shufflevector <2 x float> %2582, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %2610 = fmul fast <4 x float> %2593, %2609
  %2611 = extractelement <4 x float> %2610, i32 0
  %2612 = extractelement <4 x float> %2610, i32 1
  %2613 = fptosi float %2611 to i32
  %2614 = trunc i32 %2613 to i8
  %2615 = fptosi float %2612 to i32
  %2616 = trunc i32 %2615 to i8
  %2617 = insertelement <2 x i8> undef, i8 %2616, i32 0
  %2618 = insertelement <2 x i8> %2602, i8 %2614, i32 1
  %2619 = extractelement <4 x float> %2610, i32 2
  %2620 = extractelement <4 x float> %2610, i32 3
  %2621 = fptosi float %2619 to i32
  %2622 = trunc i32 %2621 to i8
  %2623 = insertelement <2 x i8> undef, i8 %2606, i32 0
  %2624 = insertelement <2 x i8> %2623, i8 %2622, i32 1
  %2625 = fptosi float %2620 to i32
  %2626 = trunc i32 %2625 to i8
  %2627 = shufflevector <2 x float> %2584, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %2628 = fmul fast <4 x float> %2593, %2627
  %2629 = extractelement <4 x float> %2628, i32 0
  %2630 = extractelement <4 x float> %2628, i32 1
  %2631 = fptosi float %2629 to i32
  %2632 = trunc i32 %2631 to i8
  %2633 = insertelement <2 x i8> undef, i8 %2632, i32 0
  %2634 = fptosi float %2630 to i32
  %2635 = trunc i32 %2634 to i8
  %2636 = insertelement <2 x i8> %2633, i8 %2601, i32 1
  %2637 = insertelement <2 x i8> %2617, i8 %2635, i32 1
  %2638 = shufflevector <2 x i8> %2636, <2 x i8> %2624, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2639 = shufflevector <2 x i8> %2618, <2 x i8> %2637, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2640 = shufflevector <4 x i8> %2639, <4 x i8> %2638, <8 x i32> <i32 0, i32 1, i32 4, i32 5, i32 2, i32 3, i32 6, i32 7>
  %2641 = bitcast i8* %2567 to <8 x i8>*
  store <8 x i8> %2640, <8 x i8>* %2641, align 1, !tbaa !9
  %2642 = extractelement <4 x float> %2628, i32 2
  %2643 = extractelement <4 x float> %2628, i32 3
  %2644 = fptosi float %2642 to i32
  %2645 = trunc i32 %2644 to i8
  %2646 = insertelement <2 x i8> undef, i8 %2645, i32 0
  %2647 = insertelement <2 x i8> %2646, i8 %2608, i32 1
  %2648 = bitcast i8* %2587 to <4 x i8>*
  %2649 = fptosi float %2643 to i32
  %2650 = trunc i32 %2649 to i8
  %2651 = add nsw i32 %chunk_color_index.7916, 12
  %2652 = insertelement <2 x i8> undef, i8 %2626, i32 0
  %2653 = insertelement <2 x i8> %2652, i8 %2650, i32 1
  %2654 = shufflevector <2 x i8> %2647, <2 x i8> %2653, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i8> %2654, <4 x i8>* %2648, align 1, !tbaa !9
  %2655 = getelementptr inbounds i16* %1156, i32 %chunk_vertex_index.7917
  %2656 = trunc i32 %y30.0914 to i16
  %2657 = insertelement <2 x i16> undef, i16 %2194, i32 0
  %2658 = insertelement <2 x i16> %2657, i16 %2656, i32 1
  %2659 = add nsw i32 %2412, %z29.0924
  %2660 = trunc i32 %2659 to i16
  %2661 = insertelement <2 x i16> undef, i16 %2660, i32 0
  %2662 = insertelement <2 x i16> %2661, i16 %2194, i32 1
  %2663 = zext i8 %len_y135.0.len_y236.0 to i32
  %2664 = add nsw i32 %2663, %y30.0914
  %2665 = trunc i32 %2664 to i16
  %2666 = insertelement <2 x i16> undef, i16 %2665, i32 0
  %2667 = insertelement <2 x i16> %2666, i16 %2660, i32 1
  %2668 = add nsw i32 %chunk_vertex_index.7917, 8
  %2669 = insertelement <2 x i16> %2657, i16 %2665, i32 1
  %2670 = shufflevector <2 x i16> %2662, <2 x i16> %2669, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2671 = shufflevector <2 x i16> %2658, <2 x i16> %2667, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2672 = shufflevector <4 x i16> %2671, <4 x i16> %2670, <8 x i32> <i32 0, i32 1, i32 4, i32 5, i32 2, i32 3, i32 6, i32 7>
  %2673 = bitcast i16* %2655 to <8 x i16>*
  store <8 x i16> %2672, <8 x i16>* %2673, align 2, !tbaa !19
  %2674 = getelementptr inbounds i16* %1156, i32 %2668
  %2675 = insertelement <2 x i16> undef, i16 %2213, i32 0
  %2676 = insertelement <2 x i16> %2675, i16 %2194, i32 1
  %2677 = bitcast i16* %2674 to <4 x i16>*
  %2678 = add nsw i32 %chunk_vertex_index.7917, 12
  %2679 = insertelement <2 x i16> undef, i16 %2656, i32 0
  %2680 = insertelement <2 x i16> %2679, i16 %2213, i32 1
  %2681 = shufflevector <2 x i16> %2676, <2 x i16> %2680, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i16> %2681, <4 x i16>* %2677, align 2, !tbaa !19
  br label %.thread458

.thread458:                                       ; preds = %2231, %2242, %2565, %2448, %2237, %2236
  %chunk_shadow_index.11 = phi i32 [ %chunk_shadow_index.10, %2448 ], [ %chunk_shadow_index.10, %2565 ], [ %chunk_shadow_index.9911, %2242 ], [ %chunk_shadow_index.9911, %2237 ], [ %chunk_shadow_index.9911, %2236 ], [ %chunk_shadow_index.9911, %2231 ]
  %chunk_color_index.8 = phi i32 [ %2534, %2448 ], [ %2651, %2565 ], [ %chunk_color_index.7916, %2242 ], [ %chunk_color_index.7916, %2237 ], [ %chunk_color_index.7916, %2236 ], [ %chunk_color_index.7916, %2231 ]
  %chunk_vertex_index.8 = phi i32 [ %2561, %2448 ], [ %2678, %2565 ], [ %chunk_vertex_index.7917, %2242 ], [ %chunk_vertex_index.7917, %2237 ], [ %chunk_vertex_index.7917, %2236 ], [ %chunk_vertex_index.7917, %2231 ]
  br i1 %2198, label %2682, label %2686

; <label>:2682                                    ; preds = %.thread458
  %2683 = getelementptr inbounds i64* %1187, i32 %2220
  %2684 = load i64* %2683, align 4, !tbaa !7
  %2685 = icmp eq i64 %2684, 4294967295
  br i1 %2685, label %2692, label %2686

; <label>:2686                                    ; preds = %2682, %.thread458
  br i1 %2201, label %2687, label %3128

; <label>:2687                                    ; preds = %2686
  %2688 = add i32 %2199, %2220
  %2689 = getelementptr inbounds i64* %1187, i32 %2688
  %2690 = load i64* %2689, align 4, !tbaa !7
  %2691 = icmp eq i64 %2690, 4294967295
  br i1 %2691, label %2692, label %3128

; <label>:2692                                    ; preds = %2687, %2682
  %2693 = add i32 %y30.0914, %1161
  %.sum = add i32 %2693, %2209
  %2694 = getelementptr inbounds i8* %1163, i32 %.sum
  %2695 = load i8* %2694, align 1, !tbaa !9
  %2696 = icmp eq i8 %2695, 0
  br i1 %2696, label %.preheader584, label %3128

.preheader584:                                    ; preds = %2692
  %2697 = sub nsw i32 %1183, %y30.0914
  %2698 = icmp sgt i32 %2697, 0
  br i1 %2698, label %.lr.ph843.preheader, label %.preheader583

.lr.ph843.preheader:                              ; preds = %.preheader584
  %2699 = add i32 %2209, %1161
  br label %.lr.ph843

.preheader583.loopexit:                           ; preds = %.lr.ph843, %2712, %2721, %2722, %2727
  %len_y147.0.lcssa.ph = phi i8 [ %2728, %2727 ], [ %a51.0842, %2722 ], [ %a51.0842, %2721 ], [ %a51.0842, %2712 ], [ %a51.0842, %.lr.ph843 ]
  br label %.preheader583

.preheader583:                                    ; preds = %.preheader583.loopexit, %.preheader584
  %len_y147.0.lcssa = phi i8 [ 0, %.preheader584 ], [ %len_y147.0.lcssa.ph, %.preheader583.loopexit ]
  br i1 %2211, label %.preheader577.lr.ph, label %.preheader582

.preheader577.lr.ph:                              ; preds = %.preheader583
  %2700 = icmp eq i8 %len_y147.0.lcssa, 0
  br label %.preheader577

.lr.ph843:                                        ; preds = %.lr.ph843.preheader, %2727
  %2701 = phi i32 [ %2729, %2727 ], [ 0, %.lr.ph843.preheader ]
  %a51.0842 = phi i8 [ %2728, %2727 ], [ 0, %.lr.ph843.preheader ]
  %2702 = add nsw i32 %2701, %y30.0914
  %2703 = mul nsw i32 %1185, %2702
  %2704 = add nsw i32 %2703, %z29.0924
  %2705 = mul nsw i32 %2704, %1186
  %2706 = add nsw i32 %2705, %x27.0929
  %2707 = getelementptr inbounds i64* %1187, i32 %2706
  %2708 = load i64* %2707, align 4, !tbaa !7
  %2709 = xor i64 %2708, %2223
  %2710 = and i64 %2709, 16495979528191
  %2711 = icmp eq i64 %2710, 0
  br i1 %2711, label %2712, label %.preheader583.loopexit

; <label>:2712                                    ; preds = %.lr.ph843
  %.sum112 = add i32 %2699, %2702
  %2713 = getelementptr inbounds i8* %1163, i32 %.sum112
  %2714 = load i8* %2713, align 1, !tbaa !9
  %2715 = icmp eq i8 %2714, 0
  br i1 %2715, label %2716, label %.preheader583.loopexit

; <label>:2716                                    ; preds = %2712
  br i1 %2198, label %2717, label %2721

; <label>:2717                                    ; preds = %2716
  %2718 = getelementptr inbounds i64* %1187, i32 %2705
  %2719 = load i64* %2718, align 4, !tbaa !7
  %2720 = icmp eq i64 %2719, 4294967295
  br i1 %2720, label %2727, label %2721

; <label>:2721                                    ; preds = %2717, %2716
  br i1 %2201, label %2722, label %.preheader583.loopexit

; <label>:2722                                    ; preds = %2721
  %2723 = add i32 %2199, %2705
  %2724 = getelementptr inbounds i64* %1187, i32 %2723
  %2725 = load i64* %2724, align 4, !tbaa !7
  %2726 = icmp eq i64 %2725, 4294967295
  br i1 %2726, label %2727, label %.preheader583.loopexit

; <label>:2727                                    ; preds = %2722, %2717
  %2728 = add i8 %a51.0842, 1
  %2729 = zext i8 %2728 to i32
  %2730 = icmp slt i32 %2729, %2697
  br i1 %2730, label %.lr.ph843, label %.preheader583.loopexit

.preheader582.loopexit:                           ; preds = %._crit_edge856, %2768
  %len_z148.0.lcssa.ph = phi i8 [ %2769, %2768 ], [ %b52.0867, %._crit_edge856 ]
  br label %.preheader582

.preheader582:                                    ; preds = %.preheader582.loopexit, %.preheader583
  %len_z148.0.lcssa = phi i8 [ 1, %.preheader583 ], [ %len_z148.0.lcssa.ph, %.preheader582.loopexit ]
  %2731 = icmp sgt i32 %2210, 0
  br i1 %2731, label %.lr.ph876.preheader, label %.preheader581

.lr.ph876.preheader:                              ; preds = %.preheader582
  br label %.lr.ph876

.preheader577:                                    ; preds = %.preheader577.lr.ph, %2768
  %2732 = phi i32 [ 1, %.preheader577.lr.ph ], [ %2770, %2768 ]
  %b52.0867 = phi i8 [ 1, %.preheader577.lr.ph ], [ %2769, %2768 ]
  br i1 %2700, label %._crit_edge856, label %.lr.ph855

.lr.ph855:                                        ; preds = %.preheader577
  %2733 = add i32 %2208, %2732
  %2734 = add i32 %2732, %z29.0924
  %2735 = mul nsw i32 %1183, %2733
  br label %2736

; <label>:2736                                    ; preds = %.lr.ph855, %2764
  %a53.0853 = phi i8 [ 0, %.lr.ph855 ], [ %2765, %2764 ]
  %2737 = zext i8 %a53.0853 to i32
  %2738 = add nsw i32 %2737, %y30.0914
  %2739 = mul nsw i32 %1185, %2738
  %2740 = add i32 %2734, %2739
  %2741 = mul nsw i32 %2740, %1186
  %2742 = add nsw i32 %2741, %x27.0929
  %2743 = getelementptr inbounds i64* %1187, i32 %2742
  %2744 = load i64* %2743, align 4, !tbaa !7
  %2745 = xor i64 %2744, %2223
  %2746 = and i64 %2745, 16495979528191
  %2747 = icmp eq i64 %2746, 0
  br i1 %2747, label %2748, label %._crit_edge856.loopexit

; <label>:2748                                    ; preds = %2736
  %2749 = add i32 %2738, %1161
  %.sum111 = add i32 %2749, %2735
  %2750 = getelementptr inbounds i8* %1163, i32 %.sum111
  %2751 = load i8* %2750, align 1, !tbaa !9
  %2752 = icmp eq i8 %2751, 0
  br i1 %2752, label %2753, label %._crit_edge856.loopexit

; <label>:2753                                    ; preds = %2748
  br i1 %2198, label %2754, label %2758

; <label>:2754                                    ; preds = %2753
  %2755 = getelementptr inbounds i64* %1187, i32 %2741
  %2756 = load i64* %2755, align 4, !tbaa !7
  %2757 = icmp eq i64 %2756, 4294967295
  br i1 %2757, label %2764, label %2758

; <label>:2758                                    ; preds = %2754, %2753
  br i1 %2201, label %2759, label %._crit_edge856.loopexit

; <label>:2759                                    ; preds = %2758
  %2760 = add i32 %2199, %2741
  %2761 = getelementptr inbounds i64* %1187, i32 %2760
  %2762 = load i64* %2761, align 4, !tbaa !7
  %2763 = icmp eq i64 %2762, 4294967295
  br i1 %2763, label %2764, label %._crit_edge856.loopexit

; <label>:2764                                    ; preds = %2754, %2759
  %2765 = add i8 %a53.0853, 1
  %2766 = icmp ult i8 %2765, %len_y147.0.lcssa
  br i1 %2766, label %2736, label %._crit_edge856.loopexit

._crit_edge856.loopexit:                          ; preds = %2748, %2736, %2758, %2759, %2764
  %a53.0.lcssa.ph = phi i8 [ %2765, %2764 ], [ %a53.0853, %2759 ], [ %a53.0853, %2758 ], [ %a53.0853, %2736 ], [ %a53.0853, %2748 ]
  br label %._crit_edge856

._crit_edge856:                                   ; preds = %._crit_edge856.loopexit, %.preheader577
  %a53.0.lcssa = phi i8 [ 0, %.preheader577 ], [ %a53.0.lcssa.ph, %._crit_edge856.loopexit ]
  %2767 = icmp eq i8 %a53.0.lcssa, %len_y147.0.lcssa
  br i1 %2767, label %2768, label %.preheader582.loopexit

; <label>:2768                                    ; preds = %._crit_edge856
  %2769 = add i8 %b52.0867, 1
  %2770 = zext i8 %2769 to i32
  %2771 = icmp slt i32 %2770, %2210
  br i1 %2771, label %.preheader577, label %.preheader582.loopexit

.preheader581.loopexit:                           ; preds = %.lr.ph876, %2784, %2795, %2796, %2801
  %len_z250.0.lcssa.ph = phi i8 [ %2802, %2801 ], [ %a54.0875, %2796 ], [ %a54.0875, %2795 ], [ %a54.0875, %2784 ], [ %a54.0875, %.lr.ph876 ]
  br label %.preheader581

.preheader581:                                    ; preds = %.preheader581.loopexit, %.preheader582
  %len_z250.0.lcssa = phi i8 [ 0, %.preheader582 ], [ %len_z250.0.lcssa.ph, %.preheader581.loopexit ]
  %2772 = icmp sgt i32 %2697, 1
  br i1 %2772, label %.preheader576.lr.ph, label %._crit_edge901

.preheader576.lr.ph:                              ; preds = %.preheader581
  %2773 = icmp eq i8 %len_z250.0.lcssa, 0
  br label %.preheader576

.lr.ph876:                                        ; preds = %.lr.ph876.preheader, %2801
  %2774 = phi i32 [ %2803, %2801 ], [ 0, %.lr.ph876.preheader ]
  %a54.0875 = phi i8 [ %2802, %2801 ], [ 0, %.lr.ph876.preheader ]
  %2775 = add i32 %2774, %z29.0924
  %2776 = add i32 %2775, %2218
  %2777 = mul nsw i32 %2776, %1186
  %2778 = add nsw i32 %2777, %x27.0929
  %2779 = getelementptr inbounds i64* %1187, i32 %2778
  %2780 = load i64* %2779, align 4, !tbaa !7
  %2781 = xor i64 %2780, %2223
  %2782 = and i64 %2781, 16495979528191
  %2783 = icmp eq i64 %2782, 0
  br i1 %2783, label %2784, label %.preheader581.loopexit

; <label>:2784                                    ; preds = %.lr.ph876
  %2785 = add i32 %2208, %2774
  %2786 = mul nsw i32 %1183, %2785
  %.sum110 = add i32 %2693, %2786
  %2787 = getelementptr inbounds i8* %1163, i32 %.sum110
  %2788 = load i8* %2787, align 1, !tbaa !9
  %2789 = icmp eq i8 %2788, 0
  br i1 %2789, label %2790, label %.preheader581.loopexit

; <label>:2790                                    ; preds = %2784
  br i1 %2198, label %2791, label %2795

; <label>:2791                                    ; preds = %2790
  %2792 = getelementptr inbounds i64* %1187, i32 %2777
  %2793 = load i64* %2792, align 4, !tbaa !7
  %2794 = icmp eq i64 %2793, 4294967295
  br i1 %2794, label %2801, label %2795

; <label>:2795                                    ; preds = %2791, %2790
  br i1 %2201, label %2796, label %.preheader581.loopexit

; <label>:2796                                    ; preds = %2795
  %2797 = add i32 %2199, %2777
  %2798 = getelementptr inbounds i64* %1187, i32 %2797
  %2799 = load i64* %2798, align 4, !tbaa !7
  %2800 = icmp eq i64 %2799, 4294967295
  br i1 %2800, label %2801, label %.preheader581.loopexit

; <label>:2801                                    ; preds = %2796, %2791
  %2802 = add i8 %a54.0875, 1
  %2803 = zext i8 %2802 to i32
  %2804 = icmp slt i32 %2803, %2210
  br i1 %2804, label %.lr.ph876, label %.preheader581.loopexit

.preheader576:                                    ; preds = %.preheader576.lr.ph, %2847
  %2805 = phi i32 [ 1, %.preheader576.lr.ph ], [ %2849, %2847 ]
  %b55.0900 = phi i8 [ 1, %.preheader576.lr.ph ], [ %2848, %2847 ]
  %2806 = add nsw i32 %2805, %y30.0914
  br i1 %2773, label %._crit_edge897, label %.lr.ph888

.lr.ph888:                                        ; preds = %.preheader576
  %2807 = mul nsw i32 %1185, %2806
  %2808 = add i32 %2806, %1161
  br label %2809

; <label>:2809                                    ; preds = %.lr.ph888, %2837
  %indvars.iv1311 = phi i32 [ 0, %.lr.ph888 ], [ %indvars.iv.next1312, %2837 ]
  %2810 = phi i32 [ 0, %.lr.ph888 ], [ %2840, %2837 ]
  %2811 = add i32 %2810, %z29.0924
  %2812 = add i32 %2811, %2807
  %2813 = mul nsw i32 %2812, %1186
  %2814 = add nsw i32 %2813, %x27.0929
  %2815 = getelementptr inbounds i64* %1187, i32 %2814
  %2816 = load i64* %2815, align 4, !tbaa !7
  %2817 = xor i64 %2816, %2223
  %2818 = and i64 %2817, 16495979528191
  %2819 = icmp eq i64 %2818, 0
  br i1 %2819, label %2820, label %._crit_edge891

; <label>:2820                                    ; preds = %2809
  %2821 = add i32 %2208, %2810
  %2822 = mul nsw i32 %1183, %2821
  %.sum109 = add i32 %2808, %2822
  %2823 = getelementptr inbounds i8* %1163, i32 %.sum109
  %2824 = load i8* %2823, align 1, !tbaa !9
  %2825 = icmp eq i8 %2824, 0
  br i1 %2825, label %2826, label %._crit_edge889

; <label>:2826                                    ; preds = %2820
  br i1 %2198, label %2827, label %2831

; <label>:2827                                    ; preds = %2826
  %2828 = getelementptr inbounds i64* %1187, i32 %2813
  %2829 = load i64* %2828, align 4, !tbaa !7
  %2830 = icmp eq i64 %2829, 4294967295
  br i1 %2830, label %2837, label %2831

; <label>:2831                                    ; preds = %2827, %2826
  br i1 %2201, label %2832, label %._crit_edge893

; <label>:2832                                    ; preds = %2831
  %2833 = add i32 %2199, %2813
  %2834 = getelementptr inbounds i64* %1187, i32 %2833
  %2835 = load i64* %2834, align 4, !tbaa !7
  %2836 = icmp eq i64 %2835, 4294967295
  br i1 %2836, label %2837, label %._crit_edge895

; <label>:2837                                    ; preds = %2827, %2832
  %2838 = trunc i32 %indvars.iv1311 to i8
  %2839 = add i8 %2838, 1
  %2840 = zext i8 %2839 to i32
  %2841 = icmp ult i8 %2839, %len_z250.0.lcssa
  %indvars.iv.next1312 = add nuw nsw i32 %indvars.iv1311, 1
  br i1 %2841, label %2809, label %._crit_edge897.loopexit

._crit_edge889:                                   ; preds = %2820
  %indvars.iv1311.lcssa1859 = phi i32 [ %indvars.iv1311, %2820 ]
  %2842 = trunc i32 %indvars.iv1311.lcssa1859 to i8
  br label %._crit_edge897

._crit_edge891:                                   ; preds = %2809
  %indvars.iv1311.lcssa = phi i32 [ %indvars.iv1311, %2809 ]
  %2843 = trunc i32 %indvars.iv1311.lcssa to i8
  br label %._crit_edge897

._crit_edge893:                                   ; preds = %2831
  %indvars.iv1311.lcssa1860 = phi i32 [ %indvars.iv1311, %2831 ]
  %2844 = trunc i32 %indvars.iv1311.lcssa1860 to i8
  br label %._crit_edge897

._crit_edge895:                                   ; preds = %2832
  %indvars.iv1311.lcssa1861 = phi i32 [ %indvars.iv1311, %2832 ]
  %2845 = trunc i32 %indvars.iv1311.lcssa1861 to i8
  br label %._crit_edge897

._crit_edge897.loopexit:                          ; preds = %2837
  %.lcssa1863 = phi i8 [ %2839, %2837 ]
  br label %._crit_edge897

._crit_edge897:                                   ; preds = %._crit_edge897.loopexit, %.preheader576, %._crit_edge895, %._crit_edge893, %._crit_edge891, %._crit_edge889
  %a56.0.lcssa = phi i8 [ %2842, %._crit_edge889 ], [ %2843, %._crit_edge891 ], [ %2844, %._crit_edge893 ], [ %2845, %._crit_edge895 ], [ 0, %.preheader576 ], [ %.lcssa1863, %._crit_edge897.loopexit ]
  %2846 = icmp eq i8 %a56.0.lcssa, %len_z250.0.lcssa
  br i1 %2846, label %2847, label %._crit_edge901.loopexit

; <label>:2847                                    ; preds = %._crit_edge897
  %2848 = add i8 %b55.0900, 1
  %2849 = zext i8 %2848 to i32
  %2850 = icmp slt i32 %2849, %2697
  br i1 %2850, label %.preheader576, label %._crit_edge901.loopexit

._crit_edge901.loopexit:                          ; preds = %._crit_edge897, %2847
  %len_y249.0.lcssa.ph = phi i8 [ %2848, %2847 ], [ %b55.0900, %._crit_edge897 ]
  br label %._crit_edge901

._crit_edge901:                                   ; preds = %._crit_edge901.loopexit, %.preheader581
  %len_y249.0.lcssa = phi i8 [ 1, %.preheader581 ], [ %len_y249.0.lcssa.ph, %._crit_edge901.loopexit ]
  %2851 = zext i8 %len_y147.0.lcssa to i32
  %2852 = zext i8 %len_z148.0.lcssa to i32
  %2853 = mul nsw i32 %2852, %2851
  %2854 = zext i8 %len_y249.0.lcssa to i32
  %2855 = zext i8 %len_z250.0.lcssa to i32
  %2856 = mul nsw i32 %2854, %2855
  %2857 = icmp ugt i32 %2853, %2856
  %len_y147.0.len_y249.0 = select i1 %2857, i8 %len_y147.0.lcssa, i8 %len_y249.0.lcssa
  %len_z148.0.len_z250.0 = select i1 %2857, i8 %len_z148.0.lcssa, i8 %len_z250.0.lcssa
  %2858 = zext i8 %len_z148.0.len_z250.0 to i32
  %2859 = icmp eq i8 %len_z148.0.len_z250.0, 0
  br i1 %2859, label %._crit_edge909, label %.preheader575.lr.ph

.preheader575.lr.ph:                              ; preds = %._crit_edge901
  %2860 = icmp eq i8 %len_y147.0.len_y249.0, 0
  %2861 = add i8 %len_y147.0.len_y249.0, -1
  %2862 = zext i8 %2861 to i32
  %2863 = add nuw nsw i32 %2862, 1
  br label %.preheader575

.preheader575:                                    ; preds = %2866, %.preheader575.lr.ph
  %indvar1317 = phi i32 [ 0, %.preheader575.lr.ph ], [ %indvar.next1318, %2866 ]
  br i1 %2860, label %2866, label %.lr.ph906

.lr.ph906:                                        ; preds = %.preheader575
  %2864 = mul i32 %1183, %indvar1317
  %2865 = add i32 %2216, %2864
  %scevgep1319 = getelementptr i8* %1163, i32 %2865
  call void @llvm.memset.p0i8.i32(i8* %scevgep1319, i8 1, i32 %2863, i32 1, i1 false)
  br label %2866

; <label>:2866                                    ; preds = %.preheader575, %.lr.ph906
  %indvar.next1318 = add i32 %indvar1317, 1
  %lftr.wideiv1320 = trunc i32 %indvar.next1318 to i8
  %exitcond1321 = icmp eq i8 %lftr.wideiv1320, %len_z148.0.len_z250.0
  br i1 %exitcond1321, label %._crit_edge909.loopexit, label %.preheader575

._crit_edge909.loopexit:                          ; preds = %2866
  br label %._crit_edge909

._crit_edge909:                                   ; preds = %._crit_edge909.loopexit, %._crit_edge901
  %2867 = or i32 %2212, %y30.0914
  %2868 = icmp sgt i32 %2867, -1
  %2869 = icmp sgt i32 %1183, %y30.0914
  %or.cond.i127 = and i1 %2195, %2869
  %or.cond1720 = and i1 %2868, %or.cond.i127
  %brmerge1722.demorgan = and i1 %or.cond1720, %2214
  br i1 %brmerge1722.demorgan, label %map_get.exit129, label %map_get.exit129.thread

map_get.exit129.thread:                           ; preds = %._crit_edge909
  %2870 = getelementptr inbounds i8* %1159, i32 %chunk_shadow_index.11
  br label %2875

map_get.exit129:                                  ; preds = %._crit_edge909
  %2871 = load i64* %2222, align 4, !tbaa !7
  %2872 = and i64 %2871, 67108864
  %2873 = icmp eq i64 %2872, 0
  %2874 = getelementptr inbounds i8* %1159, i32 %chunk_shadow_index.11
  br i1 %2873, label %2877, label %2875

; <label>:2875                                    ; preds = %map_get.exit129.thread, %map_get.exit129
  %2876 = phi i8* [ %2870, %map_get.exit129.thread ], [ %2874, %map_get.exit129 ]
  store i8 1, i8* %2876, align 1, !tbaa !9
  br label %2878

; <label>:2877                                    ; preds = %map_get.exit129
  store i8 0, i8* %2874, align 1, !tbaa !9
  br label %2878

; <label>:2878                                    ; preds = %2877, %2875
  %s61.0 = phi float [ 7.500000e-01, %2875 ], [ 1.000000e+00, %2877 ]
  %chunk_shadow_index.12 = add nsw i32 %chunk_shadow_index.11, 1
  %2879 = lshr i64 %2223, 42
  %2880 = and i64 %2879, 1
  %2881 = lshr i64 %2223, 41
  %2882 = and i64 %2881, 1
  %2883 = add nuw nsw i64 %2880, %2882
  %2884 = lshr i64 %2223, 40
  %2885 = and i64 %2884, 1
  %2886 = lshr i64 %2223, 43
  %2887 = and i64 %2886, 1
  %2888 = add nuw nsw i64 %2885, %2887
  %2889 = icmp ugt i64 %2883, %2888
  %2890 = and i32 %2226, 255
  %2891 = sitofp i32 %2890 to float
  %2892 = fmul fast float %2891, 0x3FE99999A0000000
  %2893 = fmul fast float %2892, %s61.0
  br i1 %2889, label %2894, label %3011

; <label>:2894                                    ; preds = %2878
  %2895 = uitofp i64 %2880 to float
  %2896 = getelementptr inbounds i8* %1158, i32 %chunk_color_index.8
  %2897 = and i32 %2228, 255
  %2898 = sitofp i32 %2897 to float
  %2899 = fmul fast float %2898, 0x3FE99999A0000000
  %2900 = fmul fast float %2899, %s61.0
  %2901 = and i32 %2230, 255
  %2902 = sitofp i32 %2901 to float
  %2903 = fmul fast float %2902, 0x3FE99999A0000000
  %2904 = fmul fast float %2903, %s61.0
  %2905 = uitofp i64 %2885 to float
  %2906 = insertelement <2 x float> undef, float %2895, i32 0
  %2907 = insertelement <2 x float> %2906, float %2905, i32 1
  %2908 = insertelement <2 x float> undef, float %2893, i32 0
  %2909 = insertelement <2 x float> %2908, float %2893, i32 1
  %2910 = insertelement <2 x float> undef, float %2900, i32 0
  %2911 = insertelement <2 x float> %2910, float %2900, i32 1
  %2912 = insertelement <2 x float> undef, float %2904, i32 0
  %2913 = insertelement <2 x float> %2912, float %2904, i32 1
  %2914 = uitofp i64 %2882 to float
  %2915 = add nsw i32 %chunk_color_index.8, 8
  %2916 = getelementptr inbounds i8* %1158, i32 %2915
  %2917 = uitofp i64 %2887 to float
  %2918 = insertelement <2 x float> undef, float %2914, i32 0
  %2919 = insertelement <2 x float> %2918, float %2917, i32 1
  %2920 = shufflevector <2 x float> %2907, <2 x float> %2919, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2921 = fmul fast <4 x float> %2920, <float 0x3FD6666660000000, float 0x3FD6666660000000, float 0x3FD6666660000000, float 0x3FD6666660000000>
  %2922 = fadd fast <4 x float> %2921, <float 0x3FE4CCCCC0000000, float 0x3FE4CCCCC0000000, float 0x3FE4CCCCC0000000, float 0x3FE4CCCCC0000000>
  %2923 = shufflevector <2 x float> %2909, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %2924 = fmul fast <4 x float> %2922, %2923
  %2925 = extractelement <4 x float> %2924, i32 0
  %2926 = extractelement <4 x float> %2924, i32 1
  %2927 = fptosi float %2925 to i32
  %2928 = trunc i32 %2927 to i8
  %2929 = fptosi float %2926 to i32
  %2930 = trunc i32 %2929 to i8
  %2931 = insertelement <2 x i8> undef, i8 %2928, i32 0
  %2932 = extractelement <4 x float> %2924, i32 2
  %2933 = extractelement <4 x float> %2924, i32 3
  %2934 = fptosi float %2932 to i32
  %2935 = trunc i32 %2934 to i8
  %2936 = fptosi float %2933 to i32
  %2937 = trunc i32 %2936 to i8
  %2938 = shufflevector <2 x float> %2911, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %2939 = fmul fast <4 x float> %2922, %2938
  %2940 = extractelement <4 x float> %2939, i32 0
  %2941 = extractelement <4 x float> %2939, i32 1
  %2942 = fptosi float %2940 to i32
  %2943 = trunc i32 %2942 to i8
  %2944 = fptosi float %2941 to i32
  %2945 = trunc i32 %2944 to i8
  %2946 = insertelement <2 x i8> undef, i8 %2945, i32 0
  %2947 = insertelement <2 x i8> %2931, i8 %2943, i32 1
  %2948 = extractelement <4 x float> %2939, i32 2
  %2949 = extractelement <4 x float> %2939, i32 3
  %2950 = fptosi float %2948 to i32
  %2951 = trunc i32 %2950 to i8
  %2952 = insertelement <2 x i8> undef, i8 %2935, i32 0
  %2953 = insertelement <2 x i8> %2952, i8 %2951, i32 1
  %2954 = fptosi float %2949 to i32
  %2955 = trunc i32 %2954 to i8
  %2956 = shufflevector <2 x float> %2913, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %2957 = fmul fast <4 x float> %2922, %2956
  %2958 = extractelement <4 x float> %2957, i32 0
  %2959 = extractelement <4 x float> %2957, i32 1
  %2960 = fptosi float %2958 to i32
  %2961 = trunc i32 %2960 to i8
  %2962 = insertelement <2 x i8> undef, i8 %2961, i32 0
  %2963 = fptosi float %2959 to i32
  %2964 = trunc i32 %2963 to i8
  %2965 = insertelement <2 x i8> %2962, i8 %2930, i32 1
  %2966 = insertelement <2 x i8> %2946, i8 %2964, i32 1
  %2967 = shufflevector <2 x i8> %2965, <2 x i8> %2953, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2968 = shufflevector <2 x i8> %2947, <2 x i8> %2966, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2969 = shufflevector <4 x i8> %2968, <4 x i8> %2967, <8 x i32> <i32 0, i32 1, i32 4, i32 5, i32 2, i32 3, i32 6, i32 7>
  %2970 = bitcast i8* %2896 to <8 x i8>*
  store <8 x i8> %2969, <8 x i8>* %2970, align 1, !tbaa !9
  %2971 = extractelement <4 x float> %2957, i32 2
  %2972 = extractelement <4 x float> %2957, i32 3
  %2973 = fptosi float %2971 to i32
  %2974 = trunc i32 %2973 to i8
  %2975 = insertelement <2 x i8> undef, i8 %2974, i32 0
  %2976 = insertelement <2 x i8> %2975, i8 %2937, i32 1
  %2977 = bitcast i8* %2916 to <4 x i8>*
  %2978 = fptosi float %2972 to i32
  %2979 = trunc i32 %2978 to i8
  %2980 = add nsw i32 %chunk_color_index.8, 12
  %2981 = insertelement <2 x i8> undef, i8 %2955, i32 0
  %2982 = insertelement <2 x i8> %2981, i8 %2979, i32 1
  %2983 = shufflevector <2 x i8> %2976, <2 x i8> %2982, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i8> %2983, <4 x i8>* %2977, align 1, !tbaa !9
  %2984 = getelementptr inbounds i16* %1156, i32 %chunk_vertex_index.8
  %2985 = trunc i32 %y30.0914 to i16
  %2986 = insertelement <2 x i16> undef, i16 %2200, i32 0
  %2987 = insertelement <2 x i16> %2986, i16 %2985, i32 1
  %2988 = insertelement <2 x i16> undef, i16 %2213, i32 0
  %2989 = insertelement <2 x i16> %2988, i16 %2200, i32 1
  %2990 = zext i8 %len_y147.0.len_y249.0 to i32
  %2991 = add nsw i32 %2990, %y30.0914
  %2992 = trunc i32 %2991 to i16
  %2993 = insertelement <2 x i16> undef, i16 %2992, i32 0
  %2994 = insertelement <2 x i16> %2993, i16 %2213, i32 1
  %2995 = add nsw i32 %chunk_vertex_index.8, 8
  %2996 = insertelement <2 x i16> %2986, i16 %2992, i32 1
  %2997 = shufflevector <2 x i16> %2989, <2 x i16> %2996, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2998 = shufflevector <2 x i16> %2987, <2 x i16> %2994, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2999 = shufflevector <4 x i16> %2998, <4 x i16> %2997, <8 x i32> <i32 0, i32 1, i32 4, i32 5, i32 2, i32 3, i32 6, i32 7>
  %3000 = bitcast i16* %2984 to <8 x i16>*
  store <8 x i16> %2999, <8 x i16>* %3000, align 2, !tbaa !19
  %3001 = add nsw i32 %2858, %z29.0924
  %3002 = trunc i32 %3001 to i16
  %3003 = getelementptr inbounds i16* %1156, i32 %2995
  %3004 = insertelement <2 x i16> undef, i16 %3002, i32 0
  %3005 = insertelement <2 x i16> %3004, i16 %2200, i32 1
  %3006 = bitcast i16* %3003 to <4 x i16>*
  %3007 = add nsw i32 %chunk_vertex_index.8, 12
  %3008 = insertelement <2 x i16> undef, i16 %2985, i32 0
  %3009 = insertelement <2 x i16> %3008, i16 %3002, i32 1
  %3010 = shufflevector <2 x i16> %3005, <2 x i16> %3009, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i16> %3010, <4 x i16>* %3006, align 2, !tbaa !19
  br label %3128

; <label>:3011                                    ; preds = %2878
  %3012 = uitofp i64 %2885 to float
  %3013 = getelementptr inbounds i8* %1158, i32 %chunk_color_index.8
  %3014 = and i32 %2228, 255
  %3015 = sitofp i32 %3014 to float
  %3016 = fmul fast float %3015, 0x3FE99999A0000000
  %3017 = fmul fast float %3016, %s61.0
  %3018 = and i32 %2230, 255
  %3019 = sitofp i32 %3018 to float
  %3020 = fmul fast float %3019, 0x3FE99999A0000000
  %3021 = fmul fast float %3020, %s61.0
  %3022 = uitofp i64 %2882 to float
  %3023 = insertelement <2 x float> undef, float %3012, i32 0
  %3024 = insertelement <2 x float> %3023, float %3022, i32 1
  %3025 = insertelement <2 x float> undef, float %2893, i32 0
  %3026 = insertelement <2 x float> %3025, float %2893, i32 1
  %3027 = insertelement <2 x float> undef, float %3017, i32 0
  %3028 = insertelement <2 x float> %3027, float %3017, i32 1
  %3029 = insertelement <2 x float> undef, float %3021, i32 0
  %3030 = insertelement <2 x float> %3029, float %3021, i32 1
  %3031 = uitofp i64 %2887 to float
  %3032 = add nsw i32 %chunk_color_index.8, 8
  %3033 = getelementptr inbounds i8* %1158, i32 %3032
  %3034 = uitofp i64 %2880 to float
  %3035 = insertelement <2 x float> undef, float %3031, i32 0
  %3036 = insertelement <2 x float> %3035, float %3034, i32 1
  %3037 = shufflevector <2 x float> %3024, <2 x float> %3036, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3038 = fmul fast <4 x float> %3037, <float 0x3FD6666660000000, float 0x3FD6666660000000, float 0x3FD6666660000000, float 0x3FD6666660000000>
  %3039 = fadd fast <4 x float> %3038, <float 0x3FE4CCCCC0000000, float 0x3FE4CCCCC0000000, float 0x3FE4CCCCC0000000, float 0x3FE4CCCCC0000000>
  %3040 = shufflevector <2 x float> %3026, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %3041 = fmul fast <4 x float> %3039, %3040
  %3042 = extractelement <4 x float> %3041, i32 0
  %3043 = extractelement <4 x float> %3041, i32 1
  %3044 = fptosi float %3042 to i32
  %3045 = trunc i32 %3044 to i8
  %3046 = fptosi float %3043 to i32
  %3047 = trunc i32 %3046 to i8
  %3048 = insertelement <2 x i8> undef, i8 %3045, i32 0
  %3049 = extractelement <4 x float> %3041, i32 2
  %3050 = extractelement <4 x float> %3041, i32 3
  %3051 = fptosi float %3049 to i32
  %3052 = trunc i32 %3051 to i8
  %3053 = fptosi float %3050 to i32
  %3054 = trunc i32 %3053 to i8
  %3055 = shufflevector <2 x float> %3028, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %3056 = fmul fast <4 x float> %3039, %3055
  %3057 = extractelement <4 x float> %3056, i32 0
  %3058 = extractelement <4 x float> %3056, i32 1
  %3059 = fptosi float %3057 to i32
  %3060 = trunc i32 %3059 to i8
  %3061 = fptosi float %3058 to i32
  %3062 = trunc i32 %3061 to i8
  %3063 = insertelement <2 x i8> undef, i8 %3062, i32 0
  %3064 = insertelement <2 x i8> %3048, i8 %3060, i32 1
  %3065 = extractelement <4 x float> %3056, i32 2
  %3066 = extractelement <4 x float> %3056, i32 3
  %3067 = fptosi float %3065 to i32
  %3068 = trunc i32 %3067 to i8
  %3069 = insertelement <2 x i8> undef, i8 %3052, i32 0
  %3070 = insertelement <2 x i8> %3069, i8 %3068, i32 1
  %3071 = fptosi float %3066 to i32
  %3072 = trunc i32 %3071 to i8
  %3073 = shufflevector <2 x float> %3030, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %3074 = fmul fast <4 x float> %3039, %3073
  %3075 = extractelement <4 x float> %3074, i32 0
  %3076 = extractelement <4 x float> %3074, i32 1
  %3077 = fptosi float %3075 to i32
  %3078 = trunc i32 %3077 to i8
  %3079 = insertelement <2 x i8> undef, i8 %3078, i32 0
  %3080 = fptosi float %3076 to i32
  %3081 = trunc i32 %3080 to i8
  %3082 = insertelement <2 x i8> %3079, i8 %3047, i32 1
  %3083 = insertelement <2 x i8> %3063, i8 %3081, i32 1
  %3084 = shufflevector <2 x i8> %3082, <2 x i8> %3070, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3085 = shufflevector <2 x i8> %3064, <2 x i8> %3083, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3086 = shufflevector <4 x i8> %3085, <4 x i8> %3084, <8 x i32> <i32 0, i32 1, i32 4, i32 5, i32 2, i32 3, i32 6, i32 7>
  %3087 = bitcast i8* %3013 to <8 x i8>*
  store <8 x i8> %3086, <8 x i8>* %3087, align 1, !tbaa !9
  %3088 = extractelement <4 x float> %3074, i32 2
  %3089 = extractelement <4 x float> %3074, i32 3
  %3090 = fptosi float %3088 to i32
  %3091 = trunc i32 %3090 to i8
  %3092 = insertelement <2 x i8> undef, i8 %3091, i32 0
  %3093 = insertelement <2 x i8> %3092, i8 %3054, i32 1
  %3094 = bitcast i8* %3033 to <4 x i8>*
  %3095 = fptosi float %3089 to i32
  %3096 = trunc i32 %3095 to i8
  %3097 = add nsw i32 %chunk_color_index.8, 12
  %3098 = insertelement <2 x i8> undef, i8 %3072, i32 0
  %3099 = insertelement <2 x i8> %3098, i8 %3096, i32 1
  %3100 = shufflevector <2 x i8> %3093, <2 x i8> %3099, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i8> %3100, <4 x i8>* %3094, align 1, !tbaa !9
  %3101 = getelementptr inbounds i16* %1156, i32 %chunk_vertex_index.8
  %3102 = zext i8 %len_y147.0.len_y249.0 to i32
  %3103 = add nsw i32 %3102, %y30.0914
  %3104 = trunc i32 %3103 to i16
  %3105 = insertelement <2 x i16> undef, i16 %2200, i32 0
  %3106 = insertelement <2 x i16> %3105, i16 %3104, i32 1
  %3107 = insertelement <2 x i16> undef, i16 %2213, i32 0
  %3108 = insertelement <2 x i16> %3107, i16 %2200, i32 1
  %3109 = add nsw i32 %2858, %z29.0924
  %3110 = trunc i32 %3109 to i16
  %3111 = insertelement <2 x i16> undef, i16 %3104, i32 0
  %3112 = insertelement <2 x i16> %3111, i16 %3110, i32 1
  %3113 = trunc i32 %y30.0914 to i16
  %3114 = add nsw i32 %chunk_vertex_index.8, 8
  %3115 = insertelement <2 x i16> %3105, i16 %3113, i32 1
  %3116 = shufflevector <2 x i16> %3108, <2 x i16> %3115, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3117 = shufflevector <2 x i16> %3106, <2 x i16> %3112, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3118 = shufflevector <4 x i16> %3117, <4 x i16> %3116, <8 x i32> <i32 0, i32 1, i32 4, i32 5, i32 2, i32 3, i32 6, i32 7>
  %3119 = bitcast i16* %3101 to <8 x i16>*
  store <8 x i16> %3118, <8 x i16>* %3119, align 2, !tbaa !19
  %3120 = getelementptr inbounds i16* %1156, i32 %3114
  %3121 = insertelement <2 x i16> undef, i16 %3110, i32 0
  %3122 = insertelement <2 x i16> %3121, i16 %2200, i32 1
  %3123 = bitcast i16* %3120 to <4 x i16>*
  %3124 = add nsw i32 %chunk_vertex_index.8, 12
  %3125 = insertelement <2 x i16> undef, i16 %3113, i32 0
  %3126 = insertelement <2 x i16> %3125, i16 %2213, i32 1
  %3127 = shufflevector <2 x i16> %3122, <2 x i16> %3126, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i16> %3127, <4 x i16>* %3123, align 2, !tbaa !19
  br label %3128

; <label>:3128                                    ; preds = %2215, %2692, %3011, %2894, %2687, %2686
  %chunk_shadow_index.13 = phi i32 [ %chunk_shadow_index.12, %2894 ], [ %chunk_shadow_index.12, %3011 ], [ %chunk_shadow_index.11, %2692 ], [ %chunk_shadow_index.11, %2687 ], [ %chunk_shadow_index.11, %2686 ], [ %chunk_shadow_index.9911, %2215 ]
  %chunk_color_index.9 = phi i32 [ %2980, %2894 ], [ %3097, %3011 ], [ %chunk_color_index.8, %2692 ], [ %chunk_color_index.8, %2687 ], [ %chunk_color_index.8, %2686 ], [ %chunk_color_index.7916, %2215 ]
  %chunk_vertex_index.9 = phi i32 [ %3007, %2894 ], [ %3124, %3011 ], [ %chunk_vertex_index.8, %2692 ], [ %chunk_vertex_index.8, %2687 ], [ %chunk_vertex_index.8, %2686 ], [ %chunk_vertex_index.7917, %2215 ]
  %3129 = add nsw i32 %y30.0914, 1
  %exitcond1322 = icmp eq i32 %3129, %1183
  br i1 %exitcond1322, label %._crit_edge919.loopexit, label %2215

._crit_edge919.loopexit:                          ; preds = %3128
  %chunk_vertex_index.9.lcssa = phi i32 [ %chunk_vertex_index.9, %3128 ]
  %chunk_color_index.9.lcssa = phi i32 [ %chunk_color_index.9, %3128 ]
  %chunk_shadow_index.13.lcssa = phi i32 [ %chunk_shadow_index.13, %3128 ]
  br label %._crit_edge919

._crit_edge919:                                   ; preds = %._crit_edge919.loopexit, %.preheader587
  %chunk_vertex_index.7.lcssa = phi i32 [ %chunk_vertex_index.6927, %.preheader587 ], [ %chunk_vertex_index.9.lcssa, %._crit_edge919.loopexit ]
  %chunk_color_index.7.lcssa = phi i32 [ %chunk_color_index.6926, %.preheader587 ], [ %chunk_color_index.9.lcssa, %._crit_edge919.loopexit ]
  %chunk_shadow_index.9.lcssa = phi i32 [ %chunk_shadow_index.8923, %.preheader587 ], [ %chunk_shadow_index.13.lcssa, %._crit_edge919.loopexit ]
  %3130 = add nsw i32 %z29.0924, 1
  %3131 = icmp sgt i32 %1164, %3130
  %indvar.next1307 = add i32 %indvar1306, 1
  br i1 %3131, label %.preheader587, label %3132

; <label>:3132                                    ; preds = %._crit_edge919
  %chunk_shadow_index.9.lcssa.lcssa = phi i32 [ %chunk_shadow_index.9.lcssa, %._crit_edge919 ]
  %chunk_color_index.7.lcssa.lcssa = phi i32 [ %chunk_color_index.7.lcssa, %._crit_edge919 ]
  %chunk_vertex_index.7.lcssa.lcssa = phi i32 [ %chunk_vertex_index.7.lcssa, %._crit_edge919 ]
  %3133 = icmp slt i32 %2199, %1
  br i1 %3133, label %.preheader589, label %.preheader574

vector.ph1815:                                    ; preds = %.preheader573.lr.ph, %4105
  %y62.0764 = phi i32 [ 0, %.preheader573.lr.ph ], [ %3200, %4105 ]
  %chunk_vertex_index.10763 = phi i32 [ %chunk_vertex_index.7.lcssa.lcssa.lcssa, %.preheader573.lr.ph ], [ %chunk_vertex_index.14.lcssa.lcssa, %4105 ]
  %chunk_color_index.10762 = phi i32 [ %chunk_color_index.7.lcssa.lcssa.lcssa, %.preheader573.lr.ph ], [ %chunk_color_index.14.lcssa.lcssa, %4105 ]
  %chunk_shadow_index.14761 = phi i32 [ %chunk_shadow_index.9.lcssa.lcssa.lcssa, %.preheader573.lr.ph ], [ %chunk_shadow_index.20.lcssa.lcssa, %4105 ]
  br label %vector.body1816

vector.body1816:                                  ; preds = %vector.ph1815
  %3134 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 0, i32 0
  %3135 = bitcast i8* %3134 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %3135, align 1, !tbaa !9
  %3136 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 1, i32 0
  %3137 = bitcast i8* %3136 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %3137, align 1, !tbaa !9
  %3138 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 0, i32 16
  %3139 = bitcast i8* %3138 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %3139, align 1, !tbaa !9
  %3140 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 1, i32 16
  %3141 = bitcast i8* %3140 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %3141, align 1, !tbaa !9
  %3142 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 0, i32 32
  %3143 = bitcast i8* %3142 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %3143, align 1, !tbaa !9
  %3144 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 1, i32 32
  %3145 = bitcast i8* %3144 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %3145, align 1, !tbaa !9
  %3146 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 0, i32 48
  %3147 = bitcast i8* %3146 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %3147, align 1, !tbaa !9
  %3148 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 1, i32 48
  %3149 = bitcast i8* %3148 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %3149, align 1, !tbaa !9
  %3150 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 0, i32 64
  %3151 = bitcast i8* %3150 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %3151, align 1, !tbaa !9
  %3152 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 1, i32 64
  %3153 = bitcast i8* %3152 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %3153, align 1, !tbaa !9
  %3154 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 0, i32 80
  %3155 = bitcast i8* %3154 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %3155, align 1, !tbaa !9
  %3156 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 1, i32 80
  %3157 = bitcast i8* %3156 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %3157, align 1, !tbaa !9
  %3158 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 0, i32 96
  %3159 = bitcast i8* %3158 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %3159, align 1, !tbaa !9
  %3160 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 1, i32 96
  %3161 = bitcast i8* %3160 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %3161, align 1, !tbaa !9
  %3162 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 0, i32 112
  %3163 = bitcast i8* %3162 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %3163, align 1, !tbaa !9
  %3164 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 1, i32 112
  %3165 = bitcast i8* %3164 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %3165, align 1, !tbaa !9
  %3166 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 0, i32 128
  %3167 = bitcast i8* %3166 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %3167, align 1, !tbaa !9
  %3168 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 1, i32 128
  %3169 = bitcast i8* %3168 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %3169, align 1, !tbaa !9
  %3170 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 0, i32 144
  %3171 = bitcast i8* %3170 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %3171, align 1, !tbaa !9
  %3172 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 1, i32 144
  %3173 = bitcast i8* %3172 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %3173, align 1, !tbaa !9
  %3174 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 0, i32 160
  %3175 = bitcast i8* %3174 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %3175, align 1, !tbaa !9
  %3176 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 1, i32 160
  %3177 = bitcast i8* %3176 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %3177, align 1, !tbaa !9
  %3178 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 0, i32 176
  %3179 = bitcast i8* %3178 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %3179, align 1, !tbaa !9
  %3180 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 1, i32 176
  %3181 = bitcast i8* %3180 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %3181, align 1, !tbaa !9
  %3182 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 0, i32 192
  %3183 = bitcast i8* %3182 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %3183, align 1, !tbaa !9
  %3184 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 1, i32 192
  %3185 = bitcast i8* %3184 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %3185, align 1, !tbaa !9
  %3186 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 0, i32 208
  %3187 = bitcast i8* %3186 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %3187, align 1, !tbaa !9
  %3188 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 1, i32 208
  %3189 = bitcast i8* %3188 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %3189, align 1, !tbaa !9
  %3190 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 0, i32 224
  %3191 = bitcast i8* %3190 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %3191, align 1, !tbaa !9
  %3192 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 1, i32 224
  %3193 = bitcast i8* %3192 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %3193, align 1, !tbaa !9
  %3194 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 0, i32 240
  %3195 = bitcast i8* %3194 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %3195, align 1, !tbaa !9
  %3196 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 1, i32 240
  %3197 = bitcast i8* %3196 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %3197, align 1, !tbaa !9
  %3198 = mul nsw i32 %2189, %y62.0764
  %3199 = icmp eq i32 %y62.0764, %2192
  %3200 = add nsw i32 %y62.0764, 1
  %3201 = mul nsw i32 %2189, %3200
  %3202 = trunc i32 %3200 to i16
  %3203 = icmp sgt i32 %2187, %y62.0764
  %3204 = icmp sgt i32 %y62.0764, 0
  %3205 = add nsw i32 %y62.0764, -1
  %3206 = mul nsw i32 %2189, %3205
  %3207 = trunc i32 %y62.0764 to i16
  br label %.preheader571

.preheader571:                                    ; preds = %vector.body1816, %4102
  %indvar1281 = phi i32 [ 0, %vector.body1816 ], [ %indvar.next1282, %4102 ]
  %x64.0760 = phi i32 [ %chunk_x, %vector.body1816 ], [ %4103, %4102 ]
  %chunk_vertex_index.11759 = phi i32 [ %chunk_vertex_index.10763, %vector.body1816 ], [ %chunk_vertex_index.14.lcssa, %4102 ]
  %chunk_color_index.11758 = phi i32 [ %chunk_color_index.10762, %vector.body1816 ], [ %chunk_color_index.14.lcssa, %4102 ]
  %chunk_shadow_index.15757 = phi i32 [ %chunk_shadow_index.14761, %vector.body1816 ], [ %chunk_shadow_index.20.lcssa, %4102 ]
  %3208 = sub i32 %x64.0760, %chunk_x
  %3209 = sub nsw i32 %1, %x64.0760
  %3210 = icmp sgt i32 %3209, 0
  %3211 = or i32 %x64.0760, %y62.0764
  %3212 = trunc i32 %x64.0760 to i16
  %3213 = icmp sgt i32 %2190, %x64.0760
  %or.cond.i124 = and i1 %3213, %3203
  br label %3214

; <label>:3214                                    ; preds = %.preheader571, %4099
  %indvar1279 = phi i32 [ 0, %.preheader571 ], [ %indvar.next1280, %4099 ]
  %z65.0755 = phi i32 [ %chunk_y, %.preheader571 ], [ %4100, %4099 ]
  %chunk_vertex_index.12754 = phi i32 [ %chunk_vertex_index.11759, %.preheader571 ], [ %chunk_vertex_index.14, %4099 ]
  %chunk_color_index.12753 = phi i32 [ %chunk_color_index.11758, %.preheader571 ], [ %chunk_color_index.14, %4099 ]
  %chunk_shadow_index.16750 = phi i32 [ %chunk_shadow_index.15757, %.preheader571 ], [ %chunk_shadow_index.20, %4099 ]
  %3215 = shl i32 %indvar1279, 4
  %3216 = add i32 %indvar1281, %3215
  %3217 = add nsw i32 %3198, %z65.0755
  %3218 = mul nsw i32 %3217, %2190
  %3219 = add nsw i32 %3218, %x64.0760
  %3220 = getelementptr inbounds i64* %2191, i32 %3219
  %3221 = load i64* %3220, align 4, !tbaa !7
  %3222 = icmp eq i64 %3221, 4294967295
  br i1 %3222, label %4099, label %3223

; <label>:3223                                    ; preds = %3214
  %3224 = trunc i64 %3221 to i32
  %3225 = lshr i64 %3221, 8
  %3226 = trunc i64 %3225 to i32
  %3227 = lshr i64 %3221, 16
  %3228 = trunc i64 %3227 to i32
  br i1 %3199, label %3236, label %3229

; <label>:3229                                    ; preds = %3223
  %3230 = add nsw i32 %3201, %z65.0755
  %3231 = mul nsw i32 %3230, %2190
  %3232 = add nsw i32 %3231, %x64.0760
  %3233 = getelementptr inbounds i64* %2191, i32 %3232
  %3234 = load i64* %3233, align 4, !tbaa !7
  %3235 = icmp eq i64 %3234, 4294967295
  br i1 %3235, label %3236, label %3671

; <label>:3236                                    ; preds = %3229, %3223
  %3237 = sub i32 %z65.0755, %chunk_y
  %3238 = shl nsw i32 %3237, 4
  %3239 = add nsw i32 %3238, %3208
  %3240 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 0, i32 %3239
  %3241 = load i8* %3240, align 1, !tbaa !9
  %3242 = icmp eq i8 %3241, 0
  br i1 %3242, label %.preheader570, label %3671

.preheader570:                                    ; preds = %3236
  br i1 %3210, label %.lr.ph627, label %.preheader569

.lr.ph627:                                        ; preds = %.preheader570
  %3243 = sub i32 %3238, %chunk_x
  %3244 = add nsw i32 %3201, %z65.0755
  %3245 = mul nsw i32 %3244, %2190
  br label %3249

.preheader569.loopexit:                           ; preds = %3249, %3258, %3264, %3269
  %len_x170.0.lcssa.ph = phi i8 [ %3270, %3269 ], [ %a74.0626, %3264 ], [ %a74.0626, %3258 ], [ %a74.0626, %3249 ]
  br label %.preheader569

.preheader569:                                    ; preds = %.preheader569.loopexit, %.preheader570
  %len_x170.0.lcssa = phi i8 [ 0, %.preheader570 ], [ %len_x170.0.lcssa.ph, %.preheader569.loopexit ]
  %3246 = sub nsw i32 %1164, %z65.0755
  %3247 = icmp sgt i32 %3246, 1
  br i1 %3247, label %.preheader562.lr.ph, label %.preheader568

.preheader562.lr.ph:                              ; preds = %.preheader569
  %3248 = icmp eq i8 %len_x170.0.lcssa, 0
  br label %.preheader562

; <label>:3249                                    ; preds = %.lr.ph627, %3269
  %3250 = phi i32 [ 0, %.lr.ph627 ], [ %3271, %3269 ]
  %a74.0626 = phi i8 [ 0, %.lr.ph627 ], [ %3270, %3269 ]
  %3251 = add i32 %3250, %x64.0760
  %3252 = add i32 %3251, %3218
  %3253 = getelementptr inbounds i64* %2191, i32 %3252
  %3254 = load i64* %3253, align 4, !tbaa !7
  %3255 = xor i64 %3254, %3221
  %3256 = and i64 %3255, 67679289343
  %3257 = icmp eq i64 %3256, 0
  br i1 %3257, label %3258, label %.preheader569.loopexit

; <label>:3258                                    ; preds = %3249
  %3259 = add i32 %3243, %3251
  %3260 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 0, i32 %3259
  %3261 = load i8* %3260, align 1, !tbaa !9
  %3262 = icmp eq i8 %3261, 0
  br i1 %3262, label %3263, label %.preheader569.loopexit

; <label>:3263                                    ; preds = %3258
  br i1 %3199, label %3269, label %3264

; <label>:3264                                    ; preds = %3263
  %3265 = add nsw i32 %3245, %3251
  %3266 = getelementptr inbounds i64* %2191, i32 %3265
  %3267 = load i64* %3266, align 4, !tbaa !7
  %3268 = icmp eq i64 %3267, 4294967295
  br i1 %3268, label %3269, label %.preheader569.loopexit

; <label>:3269                                    ; preds = %3264, %3263
  %3270 = add i8 %a74.0626, 1
  %3271 = zext i8 %3270 to i32
  %3272 = icmp slt i32 %3271, %3209
  br i1 %3272, label %3249, label %.preheader569.loopexit

.preheader568.loopexit:                           ; preds = %._crit_edge646, %3325
  %len_z171.0.lcssa.ph = phi i8 [ %3326, %3325 ], [ %b75.0649, %._crit_edge646 ]
  br label %.preheader568

.preheader568:                                    ; preds = %.preheader568.loopexit, %.preheader569
  %len_z171.0.lcssa = phi i8 [ 1, %.preheader569 ], [ %len_z171.0.lcssa.ph, %.preheader568.loopexit ]
  %3273 = icmp sgt i32 %3246, 0
  br i1 %3273, label %.lr.ph657.preheader, label %.preheader567

.lr.ph657.preheader:                              ; preds = %.preheader568
  br label %.lr.ph657

.preheader562:                                    ; preds = %.preheader562.lr.ph, %3325
  %3274 = phi i32 [ 1, %.preheader562.lr.ph ], [ %3327, %3325 ]
  %b75.0649 = phi i8 [ 1, %.preheader562.lr.ph ], [ %3326, %3325 ]
  br i1 %3248, label %._crit_edge646, label %.lr.ph639

.lr.ph639:                                        ; preds = %.preheader562
  %3275 = add i32 %3274, %z65.0755
  %3276 = add i32 %3275, %3198
  %3277 = mul nsw i32 %3276, %2190
  %3278 = add i32 %3237, %3274
  %3279 = shl i32 %3278, 4
  %3280 = sub i32 %3279, %chunk_x
  %3281 = add i32 %3275, %3201
  %3282 = mul nsw i32 %3281, %2190
  br i1 %3199, label %.lr.ph639.split.us.preheader, label %.lr.ph639..lr.ph639.split_crit_edge.preheader

.lr.ph639..lr.ph639.split_crit_edge.preheader:    ; preds = %.lr.ph639
  br label %.lr.ph639..lr.ph639.split_crit_edge

.lr.ph639.split.us.preheader:                     ; preds = %.lr.ph639
  br label %.lr.ph639.split.us

.lr.ph639.split.us:                               ; preds = %.lr.ph639.split.us.preheader, %3296
  %indvars.iv1272 = phi i32 [ %indvars.iv.next1273, %3296 ], [ 0, %.lr.ph639.split.us.preheader ]
  %3283 = phi i32 [ %3299, %3296 ], [ 0, %.lr.ph639.split.us.preheader ]
  %3284 = add i32 %3283, %x64.0760
  %3285 = add i32 %3284, %3277
  %3286 = getelementptr inbounds i64* %2191, i32 %3285
  %3287 = load i64* %3286, align 4, !tbaa !7
  %3288 = xor i64 %3287, %3221
  %3289 = and i64 %3288, 67679289343
  %3290 = icmp eq i64 %3289, 0
  br i1 %3290, label %3291, label %._crit_edge642.loopexit

; <label>:3291                                    ; preds = %.lr.ph639.split.us
  %3292 = add i32 %3280, %3284
  %3293 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 0, i32 %3292
  %3294 = load i8* %3293, align 1, !tbaa !9
  %3295 = icmp eq i8 %3294, 0
  br i1 %3295, label %3296, label %._crit_edge640.loopexit

; <label>:3296                                    ; preds = %3291
  %3297 = trunc i32 %indvars.iv1272 to i8
  %3298 = add i8 %3297, 1
  %3299 = zext i8 %3298 to i32
  %3300 = icmp ult i8 %3298, %len_x170.0.lcssa
  %indvars.iv.next1273 = add nuw nsw i32 %indvars.iv1272, 1
  br i1 %3300, label %.lr.ph639.split.us, label %._crit_edge646.loopexit

.lr.ph639..lr.ph639.split_crit_edge:              ; preds = %.lr.ph639..lr.ph639.split_crit_edge.preheader, %3320
  %indvars.iv = phi i32 [ %indvars.iv.next, %3320 ], [ 0, %.lr.ph639..lr.ph639.split_crit_edge.preheader ]
  %3301 = phi i32 [ %3322, %3320 ], [ 0, %.lr.ph639..lr.ph639.split_crit_edge.preheader ]
  %3302 = add i32 %3301, %x64.0760
  %3303 = add i32 %3302, %3277
  %3304 = getelementptr inbounds i64* %2191, i32 %3303
  %3305 = load i64* %3304, align 4, !tbaa !7
  %3306 = xor i64 %3305, %3221
  %3307 = and i64 %3306, 67679289343
  %3308 = icmp eq i64 %3307, 0
  br i1 %3308, label %3309, label %._crit_edge642.loopexit1836

; <label>:3309                                    ; preds = %.lr.ph639..lr.ph639.split_crit_edge
  %3310 = add i32 %3280, %3302
  %3311 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 0, i32 %3310
  %3312 = load i8* %3311, align 1, !tbaa !9
  %3313 = icmp eq i8 %3312, 0
  br i1 %3313, label %3314, label %._crit_edge640.loopexit1837

; <label>:3314                                    ; preds = %3309
  %3315 = add nsw i32 %3282, %3302
  %3316 = getelementptr inbounds i64* %2191, i32 %3315
  %3317 = load i64* %3316, align 4, !tbaa !7
  %3318 = icmp eq i64 %3317, 4294967295
  %3319 = trunc i32 %indvars.iv to i8
  br i1 %3318, label %3320, label %._crit_edge646.loopexit1838

; <label>:3320                                    ; preds = %3314
  %3321 = add i8 %3319, 1
  %3322 = zext i8 %3321 to i32
  %3323 = icmp ult i8 %3321, %len_x170.0.lcssa
  %indvars.iv.next = add nuw nsw i32 %indvars.iv, 1
  br i1 %3323, label %.lr.ph639..lr.ph639.split_crit_edge, label %._crit_edge646.loopexit1838

._crit_edge640.loopexit:                          ; preds = %3291
  %indvars.iv1272.lcssa1843 = phi i32 [ %indvars.iv1272, %3291 ]
  br label %._crit_edge640

._crit_edge640.loopexit1837:                      ; preds = %3309
  %indvars.iv.lcssa1841 = phi i32 [ %indvars.iv, %3309 ]
  br label %._crit_edge640

._crit_edge640:                                   ; preds = %._crit_edge640.loopexit1837, %._crit_edge640.loopexit
  %split641.in = phi i32 [ %indvars.iv1272.lcssa1843, %._crit_edge640.loopexit ], [ %indvars.iv.lcssa1841, %._crit_edge640.loopexit1837 ]
  %split641 = trunc i32 %split641.in to i8
  br label %._crit_edge646

._crit_edge642.loopexit:                          ; preds = %.lr.ph639.split.us
  %indvars.iv1272.lcssa = phi i32 [ %indvars.iv1272, %.lr.ph639.split.us ]
  br label %._crit_edge642

._crit_edge642.loopexit1836:                      ; preds = %.lr.ph639..lr.ph639.split_crit_edge
  %indvars.iv.lcssa = phi i32 [ %indvars.iv, %.lr.ph639..lr.ph639.split_crit_edge ]
  br label %._crit_edge642

._crit_edge642:                                   ; preds = %._crit_edge642.loopexit1836, %._crit_edge642.loopexit
  %split643.in = phi i32 [ %indvars.iv1272.lcssa, %._crit_edge642.loopexit ], [ %indvars.iv.lcssa, %._crit_edge642.loopexit1836 ]
  %split643 = trunc i32 %split643.in to i8
  br label %._crit_edge646

._crit_edge646.loopexit:                          ; preds = %3296
  %.lcssa = phi i8 [ %3298, %3296 ]
  br label %._crit_edge646

._crit_edge646.loopexit1838:                      ; preds = %3314, %3320
  %a76.0.lcssa.ph = phi i8 [ %3321, %3320 ], [ %3319, %3314 ]
  br label %._crit_edge646

._crit_edge646:                                   ; preds = %._crit_edge646.loopexit1838, %._crit_edge646.loopexit, %.preheader562, %._crit_edge642, %._crit_edge640
  %a76.0.lcssa = phi i8 [ %split641, %._crit_edge640 ], [ %split643, %._crit_edge642 ], [ 0, %.preheader562 ], [ %.lcssa, %._crit_edge646.loopexit ], [ %a76.0.lcssa.ph, %._crit_edge646.loopexit1838 ]
  %3324 = icmp eq i8 %a76.0.lcssa, %len_x170.0.lcssa
  br i1 %3324, label %3325, label %.preheader568.loopexit

; <label>:3325                                    ; preds = %._crit_edge646
  %3326 = add i8 %b75.0649, 1
  %3327 = zext i8 %3326 to i32
  %3328 = icmp slt i32 %3327, %3246
  br i1 %3328, label %.preheader562, label %.preheader568.loopexit

.preheader567.loopexit:                           ; preds = %.lr.ph657, %3341, %3349, %3356
  %len_z273.0.lcssa.ph = phi i8 [ %3357, %3356 ], [ %a77.0656, %3349 ], [ %a77.0656, %3341 ], [ %a77.0656, %.lr.ph657 ]
  br label %.preheader567

.preheader567:                                    ; preds = %.preheader567.loopexit, %.preheader568
  %len_z273.0.lcssa = phi i8 [ 0, %.preheader568 ], [ %len_z273.0.lcssa.ph, %.preheader567.loopexit ]
  %3329 = icmp sgt i32 %3209, 1
  br i1 %3329, label %.preheader561.lr.ph, label %._crit_edge677

.preheader561.lr.ph:                              ; preds = %.preheader567
  %3330 = icmp eq i8 %len_z273.0.lcssa, 0
  br label %.preheader561

.lr.ph657:                                        ; preds = %.lr.ph657.preheader, %3356
  %3331 = phi i32 [ %3358, %3356 ], [ 0, %.lr.ph657.preheader ]
  %a77.0656 = phi i8 [ %3357, %3356 ], [ 0, %.lr.ph657.preheader ]
  %3332 = add i32 %3331, %z65.0755
  %3333 = add i32 %3332, %3198
  %3334 = mul nsw i32 %3333, %2190
  %3335 = add nsw i32 %3334, %x64.0760
  %3336 = getelementptr inbounds i64* %2191, i32 %3335
  %3337 = load i64* %3336, align 4, !tbaa !7
  %3338 = xor i64 %3337, %3221
  %3339 = and i64 %3338, 67679289343
  %3340 = icmp eq i64 %3339, 0
  br i1 %3340, label %3341, label %.preheader567.loopexit

; <label>:3341                                    ; preds = %.lr.ph657
  %3342 = add i32 %3237, %3331
  %3343 = shl i32 %3342, 4
  %3344 = add nsw i32 %3343, %3208
  %3345 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 0, i32 %3344
  %3346 = load i8* %3345, align 1, !tbaa !9
  %3347 = icmp eq i8 %3346, 0
  br i1 %3347, label %3348, label %.preheader567.loopexit

; <label>:3348                                    ; preds = %3341
  br i1 %3199, label %3356, label %3349

; <label>:3349                                    ; preds = %3348
  %3350 = add i32 %3332, %3201
  %3351 = mul nsw i32 %3350, %2190
  %3352 = add nsw i32 %3351, %x64.0760
  %3353 = getelementptr inbounds i64* %2191, i32 %3352
  %3354 = load i64* %3353, align 4, !tbaa !7
  %3355 = icmp eq i64 %3354, 4294967295
  br i1 %3355, label %3356, label %.preheader567.loopexit

; <label>:3356                                    ; preds = %3349, %3348
  %3357 = add i8 %a77.0656, 1
  %3358 = zext i8 %3357 to i32
  %3359 = icmp slt i32 %3358, %3246
  br i1 %3359, label %.lr.ph657, label %.preheader567.loopexit

.preheader561:                                    ; preds = %.preheader561.lr.ph, %3397
  %3360 = phi i32 [ 1, %.preheader561.lr.ph ], [ %3399, %3397 ]
  %b78.0676 = phi i8 [ 1, %.preheader561.lr.ph ], [ %3398, %3397 ]
  %3361 = add i32 %3360, %x64.0760
  %3362 = sub i32 %3361, %chunk_x
  br i1 %3330, label %._crit_edge673, label %.lr.ph666.preheader

.lr.ph666.preheader:                              ; preds = %.preheader561
  br label %.lr.ph666

.lr.ph666:                                        ; preds = %.lr.ph666.preheader, %3388
  %indvars.iv1274 = phi i32 [ %indvars.iv.next1275, %3388 ], [ 0, %.lr.ph666.preheader ]
  %3363 = phi i32 [ %3391, %3388 ], [ 0, %.lr.ph666.preheader ]
  %3364 = add i32 %3363, %z65.0755
  %3365 = add i32 %3364, %3198
  %3366 = mul nsw i32 %3365, %2190
  %3367 = add i32 %3361, %3366
  %3368 = getelementptr inbounds i64* %2191, i32 %3367
  %3369 = load i64* %3368, align 4, !tbaa !7
  %3370 = xor i64 %3369, %3221
  %3371 = and i64 %3370, 67679289343
  %3372 = icmp eq i64 %3371, 0
  br i1 %3372, label %3373, label %._crit_edge669

; <label>:3373                                    ; preds = %.lr.ph666
  %3374 = add i32 %3237, %3363
  %3375 = shl i32 %3374, 4
  %3376 = add nsw i32 %3362, %3375
  %3377 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 0, i32 %3376
  %3378 = load i8* %3377, align 1, !tbaa !9
  %3379 = icmp eq i8 %3378, 0
  br i1 %3379, label %3380, label %._crit_edge667

; <label>:3380                                    ; preds = %3373
  br i1 %3199, label %3388, label %3381

; <label>:3381                                    ; preds = %3380
  %3382 = add i32 %3364, %3201
  %3383 = mul nsw i32 %3382, %2190
  %3384 = add nsw i32 %3383, %3361
  %3385 = getelementptr inbounds i64* %2191, i32 %3384
  %3386 = load i64* %3385, align 4, !tbaa !7
  %3387 = icmp eq i64 %3386, 4294967295
  br i1 %3387, label %3388, label %._crit_edge671

; <label>:3388                                    ; preds = %3380, %3381
  %3389 = trunc i32 %indvars.iv1274 to i8
  %3390 = add i8 %3389, 1
  %3391 = zext i8 %3390 to i32
  %3392 = icmp ult i8 %3390, %len_z273.0.lcssa
  %indvars.iv.next1275 = add nuw nsw i32 %indvars.iv1274, 1
  br i1 %3392, label %.lr.ph666, label %._crit_edge673.loopexit

._crit_edge667:                                   ; preds = %3373
  %indvars.iv1274.lcssa1845 = phi i32 [ %indvars.iv1274, %3373 ]
  %3393 = trunc i32 %indvars.iv1274.lcssa1845 to i8
  br label %._crit_edge673

._crit_edge669:                                   ; preds = %.lr.ph666
  %indvars.iv1274.lcssa = phi i32 [ %indvars.iv1274, %.lr.ph666 ]
  %3394 = trunc i32 %indvars.iv1274.lcssa to i8
  br label %._crit_edge673

._crit_edge671:                                   ; preds = %3381
  %indvars.iv1274.lcssa1846 = phi i32 [ %indvars.iv1274, %3381 ]
  %3395 = trunc i32 %indvars.iv1274.lcssa1846 to i8
  br label %._crit_edge673

._crit_edge673.loopexit:                          ; preds = %3388
  %.lcssa1848 = phi i8 [ %3390, %3388 ]
  br label %._crit_edge673

._crit_edge673:                                   ; preds = %._crit_edge673.loopexit, %.preheader561, %._crit_edge671, %._crit_edge669, %._crit_edge667
  %a79.0.lcssa = phi i8 [ %3393, %._crit_edge667 ], [ %3394, %._crit_edge669 ], [ %3395, %._crit_edge671 ], [ 0, %.preheader561 ], [ %.lcssa1848, %._crit_edge673.loopexit ]
  %3396 = icmp eq i8 %a79.0.lcssa, %len_z273.0.lcssa
  br i1 %3396, label %3397, label %._crit_edge677.loopexit

; <label>:3397                                    ; preds = %._crit_edge673
  %3398 = add i8 %b78.0676, 1
  %3399 = zext i8 %3398 to i32
  %3400 = icmp slt i32 %3399, %3209
  br i1 %3400, label %.preheader561, label %._crit_edge677.loopexit

._crit_edge677.loopexit:                          ; preds = %._crit_edge673, %3397
  %len_x272.0.lcssa.ph = phi i8 [ %3398, %3397 ], [ %b78.0676, %._crit_edge673 ]
  br label %._crit_edge677

._crit_edge677:                                   ; preds = %._crit_edge677.loopexit, %.preheader567
  %len_x272.0.lcssa = phi i8 [ 1, %.preheader567 ], [ %len_x272.0.lcssa.ph, %._crit_edge677.loopexit ]
  %3401 = zext i8 %len_x170.0.lcssa to i32
  %3402 = zext i8 %len_z171.0.lcssa to i32
  %3403 = mul nsw i32 %3402, %3401
  %3404 = zext i8 %len_x272.0.lcssa to i32
  %3405 = zext i8 %len_z273.0.lcssa to i32
  %3406 = mul nsw i32 %3404, %3405
  %3407 = icmp ugt i32 %3403, %3406
  %len_x170.0.len_x272.0 = select i1 %3407, i8 %len_x170.0.lcssa, i8 %len_x272.0.lcssa
  %len_z171.0.len_z273.0 = select i1 %3407, i8 %len_z171.0.lcssa, i8 %len_z273.0.lcssa
  %3408 = zext i8 %len_z171.0.len_z273.0 to i32
  %3409 = icmp eq i8 %len_z171.0.len_z273.0, 0
  br i1 %3409, label %._crit_edge685, label %.preheader560.lr.ph

.preheader560.lr.ph:                              ; preds = %._crit_edge677
  %3410 = icmp eq i8 %len_x170.0.len_x272.0, 0
  %3411 = add i8 %len_x170.0.len_x272.0, -1
  %3412 = zext i8 %3411 to i32
  %3413 = add nuw nsw i32 %3412, 1
  br label %.preheader560

.preheader560:                                    ; preds = %3416, %.preheader560.lr.ph
  %indvar = phi i32 [ 0, %.preheader560.lr.ph ], [ %indvar.next, %3416 ]
  br i1 %3410, label %3416, label %.lr.ph682

.lr.ph682:                                        ; preds = %.preheader560
  %3414 = shl i32 %indvar, 4
  %3415 = add i32 %3216, %3414
  %scevgep = getelementptr [2 x [256 x i8]]* %checked_voxels, i32 0, i32 0, i32 %3415
  call void @llvm.memset.p0i8.i32(i8* %scevgep, i8 1, i32 %3413, i32 1, i1 false)
  br label %3416

; <label>:3416                                    ; preds = %.preheader560, %.lr.ph682
  %indvar.next = add i32 %indvar, 1
  %lftr.wideiv = trunc i32 %indvar.next to i8
  %exitcond1283 = icmp eq i8 %lftr.wideiv, %len_z171.0.len_z273.0
  br i1 %exitcond1283, label %._crit_edge685.loopexit, label %.preheader560

._crit_edge685.loopexit:                          ; preds = %3416
  br label %._crit_edge685

._crit_edge685:                                   ; preds = %._crit_edge685.loopexit, %._crit_edge677
  %3417 = or i32 %3211, %z65.0755
  %.not1729 = icmp sgt i32 %3417, -1
  %brmerge1723.not = and i1 %or.cond.i124, %.not1729
  %3418 = icmp sgt i32 %2189, %z65.0755
  %or.cond1724 = and i1 %brmerge1723.not, %3418
  br i1 %or.cond1724, label %map_get.exit126, label %map_get.exit126.thread

map_get.exit126.thread:                           ; preds = %._crit_edge685
  %3419 = getelementptr inbounds i8* %1159, i32 %chunk_shadow_index.16750
  br label %3423

map_get.exit126:                                  ; preds = %._crit_edge685
  %3420 = and i64 %3221, 16777216
  %3421 = icmp eq i64 %3420, 0
  %3422 = getelementptr inbounds i8* %1159, i32 %chunk_shadow_index.16750
  br i1 %3421, label %3425, label %3423

; <label>:3423                                    ; preds = %map_get.exit126.thread, %map_get.exit126
  %3424 = phi i8* [ %3419, %map_get.exit126.thread ], [ %3422, %map_get.exit126 ]
  store i8 1, i8* %3424, align 1, !tbaa !9
  br label %3426

; <label>:3425                                    ; preds = %map_get.exit126
  store i8 0, i8* %3422, align 1, !tbaa !9
  br label %3426

; <label>:3426                                    ; preds = %3425, %3423
  %s84.0 = phi float [ 7.500000e-01, %3423 ], [ 1.000000e+00, %3425 ]
  %chunk_shadow_index.17 = add nsw i32 %chunk_shadow_index.16750, 1
  %3427 = lshr i64 %3221, 34
  %3428 = and i64 %3427, 1
  %3429 = lshr i64 %3221, 33
  %3430 = and i64 %3429, 1
  %3431 = add nuw nsw i64 %3428, %3430
  %3432 = lshr i64 %3221, 32
  %3433 = and i64 %3432, 1
  %3434 = lshr i64 %3221, 35
  %3435 = and i64 %3434, 1
  %3436 = add nuw nsw i64 %3433, %3435
  %3437 = icmp ugt i64 %3431, %3436
  %3438 = and i32 %3224, 255
  %3439 = sitofp i32 %3438 to float
  %3440 = fmul fast float %3439, %s84.0
  br i1 %3437, label %3441, label %3556

; <label>:3441                                    ; preds = %3426
  %3442 = uitofp i64 %3428 to float
  %3443 = getelementptr inbounds i8* %1158, i32 %chunk_color_index.12753
  %3444 = and i32 %3226, 255
  %3445 = sitofp i32 %3444 to float
  %3446 = fmul fast float %3445, %s84.0
  %3447 = and i32 %3228, 255
  %3448 = sitofp i32 %3447 to float
  %3449 = fmul fast float %3448, %s84.0
  %3450 = uitofp i64 %3433 to float
  %3451 = insertelement <2 x float> undef, float %3442, i32 0
  %3452 = insertelement <2 x float> %3451, float %3450, i32 1
  %3453 = insertelement <2 x float> undef, float %3440, i32 0
  %3454 = insertelement <2 x float> %3453, float %3440, i32 1
  %3455 = insertelement <2 x float> undef, float %3446, i32 0
  %3456 = insertelement <2 x float> %3455, float %3446, i32 1
  %3457 = insertelement <2 x float> undef, float %3449, i32 0
  %3458 = insertelement <2 x float> %3457, float %3449, i32 1
  %3459 = uitofp i64 %3430 to float
  %3460 = add nsw i32 %chunk_color_index.12753, 8
  %3461 = getelementptr inbounds i8* %1158, i32 %3460
  %3462 = uitofp i64 %3435 to float
  %3463 = insertelement <2 x float> undef, float %3459, i32 0
  %3464 = insertelement <2 x float> %3463, float %3462, i32 1
  %3465 = shufflevector <2 x float> %3452, <2 x float> %3464, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3466 = fmul fast <4 x float> %3465, <float 0x3FD6666660000000, float 0x3FD6666660000000, float 0x3FD6666660000000, float 0x3FD6666660000000>
  %3467 = fadd fast <4 x float> %3466, <float 0x3FE4CCCCC0000000, float 0x3FE4CCCCC0000000, float 0x3FE4CCCCC0000000, float 0x3FE4CCCCC0000000>
  %3468 = shufflevector <2 x float> %3454, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %3469 = fmul fast <4 x float> %3467, %3468
  %3470 = extractelement <4 x float> %3469, i32 0
  %3471 = extractelement <4 x float> %3469, i32 1
  %3472 = fptosi float %3470 to i32
  %3473 = trunc i32 %3472 to i8
  %3474 = fptosi float %3471 to i32
  %3475 = trunc i32 %3474 to i8
  %3476 = insertelement <2 x i8> undef, i8 %3473, i32 0
  %3477 = extractelement <4 x float> %3469, i32 2
  %3478 = extractelement <4 x float> %3469, i32 3
  %3479 = fptosi float %3477 to i32
  %3480 = trunc i32 %3479 to i8
  %3481 = fptosi float %3478 to i32
  %3482 = trunc i32 %3481 to i8
  %3483 = shufflevector <2 x float> %3456, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %3484 = fmul fast <4 x float> %3467, %3483
  %3485 = extractelement <4 x float> %3484, i32 0
  %3486 = extractelement <4 x float> %3484, i32 1
  %3487 = fptosi float %3485 to i32
  %3488 = trunc i32 %3487 to i8
  %3489 = fptosi float %3486 to i32
  %3490 = trunc i32 %3489 to i8
  %3491 = insertelement <2 x i8> undef, i8 %3490, i32 0
  %3492 = insertelement <2 x i8> %3476, i8 %3488, i32 1
  %3493 = extractelement <4 x float> %3484, i32 2
  %3494 = extractelement <4 x float> %3484, i32 3
  %3495 = fptosi float %3493 to i32
  %3496 = trunc i32 %3495 to i8
  %3497 = insertelement <2 x i8> undef, i8 %3480, i32 0
  %3498 = insertelement <2 x i8> %3497, i8 %3496, i32 1
  %3499 = fptosi float %3494 to i32
  %3500 = trunc i32 %3499 to i8
  %3501 = shufflevector <2 x float> %3458, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %3502 = fmul fast <4 x float> %3467, %3501
  %3503 = extractelement <4 x float> %3502, i32 0
  %3504 = extractelement <4 x float> %3502, i32 1
  %3505 = fptosi float %3503 to i32
  %3506 = trunc i32 %3505 to i8
  %3507 = insertelement <2 x i8> undef, i8 %3506, i32 0
  %3508 = fptosi float %3504 to i32
  %3509 = trunc i32 %3508 to i8
  %3510 = insertelement <2 x i8> %3507, i8 %3475, i32 1
  %3511 = insertelement <2 x i8> %3491, i8 %3509, i32 1
  %3512 = shufflevector <2 x i8> %3510, <2 x i8> %3498, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3513 = shufflevector <2 x i8> %3492, <2 x i8> %3511, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3514 = shufflevector <4 x i8> %3513, <4 x i8> %3512, <8 x i32> <i32 0, i32 1, i32 4, i32 5, i32 2, i32 3, i32 6, i32 7>
  %3515 = bitcast i8* %3443 to <8 x i8>*
  store <8 x i8> %3514, <8 x i8>* %3515, align 1, !tbaa !9
  %3516 = extractelement <4 x float> %3502, i32 2
  %3517 = extractelement <4 x float> %3502, i32 3
  %3518 = fptosi float %3516 to i32
  %3519 = trunc i32 %3518 to i8
  %3520 = insertelement <2 x i8> undef, i8 %3519, i32 0
  %3521 = insertelement <2 x i8> %3520, i8 %3482, i32 1
  %3522 = bitcast i8* %3461 to <4 x i8>*
  %3523 = fptosi float %3517 to i32
  %3524 = trunc i32 %3523 to i8
  %3525 = add nsw i32 %chunk_color_index.12753, 12
  %3526 = insertelement <2 x i8> undef, i8 %3500, i32 0
  %3527 = insertelement <2 x i8> %3526, i8 %3524, i32 1
  %3528 = shufflevector <2 x i8> %3521, <2 x i8> %3527, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i8> %3528, <4 x i8>* %3522, align 1, !tbaa !9
  %3529 = getelementptr inbounds i16* %1156, i32 %chunk_vertex_index.12754
  %3530 = insertelement <2 x i16> undef, i16 %3212, i32 0
  %3531 = insertelement <2 x i16> %3530, i16 %3202, i32 1
  %3532 = trunc i32 %z65.0755 to i16
  %3533 = insertelement <2 x i16> undef, i16 %3532, i32 0
  %3534 = insertelement <2 x i16> %3533, i16 %3212, i32 1
  %3535 = add nsw i32 %3408, %z65.0755
  %3536 = trunc i32 %3535 to i16
  %3537 = insertelement <2 x i16> undef, i16 %3202, i32 0
  %3538 = insertelement <2 x i16> %3537, i16 %3536, i32 1
  %3539 = zext i8 %len_x170.0.len_x272.0 to i32
  %3540 = add nsw i32 %3539, %x64.0760
  %3541 = trunc i32 %3540 to i16
  %3542 = add nsw i32 %chunk_vertex_index.12754, 8
  %3543 = insertelement <2 x i16> undef, i16 %3541, i32 0
  %3544 = insertelement <2 x i16> %3543, i16 %3202, i32 1
  %3545 = shufflevector <2 x i16> %3534, <2 x i16> %3544, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3546 = shufflevector <2 x i16> %3531, <2 x i16> %3538, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3547 = shufflevector <4 x i16> %3546, <4 x i16> %3545, <8 x i32> <i32 0, i32 1, i32 4, i32 5, i32 2, i32 3, i32 6, i32 7>
  %3548 = bitcast i16* %3529 to <8 x i16>*
  store <8 x i16> %3547, <8 x i16>* %3548, align 2, !tbaa !19
  %3549 = getelementptr inbounds i16* %1156, i32 %3542
  %3550 = insertelement <2 x i16> undef, i16 %3536, i32 0
  %3551 = insertelement <2 x i16> %3550, i16 %3541, i32 1
  %3552 = bitcast i16* %3549 to <4 x i16>*
  %3553 = add nsw i32 %chunk_vertex_index.12754, 12
  %3554 = insertelement <2 x i16> %3537, i16 %3532, i32 1
  %3555 = shufflevector <2 x i16> %3551, <2 x i16> %3554, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i16> %3555, <4 x i16>* %3552, align 2, !tbaa !19
  br label %3671

; <label>:3556                                    ; preds = %3426
  %3557 = uitofp i64 %3433 to float
  %3558 = getelementptr inbounds i8* %1158, i32 %chunk_color_index.12753
  %3559 = and i32 %3226, 255
  %3560 = sitofp i32 %3559 to float
  %3561 = fmul fast float %3560, %s84.0
  %3562 = and i32 %3228, 255
  %3563 = sitofp i32 %3562 to float
  %3564 = fmul fast float %3563, %s84.0
  %3565 = uitofp i64 %3430 to float
  %3566 = insertelement <2 x float> undef, float %3557, i32 0
  %3567 = insertelement <2 x float> %3566, float %3565, i32 1
  %3568 = insertelement <2 x float> undef, float %3440, i32 0
  %3569 = insertelement <2 x float> %3568, float %3440, i32 1
  %3570 = insertelement <2 x float> undef, float %3561, i32 0
  %3571 = insertelement <2 x float> %3570, float %3561, i32 1
  %3572 = insertelement <2 x float> undef, float %3564, i32 0
  %3573 = insertelement <2 x float> %3572, float %3564, i32 1
  %3574 = uitofp i64 %3435 to float
  %3575 = add nsw i32 %chunk_color_index.12753, 8
  %3576 = getelementptr inbounds i8* %1158, i32 %3575
  %3577 = uitofp i64 %3428 to float
  %3578 = insertelement <2 x float> undef, float %3574, i32 0
  %3579 = insertelement <2 x float> %3578, float %3577, i32 1
  %3580 = shufflevector <2 x float> %3567, <2 x float> %3579, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3581 = fmul fast <4 x float> %3580, <float 0x3FD6666660000000, float 0x3FD6666660000000, float 0x3FD6666660000000, float 0x3FD6666660000000>
  %3582 = fadd fast <4 x float> %3581, <float 0x3FE4CCCCC0000000, float 0x3FE4CCCCC0000000, float 0x3FE4CCCCC0000000, float 0x3FE4CCCCC0000000>
  %3583 = shufflevector <2 x float> %3569, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %3584 = fmul fast <4 x float> %3582, %3583
  %3585 = extractelement <4 x float> %3584, i32 0
  %3586 = extractelement <4 x float> %3584, i32 1
  %3587 = fptosi float %3585 to i32
  %3588 = trunc i32 %3587 to i8
  %3589 = fptosi float %3586 to i32
  %3590 = trunc i32 %3589 to i8
  %3591 = insertelement <2 x i8> undef, i8 %3588, i32 0
  %3592 = extractelement <4 x float> %3584, i32 2
  %3593 = extractelement <4 x float> %3584, i32 3
  %3594 = fptosi float %3592 to i32
  %3595 = trunc i32 %3594 to i8
  %3596 = fptosi float %3593 to i32
  %3597 = trunc i32 %3596 to i8
  %3598 = shufflevector <2 x float> %3571, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %3599 = fmul fast <4 x float> %3582, %3598
  %3600 = extractelement <4 x float> %3599, i32 0
  %3601 = extractelement <4 x float> %3599, i32 1
  %3602 = fptosi float %3600 to i32
  %3603 = trunc i32 %3602 to i8
  %3604 = fptosi float %3601 to i32
  %3605 = trunc i32 %3604 to i8
  %3606 = insertelement <2 x i8> undef, i8 %3605, i32 0
  %3607 = insertelement <2 x i8> %3591, i8 %3603, i32 1
  %3608 = extractelement <4 x float> %3599, i32 2
  %3609 = extractelement <4 x float> %3599, i32 3
  %3610 = fptosi float %3608 to i32
  %3611 = trunc i32 %3610 to i8
  %3612 = insertelement <2 x i8> undef, i8 %3595, i32 0
  %3613 = insertelement <2 x i8> %3612, i8 %3611, i32 1
  %3614 = fptosi float %3609 to i32
  %3615 = trunc i32 %3614 to i8
  %3616 = shufflevector <2 x float> %3573, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %3617 = fmul fast <4 x float> %3582, %3616
  %3618 = extractelement <4 x float> %3617, i32 0
  %3619 = extractelement <4 x float> %3617, i32 1
  %3620 = fptosi float %3618 to i32
  %3621 = trunc i32 %3620 to i8
  %3622 = insertelement <2 x i8> undef, i8 %3621, i32 0
  %3623 = fptosi float %3619 to i32
  %3624 = trunc i32 %3623 to i8
  %3625 = insertelement <2 x i8> %3622, i8 %3590, i32 1
  %3626 = insertelement <2 x i8> %3606, i8 %3624, i32 1
  %3627 = shufflevector <2 x i8> %3625, <2 x i8> %3613, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3628 = shufflevector <2 x i8> %3607, <2 x i8> %3626, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3629 = shufflevector <4 x i8> %3628, <4 x i8> %3627, <8 x i32> <i32 0, i32 1, i32 4, i32 5, i32 2, i32 3, i32 6, i32 7>
  %3630 = bitcast i8* %3558 to <8 x i8>*
  store <8 x i8> %3629, <8 x i8>* %3630, align 1, !tbaa !9
  %3631 = extractelement <4 x float> %3617, i32 2
  %3632 = extractelement <4 x float> %3617, i32 3
  %3633 = fptosi float %3631 to i32
  %3634 = trunc i32 %3633 to i8
  %3635 = insertelement <2 x i8> undef, i8 %3634, i32 0
  %3636 = insertelement <2 x i8> %3635, i8 %3597, i32 1
  %3637 = bitcast i8* %3576 to <4 x i8>*
  %3638 = fptosi float %3632 to i32
  %3639 = trunc i32 %3638 to i8
  %3640 = add nsw i32 %chunk_color_index.12753, 12
  %3641 = insertelement <2 x i8> undef, i8 %3615, i32 0
  %3642 = insertelement <2 x i8> %3641, i8 %3639, i32 1
  %3643 = shufflevector <2 x i8> %3636, <2 x i8> %3642, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i8> %3643, <4 x i8>* %3637, align 1, !tbaa !9
  %3644 = getelementptr inbounds i16* %1156, i32 %chunk_vertex_index.12754
  %3645 = insertelement <2 x i16> undef, i16 %3212, i32 0
  %3646 = insertelement <2 x i16> %3645, i16 %3202, i32 1
  %3647 = add nsw i32 %3408, %z65.0755
  %3648 = trunc i32 %3647 to i16
  %3649 = zext i8 %len_x170.0.len_x272.0 to i32
  %3650 = add nsw i32 %3649, %x64.0760
  %3651 = trunc i32 %3650 to i16
  %3652 = insertelement <2 x i16> undef, i16 %3648, i32 0
  %3653 = insertelement <2 x i16> %3652, i16 %3651, i32 1
  %3654 = insertelement <2 x i16> undef, i16 %3202, i32 0
  %3655 = insertelement <2 x i16> %3654, i16 %3648, i32 1
  %3656 = add nsw i32 %chunk_vertex_index.12754, 8
  %3657 = insertelement <2 x i16> undef, i16 %3651, i32 0
  %3658 = insertelement <2 x i16> %3657, i16 %3202, i32 1
  %3659 = shufflevector <2 x i16> %3653, <2 x i16> %3658, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3660 = shufflevector <2 x i16> %3646, <2 x i16> %3655, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3661 = shufflevector <4 x i16> %3660, <4 x i16> %3659, <8 x i32> <i32 0, i32 1, i32 4, i32 5, i32 2, i32 3, i32 6, i32 7>
  %3662 = bitcast i16* %3644 to <8 x i16>*
  store <8 x i16> %3661, <8 x i16>* %3662, align 2, !tbaa !19
  %3663 = trunc i32 %z65.0755 to i16
  %3664 = getelementptr inbounds i16* %1156, i32 %3656
  %3665 = insertelement <2 x i16> undef, i16 %3663, i32 0
  %3666 = insertelement <2 x i16> %3665, i16 %3212, i32 1
  %3667 = bitcast i16* %3664 to <4 x i16>*
  %3668 = add nsw i32 %chunk_vertex_index.12754, 12
  %3669 = insertelement <2 x i16> %3654, i16 %3663, i32 1
  %3670 = shufflevector <2 x i16> %3666, <2 x i16> %3669, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i16> %3670, <4 x i16>* %3667, align 2, !tbaa !19
  br label %3671

; <label>:3671                                    ; preds = %3236, %3556, %3441, %3229
  %chunk_shadow_index.18 = phi i32 [ %chunk_shadow_index.17, %3441 ], [ %chunk_shadow_index.17, %3556 ], [ %chunk_shadow_index.16750, %3236 ], [ %chunk_shadow_index.16750, %3229 ]
  %chunk_color_index.13 = phi i32 [ %3525, %3441 ], [ %3640, %3556 ], [ %chunk_color_index.12753, %3236 ], [ %chunk_color_index.12753, %3229 ]
  %chunk_vertex_index.13 = phi i32 [ %3553, %3441 ], [ %3668, %3556 ], [ %chunk_vertex_index.12754, %3236 ], [ %chunk_vertex_index.12754, %3229 ]
  br i1 %3204, label %3672, label %4099

; <label>:3672                                    ; preds = %3671
  %3673 = add nsw i32 %3206, %z65.0755
  %3674 = mul nsw i32 %3673, %2190
  %3675 = add nsw i32 %3674, %x64.0760
  %3676 = getelementptr inbounds i64* %2191, i32 %3675
  %3677 = load i64* %3676, align 4, !tbaa !7
  %3678 = icmp eq i64 %3677, 4294967295
  br i1 %3678, label %3679, label %4099

; <label>:3679                                    ; preds = %3672
  %3680 = sub i32 %z65.0755, %chunk_y
  %3681 = shl nsw i32 %3680, 4
  %3682 = add i32 %3681, %3208
  %3683 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 1, i32 %3682
  %3684 = load i8* %3683, align 1, !tbaa !9
  %3685 = icmp eq i8 %3684, 0
  br i1 %3685, label %.preheader566, label %4099

.preheader566:                                    ; preds = %3679
  br i1 %3210, label %.lr.ph689.preheader, label %.preheader565

.lr.ph689.preheader:                              ; preds = %.preheader566
  br label %.lr.ph689

.preheader565.loopexit:                           ; preds = %.lr.ph689, %3697, %3702, %3707
  %len_x185.0.lcssa.ph = phi i8 [ %3708, %3707 ], [ %a89.0688, %3702 ], [ %a89.0688, %3697 ], [ %a89.0688, %.lr.ph689 ]
  br label %.preheader565

.preheader565:                                    ; preds = %.preheader565.loopexit, %.preheader566
  %len_x185.0.lcssa = phi i8 [ 0, %.preheader566 ], [ %len_x185.0.lcssa.ph, %.preheader565.loopexit ]
  %3686 = sub nsw i32 %1164, %z65.0755
  %3687 = icmp sgt i32 %3686, 1
  br i1 %3687, label %.preheader559.lr.ph, label %.preheader564

.preheader559.lr.ph:                              ; preds = %.preheader565
  %3688 = icmp eq i8 %len_x185.0.lcssa, 0
  br label %.preheader559

.lr.ph689:                                        ; preds = %.lr.ph689.preheader, %3707
  %3689 = phi i32 [ %3709, %3707 ], [ 0, %.lr.ph689.preheader ]
  %a89.0688 = phi i8 [ %3708, %3707 ], [ 0, %.lr.ph689.preheader ]
  %3690 = add i32 %3689, %x64.0760
  %3691 = add i32 %3690, %3218
  %3692 = getelementptr inbounds i64* %2191, i32 %3691
  %3693 = load i64* %3692, align 4, !tbaa !7
  %3694 = xor i64 %3693, %3221
  %3695 = and i64 %3694, 1034063708159
  %3696 = icmp eq i64 %3695, 0
  br i1 %3696, label %3697, label %.preheader565.loopexit

; <label>:3697                                    ; preds = %.lr.ph689
  %3698 = add i32 %3682, %3689
  %3699 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 1, i32 %3698
  %3700 = load i8* %3699, align 1, !tbaa !9
  %3701 = icmp eq i8 %3700, 0
  br i1 %3701, label %3702, label %.preheader565.loopexit

; <label>:3702                                    ; preds = %3697
  %3703 = add i32 %3690, %3674
  %3704 = getelementptr inbounds i64* %2191, i32 %3703
  %3705 = load i64* %3704, align 4, !tbaa !7
  %3706 = icmp eq i64 %3705, 4294967295
  br i1 %3706, label %3707, label %.preheader565.loopexit

; <label>:3707                                    ; preds = %3702
  %3708 = add i8 %a89.0688, 1
  %3709 = zext i8 %3708 to i32
  %3710 = icmp slt i32 %3709, %3209
  br i1 %3710, label %.lr.ph689, label %.preheader565.loopexit

.preheader564.loopexit:                           ; preds = %._crit_edge705, %3748
  %len_z186.0.lcssa.ph = phi i8 [ %3749, %3748 ], [ %b90.0712, %._crit_edge705 ]
  br label %.preheader564

.preheader564:                                    ; preds = %.preheader564.loopexit, %.preheader565
  %len_z186.0.lcssa = phi i8 [ 1, %.preheader565 ], [ %len_z186.0.lcssa.ph, %.preheader564.loopexit ]
  %3711 = icmp sgt i32 %3686, 0
  br i1 %3711, label %.lr.ph720.preheader, label %.preheader563

.lr.ph720.preheader:                              ; preds = %.preheader564
  br label %.lr.ph720

.preheader559:                                    ; preds = %.preheader559.lr.ph, %3748
  %3712 = phi i32 [ 1, %.preheader559.lr.ph ], [ %3750, %3748 ]
  %b90.0712 = phi i8 [ 1, %.preheader559.lr.ph ], [ %3749, %3748 ]
  br i1 %3688, label %._crit_edge705, label %.lr.ph702

.lr.ph702:                                        ; preds = %.preheader559
  %3713 = add i32 %3712, %z65.0755
  %3714 = add i32 %3713, %3198
  %3715 = mul nsw i32 %3714, %2190
  %3716 = add i32 %3680, %3712
  %3717 = shl i32 %3716, 4
  %3718 = add i32 %3208, %3717
  %3719 = add i32 %3713, %3206
  %3720 = mul nsw i32 %3719, %2190
  br label %3724

; <label>:3721                                    ; preds = %3738
  %3722 = zext i8 %3744 to i32
  %3723 = icmp ult i8 %3744, %len_x185.0.lcssa
  %indvars.iv.next1285 = add nuw nsw i32 %indvars.iv1284, 1
  br i1 %3723, label %3724, label %._crit_edge705.loopexit

; <label>:3724                                    ; preds = %.lr.ph702, %3721
  %indvars.iv1284 = phi i32 [ 0, %.lr.ph702 ], [ %indvars.iv.next1285, %3721 ]
  %3725 = phi i32 [ 0, %.lr.ph702 ], [ %3722, %3721 ]
  %3726 = add i32 %3725, %x64.0760
  %3727 = add i32 %3726, %3715
  %3728 = getelementptr inbounds i64* %2191, i32 %3727
  %3729 = load i64* %3728, align 4, !tbaa !7
  %3730 = xor i64 %3729, %3221
  %3731 = and i64 %3730, 1034063708159
  %3732 = icmp eq i64 %3731, 0
  br i1 %3732, label %3733, label %._crit_edge703

; <label>:3733                                    ; preds = %3724
  %3734 = add i32 %3718, %3725
  %3735 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 1, i32 %3734
  %3736 = load i8* %3735, align 1, !tbaa !9
  %3737 = icmp eq i8 %3736, 0
  br i1 %3737, label %3738, label %._crit_edge707

; <label>:3738                                    ; preds = %3733
  %3739 = add i32 %3726, %3720
  %3740 = getelementptr inbounds i64* %2191, i32 %3739
  %3741 = load i64* %3740, align 4, !tbaa !7
  %3742 = icmp eq i64 %3741, 4294967295
  %3743 = trunc i32 %indvars.iv1284 to i8
  %3744 = add i8 %3743, 1
  br i1 %3742, label %3721, label %._crit_edge705.loopexit

._crit_edge703:                                   ; preds = %3724
  %indvars.iv1284.lcssa = phi i32 [ %indvars.iv1284, %3724 ]
  %3745 = trunc i32 %indvars.iv1284.lcssa to i8
  br label %._crit_edge705

._crit_edge707:                                   ; preds = %3733
  %indvars.iv1284.lcssa1849 = phi i32 [ %indvars.iv1284, %3733 ]
  %3746 = trunc i32 %indvars.iv1284.lcssa1849 to i8
  br label %._crit_edge705

._crit_edge705.loopexit:                          ; preds = %3738, %3721
  %a91.0.lcssa.ph = phi i8 [ %3744, %3721 ], [ %3743, %3738 ]
  br label %._crit_edge705

._crit_edge705:                                   ; preds = %._crit_edge705.loopexit, %.preheader559, %._crit_edge707, %._crit_edge703
  %a91.0.lcssa = phi i8 [ %3745, %._crit_edge703 ], [ %3746, %._crit_edge707 ], [ 0, %.preheader559 ], [ %a91.0.lcssa.ph, %._crit_edge705.loopexit ]
  %3747 = icmp eq i8 %a91.0.lcssa, %len_x185.0.lcssa
  br i1 %3747, label %3748, label %.preheader564.loopexit

; <label>:3748                                    ; preds = %._crit_edge705
  %3749 = add i8 %b90.0712, 1
  %3750 = zext i8 %3749 to i32
  %3751 = icmp slt i32 %3750, %3686
  br i1 %3751, label %.preheader559, label %.preheader564.loopexit

.preheader563.loopexit:                           ; preds = %.lr.ph720, %3764, %3771, %3777
  %len_z288.0.lcssa.ph = phi i8 [ %3778, %3777 ], [ %a92.0719, %3771 ], [ %a92.0719, %3764 ], [ %a92.0719, %.lr.ph720 ]
  br label %.preheader563

.preheader563:                                    ; preds = %.preheader563.loopexit, %.preheader564
  %len_z288.0.lcssa = phi i8 [ 0, %.preheader564 ], [ %len_z288.0.lcssa.ph, %.preheader563.loopexit ]
  %3752 = icmp sgt i32 %3209, 1
  br i1 %3752, label %.preheader558.lr.ph, label %._crit_edge740

.preheader558.lr.ph:                              ; preds = %.preheader563
  %3753 = icmp eq i8 %len_z288.0.lcssa, 0
  br label %.preheader558

.lr.ph720:                                        ; preds = %.lr.ph720.preheader, %3777
  %3754 = phi i32 [ %3779, %3777 ], [ 0, %.lr.ph720.preheader ]
  %a92.0719 = phi i8 [ %3778, %3777 ], [ 0, %.lr.ph720.preheader ]
  %3755 = add i32 %3754, %z65.0755
  %3756 = add i32 %3755, %3198
  %3757 = mul nsw i32 %3756, %2190
  %3758 = add nsw i32 %3757, %x64.0760
  %3759 = getelementptr inbounds i64* %2191, i32 %3758
  %3760 = load i64* %3759, align 4, !tbaa !7
  %3761 = xor i64 %3760, %3221
  %3762 = and i64 %3761, 1034063708159
  %3763 = icmp eq i64 %3762, 0
  br i1 %3763, label %3764, label %.preheader563.loopexit

; <label>:3764                                    ; preds = %.lr.ph720
  %3765 = add i32 %3680, %3754
  %3766 = shl i32 %3765, 4
  %3767 = add nsw i32 %3766, %3208
  %3768 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 1, i32 %3767
  %3769 = load i8* %3768, align 1, !tbaa !9
  %3770 = icmp eq i8 %3769, 0
  br i1 %3770, label %3771, label %.preheader563.loopexit

; <label>:3771                                    ; preds = %3764
  %3772 = add i32 %3754, %x64.0760
  %3773 = add i32 %3772, %3674
  %3774 = getelementptr inbounds i64* %2191, i32 %3773
  %3775 = load i64* %3774, align 4, !tbaa !7
  %3776 = icmp eq i64 %3775, 4294967295
  br i1 %3776, label %3777, label %.preheader563.loopexit

; <label>:3777                                    ; preds = %3771
  %3778 = add i8 %a92.0719, 1
  %3779 = zext i8 %3778 to i32
  %3780 = icmp slt i32 %3779, %3686
  br i1 %3780, label %.lr.ph720, label %.preheader563.loopexit

.preheader558:                                    ; preds = %.preheader558.lr.ph, %3819
  %3781 = phi i32 [ 1, %.preheader558.lr.ph ], [ %3821, %3819 ]
  %b93.0739 = phi i8 [ 1, %.preheader558.lr.ph ], [ %3820, %3819 ]
  br i1 %3753, label %._crit_edge732, label %.lr.ph729

.lr.ph729:                                        ; preds = %.preheader558
  %3782 = add i32 %3781, %x64.0760
  %3783 = add i32 %3208, %3781
  %3784 = add i32 %3781, %z65.0755
  %3785 = add i32 %3784, %3206
  %3786 = mul nsw i32 %3785, %2190
  br label %3790

; <label>:3787                                    ; preds = %3808
  %3788 = zext i8 %3815 to i32
  %3789 = icmp ult i8 %3815, %len_z288.0.lcssa
  %indvars.iv.next1287 = add nuw nsw i32 %indvars.iv1286, 1
  br i1 %3789, label %3790, label %._crit_edge732.loopexit

; <label>:3790                                    ; preds = %.lr.ph729, %3787
  %indvars.iv1286 = phi i32 [ 0, %.lr.ph729 ], [ %indvars.iv.next1287, %3787 ]
  %3791 = phi i32 [ 0, %.lr.ph729 ], [ %3788, %3787 ]
  %3792 = add i32 %3791, %z65.0755
  %3793 = add i32 %3792, %3198
  %3794 = mul nsw i32 %3793, %2190
  %3795 = add i32 %3782, %3794
  %3796 = getelementptr inbounds i64* %2191, i32 %3795
  %3797 = load i64* %3796, align 4, !tbaa !7
  %3798 = xor i64 %3797, %3221
  %3799 = and i64 %3798, 1034063708159
  %3800 = icmp eq i64 %3799, 0
  br i1 %3800, label %3801, label %._crit_edge730

; <label>:3801                                    ; preds = %3790
  %3802 = add i32 %3680, %3791
  %3803 = shl i32 %3802, 4
  %3804 = add i32 %3783, %3803
  %3805 = getelementptr inbounds [2 x [256 x i8]]* %checked_voxels, i32 0, i32 1, i32 %3804
  %3806 = load i8* %3805, align 1, !tbaa !9
  %3807 = icmp eq i8 %3806, 0
  br i1 %3807, label %3808, label %._crit_edge734

; <label>:3808                                    ; preds = %3801
  %3809 = add i32 %3791, %x64.0760
  %3810 = add i32 %3809, %3786
  %3811 = getelementptr inbounds i64* %2191, i32 %3810
  %3812 = load i64* %3811, align 4, !tbaa !7
  %3813 = icmp eq i64 %3812, 4294967295
  %3814 = trunc i32 %indvars.iv1286 to i8
  %3815 = add i8 %3814, 1
  br i1 %3813, label %3787, label %._crit_edge732.loopexit

._crit_edge730:                                   ; preds = %3790
  %indvars.iv1286.lcssa = phi i32 [ %indvars.iv1286, %3790 ]
  %3816 = trunc i32 %indvars.iv1286.lcssa to i8
  br label %._crit_edge732

._crit_edge734:                                   ; preds = %3801
  %indvars.iv1286.lcssa1851 = phi i32 [ %indvars.iv1286, %3801 ]
  %3817 = trunc i32 %indvars.iv1286.lcssa1851 to i8
  br label %._crit_edge732

._crit_edge732.loopexit:                          ; preds = %3808, %3787
  %a94.0.lcssa.ph = phi i8 [ %3815, %3787 ], [ %3814, %3808 ]
  br label %._crit_edge732

._crit_edge732:                                   ; preds = %._crit_edge732.loopexit, %.preheader558, %._crit_edge734, %._crit_edge730
  %a94.0.lcssa = phi i8 [ %3816, %._crit_edge730 ], [ %3817, %._crit_edge734 ], [ 0, %.preheader558 ], [ %a94.0.lcssa.ph, %._crit_edge732.loopexit ]
  %3818 = icmp eq i8 %a94.0.lcssa, %len_z288.0.lcssa
  br i1 %3818, label %3819, label %._crit_edge740.loopexit

; <label>:3819                                    ; preds = %._crit_edge732
  %3820 = add i8 %b93.0739, 1
  %3821 = zext i8 %3820 to i32
  %3822 = icmp slt i32 %3821, %3209
  br i1 %3822, label %.preheader558, label %._crit_edge740.loopexit

._crit_edge740.loopexit:                          ; preds = %._crit_edge732, %3819
  %len_x287.0.lcssa.ph = phi i8 [ %3820, %3819 ], [ %b93.0739, %._crit_edge732 ]
  br label %._crit_edge740

._crit_edge740:                                   ; preds = %._crit_edge740.loopexit, %.preheader563
  %len_x287.0.lcssa = phi i8 [ 1, %.preheader563 ], [ %len_x287.0.lcssa.ph, %._crit_edge740.loopexit ]
  %3823 = zext i8 %len_x185.0.lcssa to i32
  %3824 = zext i8 %len_z186.0.lcssa to i32
  %3825 = mul nsw i32 %3824, %3823
  %3826 = zext i8 %len_x287.0.lcssa to i32
  %3827 = zext i8 %len_z288.0.lcssa to i32
  %3828 = mul nsw i32 %3826, %3827
  %3829 = icmp ugt i32 %3825, %3828
  %len_x185.0.len_x287.0 = select i1 %3829, i8 %len_x185.0.lcssa, i8 %len_x287.0.lcssa
  %len_z186.0.len_z288.0 = select i1 %3829, i8 %len_z186.0.lcssa, i8 %len_z288.0.lcssa
  %3830 = zext i8 %len_z186.0.len_z288.0 to i32
  %3831 = icmp eq i8 %len_z186.0.len_z288.0, 0
  br i1 %3831, label %._crit_edge748, label %.preheader557.lr.ph

.preheader557.lr.ph:                              ; preds = %._crit_edge740
  %3832 = icmp eq i8 %len_x185.0.len_x287.0, 0
  %3833 = add i8 %len_x185.0.len_x287.0, -1
  %3834 = zext i8 %3833 to i32
  %3835 = add nuw nsw i32 %3834, 1
  br label %.preheader557

.preheader557:                                    ; preds = %3838, %.preheader557.lr.ph
  %indvar1292 = phi i32 [ 0, %.preheader557.lr.ph ], [ %indvar.next1293, %3838 ]
  br i1 %3832, label %3838, label %.lr.ph745

.lr.ph745:                                        ; preds = %.preheader557
  %3836 = shl i32 %indvar1292, 4
  %3837 = add i32 %3216, %3836
  %scevgep1294 = getelementptr [2 x [256 x i8]]* %checked_voxels, i32 0, i32 1, i32 %3837
  call void @llvm.memset.p0i8.i32(i8* %scevgep1294, i8 1, i32 %3835, i32 1, i1 false)
  br label %3838

; <label>:3838                                    ; preds = %.preheader557, %.lr.ph745
  %indvar.next1293 = add i32 %indvar1292, 1
  %lftr.wideiv1295 = trunc i32 %indvar.next1293 to i8
  %exitcond1296 = icmp eq i8 %lftr.wideiv1295, %len_z186.0.len_z288.0
  br i1 %exitcond1296, label %._crit_edge748.loopexit, label %.preheader557

._crit_edge748.loopexit:                          ; preds = %3838
  br label %._crit_edge748

._crit_edge748:                                   ; preds = %._crit_edge748.loopexit, %._crit_edge740
  %3839 = or i32 %3211, %z65.0755
  %or.cond.i124.not1725.demorgan = and i1 %3213, %3203
  %.not1728 = icmp sgt i32 %3839, -1
  %brmerge1726.not = and i1 %or.cond.i124.not1725.demorgan, %.not1728
  %3840 = icmp sgt i32 %2189, %z65.0755
  %or.cond1727 = and i1 %brmerge1726.not, %3840
  br i1 %or.cond1727, label %map_get.exit123, label %map_get.exit123.thread

map_get.exit123.thread:                           ; preds = %._crit_edge748
  %3841 = getelementptr inbounds i8* %1159, i32 %chunk_shadow_index.18
  br label %3846

map_get.exit123:                                  ; preds = %._crit_edge748
  %3842 = load i64* %3220, align 4, !tbaa !7
  %3843 = and i64 %3842, 33554432
  %3844 = icmp eq i64 %3843, 0
  %3845 = getelementptr inbounds i8* %1159, i32 %chunk_shadow_index.18
  br i1 %3844, label %3848, label %3846

; <label>:3846                                    ; preds = %map_get.exit123.thread, %map_get.exit123
  %3847 = phi i8* [ %3841, %map_get.exit123.thread ], [ %3845, %map_get.exit123 ]
  store i8 1, i8* %3847, align 1, !tbaa !9
  br label %3849

; <label>:3848                                    ; preds = %map_get.exit123
  store i8 0, i8* %3845, align 1, !tbaa !9
  br label %3849

; <label>:3849                                    ; preds = %3848, %3846
  %s99.0 = phi float [ 7.500000e-01, %3846 ], [ 1.000000e+00, %3848 ]
  %chunk_shadow_index.19 = add nsw i32 %chunk_shadow_index.18, 1
  %3850 = lshr i64 %3221, 38
  %3851 = and i64 %3850, 1
  %3852 = lshr i64 %3221, 37
  %3853 = and i64 %3852, 1
  %3854 = add nuw nsw i64 %3851, %3853
  %3855 = lshr i64 %3221, 36
  %3856 = and i64 %3855, 1
  %3857 = lshr i64 %3221, 39
  %3858 = and i64 %3857, 1
  %3859 = add nuw nsw i64 %3856, %3858
  %3860 = icmp ugt i64 %3854, %3859
  %3861 = and i32 %3224, 255
  %3862 = sitofp i32 %3861 to float
  %3863 = fmul fast float %3862, 5.000000e-01
  %3864 = fmul fast float %3863, %s99.0
  br i1 %3860, label %3865, label %3982

; <label>:3865                                    ; preds = %3849
  %3866 = uitofp i64 %3851 to float
  %3867 = getelementptr inbounds i8* %1158, i32 %chunk_color_index.13
  %3868 = and i32 %3226, 255
  %3869 = sitofp i32 %3868 to float
  %3870 = fmul fast float %3869, 5.000000e-01
  %3871 = fmul fast float %3870, %s99.0
  %3872 = and i32 %3228, 255
  %3873 = sitofp i32 %3872 to float
  %3874 = fmul fast float %3873, 5.000000e-01
  %3875 = fmul fast float %3874, %s99.0
  %3876 = uitofp i64 %3858 to float
  %3877 = insertelement <2 x float> undef, float %3866, i32 0
  %3878 = insertelement <2 x float> %3877, float %3876, i32 1
  %3879 = insertelement <2 x float> undef, float %3864, i32 0
  %3880 = insertelement <2 x float> %3879, float %3864, i32 1
  %3881 = insertelement <2 x float> undef, float %3871, i32 0
  %3882 = insertelement <2 x float> %3881, float %3871, i32 1
  %3883 = insertelement <2 x float> undef, float %3875, i32 0
  %3884 = insertelement <2 x float> %3883, float %3875, i32 1
  %3885 = uitofp i64 %3853 to float
  %3886 = add nsw i32 %chunk_color_index.13, 8
  %3887 = getelementptr inbounds i8* %1158, i32 %3886
  %3888 = uitofp i64 %3856 to float
  %3889 = insertelement <2 x float> undef, float %3885, i32 0
  %3890 = insertelement <2 x float> %3889, float %3888, i32 1
  %3891 = shufflevector <2 x float> %3878, <2 x float> %3890, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3892 = fmul fast <4 x float> %3891, <float 0x3FD6666660000000, float 0x3FD6666660000000, float 0x3FD6666660000000, float 0x3FD6666660000000>
  %3893 = fadd fast <4 x float> %3892, <float 0x3FE4CCCCC0000000, float 0x3FE4CCCCC0000000, float 0x3FE4CCCCC0000000, float 0x3FE4CCCCC0000000>
  %3894 = shufflevector <2 x float> %3880, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %3895 = fmul fast <4 x float> %3893, %3894
  %3896 = extractelement <4 x float> %3895, i32 0
  %3897 = extractelement <4 x float> %3895, i32 1
  %3898 = fptosi float %3896 to i32
  %3899 = trunc i32 %3898 to i8
  %3900 = fptosi float %3897 to i32
  %3901 = trunc i32 %3900 to i8
  %3902 = insertelement <2 x i8> undef, i8 %3899, i32 0
  %3903 = extractelement <4 x float> %3895, i32 2
  %3904 = extractelement <4 x float> %3895, i32 3
  %3905 = fptosi float %3903 to i32
  %3906 = trunc i32 %3905 to i8
  %3907 = fptosi float %3904 to i32
  %3908 = trunc i32 %3907 to i8
  %3909 = shufflevector <2 x float> %3882, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %3910 = fmul fast <4 x float> %3893, %3909
  %3911 = extractelement <4 x float> %3910, i32 0
  %3912 = extractelement <4 x float> %3910, i32 1
  %3913 = fptosi float %3911 to i32
  %3914 = trunc i32 %3913 to i8
  %3915 = fptosi float %3912 to i32
  %3916 = trunc i32 %3915 to i8
  %3917 = insertelement <2 x i8> undef, i8 %3916, i32 0
  %3918 = insertelement <2 x i8> %3902, i8 %3914, i32 1
  %3919 = extractelement <4 x float> %3910, i32 2
  %3920 = extractelement <4 x float> %3910, i32 3
  %3921 = fptosi float %3919 to i32
  %3922 = trunc i32 %3921 to i8
  %3923 = insertelement <2 x i8> undef, i8 %3906, i32 0
  %3924 = insertelement <2 x i8> %3923, i8 %3922, i32 1
  %3925 = fptosi float %3920 to i32
  %3926 = trunc i32 %3925 to i8
  %3927 = shufflevector <2 x float> %3884, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %3928 = fmul fast <4 x float> %3893, %3927
  %3929 = extractelement <4 x float> %3928, i32 0
  %3930 = extractelement <4 x float> %3928, i32 1
  %3931 = fptosi float %3929 to i32
  %3932 = trunc i32 %3931 to i8
  %3933 = insertelement <2 x i8> undef, i8 %3932, i32 0
  %3934 = fptosi float %3930 to i32
  %3935 = trunc i32 %3934 to i8
  %3936 = insertelement <2 x i8> %3933, i8 %3901, i32 1
  %3937 = insertelement <2 x i8> %3917, i8 %3935, i32 1
  %3938 = shufflevector <2 x i8> %3936, <2 x i8> %3924, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3939 = shufflevector <2 x i8> %3918, <2 x i8> %3937, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3940 = shufflevector <4 x i8> %3939, <4 x i8> %3938, <8 x i32> <i32 0, i32 1, i32 4, i32 5, i32 2, i32 3, i32 6, i32 7>
  %3941 = bitcast i8* %3867 to <8 x i8>*
  store <8 x i8> %3940, <8 x i8>* %3941, align 1, !tbaa !9
  %3942 = extractelement <4 x float> %3928, i32 2
  %3943 = extractelement <4 x float> %3928, i32 3
  %3944 = fptosi float %3942 to i32
  %3945 = trunc i32 %3944 to i8
  %3946 = insertelement <2 x i8> undef, i8 %3945, i32 0
  %3947 = insertelement <2 x i8> %3946, i8 %3908, i32 1
  %3948 = bitcast i8* %3887 to <4 x i8>*
  %3949 = fptosi float %3943 to i32
  %3950 = trunc i32 %3949 to i8
  %3951 = add nsw i32 %chunk_color_index.13, 12
  %3952 = insertelement <2 x i8> undef, i8 %3926, i32 0
  %3953 = insertelement <2 x i8> %3952, i8 %3950, i32 1
  %3954 = shufflevector <2 x i8> %3947, <2 x i8> %3953, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i8> %3954, <4 x i8>* %3948, align 1, !tbaa !9
  %3955 = getelementptr inbounds i16* %1156, i32 %chunk_vertex_index.13
  %3956 = insertelement <2 x i16> undef, i16 %3212, i32 0
  %3957 = insertelement <2 x i16> %3956, i16 %3207, i32 1
  %3958 = trunc i32 %z65.0755 to i16
  %3959 = zext i8 %len_x185.0.len_x287.0 to i32
  %3960 = add nsw i32 %3959, %x64.0760
  %3961 = trunc i32 %3960 to i16
  %3962 = insertelement <2 x i16> undef, i16 %3958, i32 0
  %3963 = insertelement <2 x i16> %3962, i16 %3961, i32 1
  %3964 = insertelement <2 x i16> undef, i16 %3207, i32 0
  %3965 = insertelement <2 x i16> %3964, i16 %3958, i32 1
  %3966 = add nsw i32 %chunk_vertex_index.13, 8
  %3967 = insertelement <2 x i16> undef, i16 %3961, i32 0
  %3968 = insertelement <2 x i16> %3967, i16 %3207, i32 1
  %3969 = shufflevector <2 x i16> %3963, <2 x i16> %3968, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3970 = shufflevector <2 x i16> %3957, <2 x i16> %3965, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3971 = shufflevector <4 x i16> %3970, <4 x i16> %3969, <8 x i32> <i32 0, i32 1, i32 4, i32 5, i32 2, i32 3, i32 6, i32 7>
  %3972 = bitcast i16* %3955 to <8 x i16>*
  store <8 x i16> %3971, <8 x i16>* %3972, align 2, !tbaa !19
  %3973 = add nsw i32 %3830, %z65.0755
  %3974 = trunc i32 %3973 to i16
  %3975 = getelementptr inbounds i16* %1156, i32 %3966
  %3976 = insertelement <2 x i16> undef, i16 %3974, i32 0
  %3977 = insertelement <2 x i16> %3976, i16 %3212, i32 1
  %3978 = bitcast i16* %3975 to <4 x i16>*
  %3979 = add nsw i32 %chunk_vertex_index.13, 12
  %3980 = insertelement <2 x i16> %3964, i16 %3974, i32 1
  %3981 = shufflevector <2 x i16> %3977, <2 x i16> %3980, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i16> %3981, <4 x i16>* %3978, align 2, !tbaa !19
  br label %4099

; <label>:3982                                    ; preds = %3849
  %3983 = uitofp i64 %3858 to float
  %3984 = getelementptr inbounds i8* %1158, i32 %chunk_color_index.13
  %3985 = and i32 %3226, 255
  %3986 = sitofp i32 %3985 to float
  %3987 = fmul fast float %3986, 5.000000e-01
  %3988 = fmul fast float %3987, %s99.0
  %3989 = and i32 %3228, 255
  %3990 = sitofp i32 %3989 to float
  %3991 = fmul fast float %3990, 5.000000e-01
  %3992 = fmul fast float %3991, %s99.0
  %3993 = uitofp i64 %3853 to float
  %3994 = insertelement <2 x float> undef, float %3983, i32 0
  %3995 = insertelement <2 x float> %3994, float %3993, i32 1
  %3996 = insertelement <2 x float> undef, float %3864, i32 0
  %3997 = insertelement <2 x float> %3996, float %3864, i32 1
  %3998 = insertelement <2 x float> undef, float %3988, i32 0
  %3999 = insertelement <2 x float> %3998, float %3988, i32 1
  %4000 = insertelement <2 x float> undef, float %3992, i32 0
  %4001 = insertelement <2 x float> %4000, float %3992, i32 1
  %4002 = uitofp i64 %3856 to float
  %4003 = add nsw i32 %chunk_color_index.13, 8
  %4004 = getelementptr inbounds i8* %1158, i32 %4003
  %4005 = uitofp i64 %3851 to float
  %4006 = insertelement <2 x float> undef, float %4002, i32 0
  %4007 = insertelement <2 x float> %4006, float %4005, i32 1
  %4008 = shufflevector <2 x float> %3995, <2 x float> %4007, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4009 = fmul fast <4 x float> %4008, <float 0x3FD6666660000000, float 0x3FD6666660000000, float 0x3FD6666660000000, float 0x3FD6666660000000>
  %4010 = fadd fast <4 x float> %4009, <float 0x3FE4CCCCC0000000, float 0x3FE4CCCCC0000000, float 0x3FE4CCCCC0000000, float 0x3FE4CCCCC0000000>
  %4011 = shufflevector <2 x float> %3997, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %4012 = fmul fast <4 x float> %4010, %4011
  %4013 = extractelement <4 x float> %4012, i32 0
  %4014 = extractelement <4 x float> %4012, i32 1
  %4015 = fptosi float %4013 to i32
  %4016 = trunc i32 %4015 to i8
  %4017 = fptosi float %4014 to i32
  %4018 = trunc i32 %4017 to i8
  %4019 = insertelement <2 x i8> undef, i8 %4016, i32 0
  %4020 = extractelement <4 x float> %4012, i32 2
  %4021 = extractelement <4 x float> %4012, i32 3
  %4022 = fptosi float %4020 to i32
  %4023 = trunc i32 %4022 to i8
  %4024 = fptosi float %4021 to i32
  %4025 = trunc i32 %4024 to i8
  %4026 = shufflevector <2 x float> %3999, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %4027 = fmul fast <4 x float> %4010, %4026
  %4028 = extractelement <4 x float> %4027, i32 0
  %4029 = extractelement <4 x float> %4027, i32 1
  %4030 = fptosi float %4028 to i32
  %4031 = trunc i32 %4030 to i8
  %4032 = fptosi float %4029 to i32
  %4033 = trunc i32 %4032 to i8
  %4034 = insertelement <2 x i8> undef, i8 %4033, i32 0
  %4035 = insertelement <2 x i8> %4019, i8 %4031, i32 1
  %4036 = extractelement <4 x float> %4027, i32 2
  %4037 = extractelement <4 x float> %4027, i32 3
  %4038 = fptosi float %4036 to i32
  %4039 = trunc i32 %4038 to i8
  %4040 = insertelement <2 x i8> undef, i8 %4023, i32 0
  %4041 = insertelement <2 x i8> %4040, i8 %4039, i32 1
  %4042 = fptosi float %4037 to i32
  %4043 = trunc i32 %4042 to i8
  %4044 = shufflevector <2 x float> %4001, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %4045 = fmul fast <4 x float> %4010, %4044
  %4046 = extractelement <4 x float> %4045, i32 0
  %4047 = extractelement <4 x float> %4045, i32 1
  %4048 = fptosi float %4046 to i32
  %4049 = trunc i32 %4048 to i8
  %4050 = insertelement <2 x i8> undef, i8 %4049, i32 0
  %4051 = fptosi float %4047 to i32
  %4052 = trunc i32 %4051 to i8
  %4053 = insertelement <2 x i8> %4050, i8 %4018, i32 1
  %4054 = insertelement <2 x i8> %4034, i8 %4052, i32 1
  %4055 = shufflevector <2 x i8> %4053, <2 x i8> %4041, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4056 = shufflevector <2 x i8> %4035, <2 x i8> %4054, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4057 = shufflevector <4 x i8> %4056, <4 x i8> %4055, <8 x i32> <i32 0, i32 1, i32 4, i32 5, i32 2, i32 3, i32 6, i32 7>
  %4058 = bitcast i8* %3984 to <8 x i8>*
  store <8 x i8> %4057, <8 x i8>* %4058, align 1, !tbaa !9
  %4059 = extractelement <4 x float> %4045, i32 2
  %4060 = extractelement <4 x float> %4045, i32 3
  %4061 = fptosi float %4059 to i32
  %4062 = trunc i32 %4061 to i8
  %4063 = insertelement <2 x i8> undef, i8 %4062, i32 0
  %4064 = insertelement <2 x i8> %4063, i8 %4025, i32 1
  %4065 = bitcast i8* %4004 to <4 x i8>*
  %4066 = fptosi float %4060 to i32
  %4067 = trunc i32 %4066 to i8
  %4068 = add nsw i32 %chunk_color_index.13, 12
  %4069 = insertelement <2 x i8> undef, i8 %4043, i32 0
  %4070 = insertelement <2 x i8> %4069, i8 %4067, i32 1
  %4071 = shufflevector <2 x i8> %4064, <2 x i8> %4070, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i8> %4071, <4 x i8>* %4065, align 1, !tbaa !9
  %4072 = zext i8 %len_x185.0.len_x287.0 to i32
  %4073 = add nsw i32 %4072, %x64.0760
  %4074 = trunc i32 %4073 to i16
  %4075 = getelementptr inbounds i16* %1156, i32 %chunk_vertex_index.13
  %4076 = insertelement <2 x i16> undef, i16 %4074, i32 0
  %4077 = insertelement <2 x i16> %4076, i16 %3207, i32 1
  %4078 = trunc i32 %z65.0755 to i16
  %4079 = insertelement <2 x i16> undef, i16 %4078, i32 0
  %4080 = insertelement <2 x i16> %4079, i16 %4074, i32 1
  %4081 = add nsw i32 %3830, %z65.0755
  %4082 = trunc i32 %4081 to i16
  %4083 = insertelement <2 x i16> undef, i16 %3207, i32 0
  %4084 = insertelement <2 x i16> %4083, i16 %4082, i32 1
  %4085 = add nsw i32 %chunk_vertex_index.13, 8
  %4086 = insertelement <2 x i16> undef, i16 %3212, i32 0
  %4087 = insertelement <2 x i16> %4086, i16 %3207, i32 1
  %4088 = shufflevector <2 x i16> %4080, <2 x i16> %4087, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4089 = shufflevector <2 x i16> %4077, <2 x i16> %4084, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4090 = shufflevector <4 x i16> %4089, <4 x i16> %4088, <8 x i32> <i32 0, i32 1, i32 4, i32 5, i32 2, i32 3, i32 6, i32 7>
  %4091 = bitcast i16* %4075 to <8 x i16>*
  store <8 x i16> %4090, <8 x i16>* %4091, align 2, !tbaa !19
  %4092 = getelementptr inbounds i16* %1156, i32 %4085
  %4093 = insertelement <2 x i16> undef, i16 %4082, i32 0
  %4094 = insertelement <2 x i16> %4093, i16 %3212, i32 1
  %4095 = bitcast i16* %4092 to <4 x i16>*
  %4096 = add nsw i32 %chunk_vertex_index.13, 12
  %4097 = insertelement <2 x i16> %4083, i16 %4078, i32 1
  %4098 = shufflevector <2 x i16> %4094, <2 x i16> %4097, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i16> %4098, <4 x i16>* %4095, align 2, !tbaa !19
  br label %4099

; <label>:4099                                    ; preds = %3214, %3679, %3982, %3865, %3672, %3671
  %chunk_shadow_index.20 = phi i32 [ %chunk_shadow_index.19, %3865 ], [ %chunk_shadow_index.19, %3982 ], [ %chunk_shadow_index.18, %3679 ], [ %chunk_shadow_index.18, %3672 ], [ %chunk_shadow_index.18, %3671 ], [ %chunk_shadow_index.16750, %3214 ]
  %chunk_color_index.14 = phi i32 [ %3951, %3865 ], [ %4068, %3982 ], [ %chunk_color_index.13, %3679 ], [ %chunk_color_index.13, %3672 ], [ %chunk_color_index.13, %3671 ], [ %chunk_color_index.12753, %3214 ]
  %chunk_vertex_index.14 = phi i32 [ %3979, %3865 ], [ %4096, %3982 ], [ %chunk_vertex_index.13, %3679 ], [ %chunk_vertex_index.13, %3672 ], [ %chunk_vertex_index.13, %3671 ], [ %chunk_vertex_index.12754, %3214 ]
  %4100 = add nsw i32 %z65.0755, 1
  %4101 = icmp sgt i32 %1164, %4100
  %indvar.next1280 = add i32 %indvar1279, 1
  br i1 %4101, label %3214, label %4102

; <label>:4102                                    ; preds = %4099
  %chunk_vertex_index.14.lcssa = phi i32 [ %chunk_vertex_index.14, %4099 ]
  %chunk_color_index.14.lcssa = phi i32 [ %chunk_color_index.14, %4099 ]
  %chunk_shadow_index.20.lcssa = phi i32 [ %chunk_shadow_index.20, %4099 ]
  %4103 = add nsw i32 %x64.0760, 1
  %4104 = icmp sgt i32 %1, %4103
  %indvar.next1282 = add i32 %indvar1281, 1
  br i1 %4104, label %.preheader571, label %4105

; <label>:4105                                    ; preds = %4102
  %chunk_shadow_index.20.lcssa.lcssa = phi i32 [ %chunk_shadow_index.20.lcssa, %4102 ]
  %chunk_color_index.14.lcssa.lcssa = phi i32 [ %chunk_color_index.14.lcssa, %4102 ]
  %chunk_vertex_index.14.lcssa.lcssa = phi i32 [ %chunk_vertex_index.14.lcssa, %4102 ]
  %4106 = icmp slt i32 %3200, %2187
  br i1 %4106, label %vector.ph1815, label %._crit_edge765.loopexit

._crit_edge765.loopexit:                          ; preds = %4105
  %chunk_vertex_index.14.lcssa.lcssa.lcssa = phi i32 [ %chunk_vertex_index.14.lcssa.lcssa, %4105 ]
  %chunk_color_index.14.lcssa.lcssa.lcssa = phi i32 [ %chunk_color_index.14.lcssa.lcssa, %4105 ]
  br label %._crit_edge765

._crit_edge765:                                   ; preds = %._crit_edge765.loopexit, %.preheader574
  %chunk_vertex_index.10.lcssa = phi i32 [ %chunk_vertex_index.7.lcssa.lcssa.lcssa, %.preheader574 ], [ %chunk_vertex_index.14.lcssa.lcssa.lcssa, %._crit_edge765.loopexit ]
  %chunk_color_index.10.lcssa = phi i32 [ %chunk_color_index.7.lcssa.lcssa.lcssa, %.preheader574 ], [ %chunk_color_index.14.lcssa.lcssa.lcssa, %._crit_edge765.loopexit ]
  tail call void @glEnableClientState(i32 32886) #4
  tail call void @glEnableClientState(i32 32884) #4
  tail call void @glNewList(i32 %displaylist, i32 4864) #4
  tail call void @glColorPointer(i32 3, i32 5121, i32 0, i8* %1158) #4
  tail call void @glVertexPointer(i32 3, i32 5122, i32 0, i8* %1155) #4
  %4107 = sdiv i32 %chunk_vertex_index.10.lcssa, 3
  tail call void @glDrawArrays(i32 7, i32 0, i32 %4107) #4
  tail call void @glEndList() #4
  %4108 = load i8* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 2), align 2, !tbaa !23
  %4109 = icmp eq i8 %4108, 0
  br i1 %4109, label %4123, label %.preheader

.preheader:                                       ; preds = %._crit_edge765
  %4110 = icmp sgt i32 %chunk_color_index.10.lcssa, 0
  br i1 %4110, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %.preheader
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %4121
  %k100.0623 = phi i32 [ %4122, %4121 ], [ 0, %.lr.ph.preheader ]
  %4111 = sdiv i32 %k100.0623, 12
  %4112 = getelementptr inbounds i8* %1159, i32 %4111
  %4113 = load i8* %4112, align 1, !tbaa !9
  %4114 = icmp eq i8 %4113, 0
  br i1 %4114, label %4115, label %4121

; <label>:4115                                    ; preds = %.lr.ph
  %4116 = getelementptr inbounds i8* %1158, i32 %k100.0623
  %4117 = load i8* %4116, align 1, !tbaa !9
  %4118 = uitofp i8 %4117 to float
  %4119 = fmul fast float %4118, 7.500000e-01
  %4120 = fptoui float %4119 to i8
  store i8 %4120, i8* %4116, align 1, !tbaa !9
  br label %4121

; <label>:4121                                    ; preds = %.lr.ph, %4115
  %4122 = add nsw i32 %k100.0623, 1
  %exitcond = icmp eq i32 %4122, %chunk_color_index.10.lcssa
  br i1 %exitcond, label %._crit_edge.loopexit, label %.lr.ph

._crit_edge.loopexit:                             ; preds = %4121
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.preheader
  tail call void @glNewList(i32 %displaylist_shadowed, i32 4864) #4
  tail call void @glColorPointer(i32 3, i32 5121, i32 0, i8* %1158) #4
  tail call void @glVertexPointer(i32 3, i32 5122, i32 0, i8* %1155) #4
  tail call void @glDrawArrays(i32 7, i32 0, i32 %4107) #4
  tail call void @glEndList() #4
  br label %4123

; <label>:4123                                    ; preds = %._crit_edge765, %._crit_edge
  tail call void @glDisableClientState(i32 32886) #4
  tail call void @glDisableClientState(i32 32884) #4
  tail call void @free(i8* %1155) #4
  tail call void @free(i8* %1158) #4
  tail call void @free(i8* %1159) #4
  call void @llvm.lifetime.end(i64 512, i8* %1160) #4
  ret i32 %1182
}

; Function Attrs: nounwind
declare i32 @clock() #0

declare void @glEnableClientState(i32) #3

; Function Attrs: nounwind
define void @chunk_render(i32 %x, i32 %y, i8 zeroext %shadowed) #0 {
  tail call void @glPushMatrix() #4
  %1 = load i32* @map_size_x, align 4, !tbaa !1
  %2 = sub nsw i32 0, %1
  %3 = ashr i32 %x, 31
  %4 = and i32 %3, %2
  %5 = icmp sgt i32 %x, 31
  %6 = select i1 %5, i32 %1, i32 0
  %7 = add nsw i32 %4, %6
  %8 = sitofp i32 %7 to float
  %9 = load i32* @map_size_z, align 4, !tbaa !1
  %10 = sub nsw i32 0, %9
  %11 = ashr i32 %y, 31
  %12 = and i32 %11, %10
  %13 = icmp sgt i32 %y, 31
  %14 = select i1 %13, i32 %9, i32 0
  %15 = add nsw i32 %12, %14
  %16 = sitofp i32 %15 to float
  tail call void @glTranslatef(float %8, float 0.000000e+00, float %16) #4
  %17 = icmp slt i32 %x, 0
  %18 = add nsw i32 %x, 32
  %.x.i = select i1 %17, i32 %18, i32 %x
  %19 = icmp sgt i32 %.x.i, 31
  %20 = add nsw i32 %.x.i, -32
  %.1.i = select i1 %19, i32 %20, i32 %.x.i
  %21 = icmp slt i32 %y, 0
  %22 = add nsw i32 %y, 32
  %.x.i1 = select i1 %21, i32 %22, i32 %y
  %23 = icmp sgt i32 %.x.i1, 31
  %24 = add nsw i32 %.x.i1, -32
  %.1.i2 = select i1 %23, i32 %24, i32 %.x.i1
  %25 = load i8* @chunk_render_mode, align 1, !tbaa !9
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %28, label %27

; <label>:27                                      ; preds = %0
  tail call void @glLineWidth(float 4.000000e+00) #4
  tail call void @glPolygonMode(i32 1032, i32 6913) #4
  br label %28

; <label>:28                                      ; preds = %0, %27
  %29 = icmp eq i8 %shadowed, 0
  %30 = shl nsw i32 %.1.i2, 5
  %31 = or i32 %30, %.1.i
  br i1 %29, label %35, label %32

; <label>:32                                      ; preds = %28
  %33 = getelementptr inbounds [1024 x i32]* @chunk_display_lists_shadowed, i32 0, i32 %31
  %34 = load i32* %33, align 4, !tbaa !1
  tail call void @glCallList(i32 %34) #4
  br label %38

; <label>:35                                      ; preds = %28
  %36 = getelementptr inbounds [1024 x i32]* @chunk_display_lists, i32 0, i32 %31
  %37 = load i32* %36, align 4, !tbaa !1
  tail call void @glCallList(i32 %37) #4
  br label %38

; <label>:38                                      ; preds = %35, %32
  %39 = load i8* @chunk_render_mode, align 1, !tbaa !9
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %42, label %41

; <label>:41                                      ; preds = %38
  tail call void @glPolygonMode(i32 1032, i32 6914) #4
  br label %42

; <label>:42                                      ; preds = %38, %41
  tail call void @glPopMatrix() #4
  ret void
}

declare void @glDisableClientState(i32) #3

; Function Attrs: nounwind
define void @chunk_set_render_mode(i8 zeroext %r) #0 {
  store i8 %r, i8* @chunk_render_mode, align 1, !tbaa !9
  ret void
}

; Function Attrs: nounwind
define void @chunk_rebuild_all() #0 {
  store i8 1, i8* @chunk_geometry_rebuild, align 1, !tbaa !9
  store i32 0, i32* @chunk_geometry_rebuild_state, align 4, !tbaa !1
  ret void
}

declare void @glPushMatrix() #3

declare void @glTranslatef(float, float, float) #3

declare void @glLineWidth(float) #3

declare void @glPolygonMode(i32, i32) #3

declare void @glCallList(i32) #3

declare void @glPopMatrix() #3

; Function Attrs: nounwind readnone
define i64 @vertexAO(i32 %side1, i32 %side2, i32 %corner) #2 {
  %1 = and i32 %side2, %side1
  %2 = icmp ne i32 %1, -1
  %3 = icmp ne i32 %corner, -1
  %or.cond3 = or i1 %2, %3
  %4 = zext i1 %or.cond3 to i64
  %. = xor i64 %4, 1
  ret i64 %.
}

; Function Attrs: nounwind readonly
define i32 @chunk_find_edge(float* %data, i32 %length, i32 %exclude, float %x1, float %y1, float %z1, float %x2, float %y2, float %z2) #1 {
  %1 = icmp sgt i32 %length, 0
  br i1 %1, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %0
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %194
  %k.01 = phi i32 [ %195, %194 ], [ 0, %.lr.ph.preheader ]
  %2 = icmp eq i32 %k.01, %exclude
  br i1 %2, label %194, label %3

; <label>:3                                       ; preds = %.lr.ph
  %4 = getelementptr inbounds float* %data, i32 %k.01
  %5 = load float* %4, align 4, !tbaa !10
  %6 = fcmp oeq float %5, %x1
  br i1 %6, label %7, label %12

; <label>:7                                       ; preds = %3
  %8 = or i32 %k.01, 3
  %9 = getelementptr inbounds float* %data, i32 %8
  %10 = load float* %9, align 4, !tbaa !10
  %11 = fcmp oeq float %10, %x2
  br i1 %11, label %19, label %12

; <label>:12                                      ; preds = %7, %3
  %13 = fcmp oeq float %5, %x2
  br i1 %13, label %14, label %53

; <label>:14                                      ; preds = %12
  %15 = or i32 %k.01, 3
  %16 = getelementptr inbounds float* %data, i32 %15
  %17 = load float* %16, align 4, !tbaa !10
  %18 = fcmp oeq float %17, %x1
  br i1 %18, label %19, label %53

; <label>:19                                      ; preds = %14, %7
  %20 = or i32 %k.01, 1
  %21 = getelementptr inbounds float* %data, i32 %20
  %22 = load float* %21, align 4, !tbaa !10
  %23 = fcmp oeq float %22, %y1
  br i1 %23, label %24, label %29

; <label>:24                                      ; preds = %19
  %25 = add nsw i32 %k.01, 4
  %26 = getelementptr inbounds float* %data, i32 %25
  %27 = load float* %26, align 4, !tbaa !10
  %28 = fcmp oeq float %27, %y2
  br i1 %28, label %36, label %29

; <label>:29                                      ; preds = %24, %19
  %30 = fcmp oeq float %22, %y2
  br i1 %30, label %31, label %53

; <label>:31                                      ; preds = %29
  %32 = add nsw i32 %k.01, 4
  %33 = getelementptr inbounds float* %data, i32 %32
  %34 = load float* %33, align 4, !tbaa !10
  %35 = fcmp oeq float %34, %y1
  br i1 %35, label %36, label %53

; <label>:36                                      ; preds = %31, %24
  %37 = or i32 %k.01, 2
  %38 = getelementptr inbounds float* %data, i32 %37
  %39 = load float* %38, align 4, !tbaa !10
  %40 = fcmp oeq float %39, %z1
  br i1 %40, label %41, label %46

; <label>:41                                      ; preds = %36
  %42 = add nsw i32 %k.01, 5
  %43 = getelementptr inbounds float* %data, i32 %42
  %44 = load float* %43, align 4, !tbaa !10
  %45 = fcmp oeq float %44, %z2
  br i1 %45, label %._crit_edge.loopexit, label %46

; <label>:46                                      ; preds = %41, %36
  %47 = fcmp oeq float %39, %z2
  br i1 %47, label %48, label %53

; <label>:48                                      ; preds = %46
  %49 = add nsw i32 %k.01, 5
  %50 = getelementptr inbounds float* %data, i32 %49
  %51 = load float* %50, align 4, !tbaa !10
  %52 = fcmp oeq float %51, %z1
  br i1 %52, label %._crit_edge.loopexit, label %53

; <label>:53                                      ; preds = %48, %46, %31, %29, %14, %12
  %54 = or i32 %k.01, 3
  %55 = getelementptr inbounds float* %data, i32 %54
  %56 = load float* %55, align 4, !tbaa !10
  %57 = fcmp oeq float %56, %x1
  br i1 %57, label %58, label %63

; <label>:58                                      ; preds = %53
  %59 = add nsw i32 %k.01, 6
  %60 = getelementptr inbounds float* %data, i32 %59
  %61 = load float* %60, align 4, !tbaa !10
  %62 = fcmp oeq float %61, %x2
  br i1 %62, label %70, label %63

; <label>:63                                      ; preds = %58, %53
  %64 = fcmp oeq float %56, %x2
  br i1 %64, label %65, label %._crit_edge27

; <label>:65                                      ; preds = %63
  %66 = add nsw i32 %k.01, 6
  %67 = getelementptr inbounds float* %data, i32 %66
  %68 = load float* %67, align 4, !tbaa !10
  %69 = fcmp oeq float %68, %x1
  br i1 %69, label %70, label %._crit_edge27

; <label>:70                                      ; preds = %65, %58
  %71 = add nsw i32 %k.01, 4
  %72 = getelementptr inbounds float* %data, i32 %71
  %73 = load float* %72, align 4, !tbaa !10
  %74 = fcmp oeq float %73, %y1
  br i1 %74, label %75, label %80

; <label>:75                                      ; preds = %70
  %76 = add nsw i32 %k.01, 7
  %77 = getelementptr inbounds float* %data, i32 %76
  %78 = load float* %77, align 4, !tbaa !10
  %79 = fcmp oeq float %78, %y2
  br i1 %79, label %87, label %80

; <label>:80                                      ; preds = %75, %70
  %81 = fcmp oeq float %73, %y2
  br i1 %81, label %82, label %._crit_edge27

; <label>:82                                      ; preds = %80
  %83 = add nsw i32 %k.01, 7
  %84 = getelementptr inbounds float* %data, i32 %83
  %85 = load float* %84, align 4, !tbaa !10
  %86 = fcmp oeq float %85, %y1
  br i1 %86, label %87, label %._crit_edge27

; <label>:87                                      ; preds = %82, %75
  %88 = add nsw i32 %k.01, 5
  %89 = getelementptr inbounds float* %data, i32 %88
  %90 = load float* %89, align 4, !tbaa !10
  %91 = fcmp oeq float %90, %z1
  br i1 %91, label %92, label %97

; <label>:92                                      ; preds = %87
  %93 = add nsw i32 %k.01, 8
  %94 = getelementptr inbounds float* %data, i32 %93
  %95 = load float* %94, align 4, !tbaa !10
  %96 = fcmp oeq float %95, %z2
  br i1 %96, label %._crit_edge.loopexit, label %97

; <label>:97                                      ; preds = %92, %87
  %98 = fcmp oeq float %90, %z2
  br i1 %98, label %99, label %._crit_edge27

; <label>:99                                      ; preds = %97
  %100 = add nsw i32 %k.01, 8
  %101 = getelementptr inbounds float* %data, i32 %100
  %102 = load float* %101, align 4, !tbaa !10
  %103 = fcmp oeq float %102, %z1
  br i1 %103, label %._crit_edge.loopexit, label %._crit_edge27

._crit_edge27:                                    ; preds = %63, %99, %97, %82, %80, %65
  %104 = add nsw i32 %k.01, 6
  %105 = getelementptr inbounds float* %data, i32 %104
  %106 = load float* %105, align 4, !tbaa !10
  %107 = fcmp oeq float %106, %x1
  br i1 %107, label %108, label %113

; <label>:108                                     ; preds = %._crit_edge27
  %109 = add nsw i32 %k.01, 9
  %110 = getelementptr inbounds float* %data, i32 %109
  %111 = load float* %110, align 4, !tbaa !10
  %112 = fcmp oeq float %111, %x2
  br i1 %112, label %120, label %113

; <label>:113                                     ; preds = %108, %._crit_edge27
  %114 = fcmp oeq float %106, %x2
  br i1 %114, label %115, label %._crit_edge28

; <label>:115                                     ; preds = %113
  %116 = add nsw i32 %k.01, 9
  %117 = getelementptr inbounds float* %data, i32 %116
  %118 = load float* %117, align 4, !tbaa !10
  %119 = fcmp oeq float %118, %x1
  br i1 %119, label %120, label %._crit_edge28

; <label>:120                                     ; preds = %115, %108
  %121 = add nsw i32 %k.01, 7
  %122 = getelementptr inbounds float* %data, i32 %121
  %123 = load float* %122, align 4, !tbaa !10
  %124 = fcmp oeq float %123, %y1
  br i1 %124, label %125, label %130

; <label>:125                                     ; preds = %120
  %126 = add nsw i32 %k.01, 10
  %127 = getelementptr inbounds float* %data, i32 %126
  %128 = load float* %127, align 4, !tbaa !10
  %129 = fcmp oeq float %128, %y2
  br i1 %129, label %137, label %130

; <label>:130                                     ; preds = %125, %120
  %131 = fcmp oeq float %123, %y2
  br i1 %131, label %132, label %._crit_edge28

; <label>:132                                     ; preds = %130
  %133 = add nsw i32 %k.01, 10
  %134 = getelementptr inbounds float* %data, i32 %133
  %135 = load float* %134, align 4, !tbaa !10
  %136 = fcmp oeq float %135, %y1
  br i1 %136, label %137, label %._crit_edge28

; <label>:137                                     ; preds = %132, %125
  %138 = add nsw i32 %k.01, 8
  %139 = getelementptr inbounds float* %data, i32 %138
  %140 = load float* %139, align 4, !tbaa !10
  %141 = fcmp oeq float %140, %z1
  br i1 %141, label %142, label %147

; <label>:142                                     ; preds = %137
  %143 = add nsw i32 %k.01, 11
  %144 = getelementptr inbounds float* %data, i32 %143
  %145 = load float* %144, align 4, !tbaa !10
  %146 = fcmp oeq float %145, %z2
  br i1 %146, label %._crit_edge.loopexit, label %147

; <label>:147                                     ; preds = %142, %137
  %148 = fcmp oeq float %140, %z2
  br i1 %148, label %149, label %._crit_edge28

; <label>:149                                     ; preds = %147
  %150 = add nsw i32 %k.01, 11
  %151 = getelementptr inbounds float* %data, i32 %150
  %152 = load float* %151, align 4, !tbaa !10
  %153 = fcmp oeq float %152, %z1
  br i1 %153, label %._crit_edge.loopexit, label %._crit_edge28

._crit_edge28:                                    ; preds = %113, %149, %147, %132, %130, %115
  %154 = add nsw i32 %k.01, 9
  %155 = getelementptr inbounds float* %data, i32 %154
  %156 = load float* %155, align 4, !tbaa !10
  %157 = fcmp oeq float %156, %x1
  %158 = fcmp oeq float %5, %x2
  %or.cond = and i1 %157, %158
  br i1 %or.cond, label %160, label %159

; <label>:159                                     ; preds = %._crit_edge28
  %.not = fcmp une float %156, %x2
  %.not29 = xor i1 %6, true
  %brmerge = or i1 %.not, %.not29
  br i1 %brmerge, label %194, label %160

; <label>:160                                     ; preds = %159, %._crit_edge28
  %161 = add nsw i32 %k.01, 10
  %162 = getelementptr inbounds float* %data, i32 %161
  %163 = load float* %162, align 4, !tbaa !10
  %164 = fcmp oeq float %163, %y1
  br i1 %164, label %165, label %170

; <label>:165                                     ; preds = %160
  %166 = or i32 %k.01, 1
  %167 = getelementptr inbounds float* %data, i32 %166
  %168 = load float* %167, align 4, !tbaa !10
  %169 = fcmp oeq float %168, %y2
  br i1 %169, label %177, label %170

; <label>:170                                     ; preds = %165, %160
  %171 = fcmp oeq float %163, %y2
  br i1 %171, label %172, label %194

; <label>:172                                     ; preds = %170
  %173 = or i32 %k.01, 1
  %174 = getelementptr inbounds float* %data, i32 %173
  %175 = load float* %174, align 4, !tbaa !10
  %176 = fcmp oeq float %175, %y1
  br i1 %176, label %177, label %194

; <label>:177                                     ; preds = %172, %165
  %178 = add nsw i32 %k.01, 11
  %179 = getelementptr inbounds float* %data, i32 %178
  %180 = load float* %179, align 4, !tbaa !10
  %181 = fcmp oeq float %180, %z1
  br i1 %181, label %182, label %187

; <label>:182                                     ; preds = %177
  %183 = or i32 %k.01, 2
  %184 = getelementptr inbounds float* %data, i32 %183
  %185 = load float* %184, align 4, !tbaa !10
  %186 = fcmp oeq float %185, %z2
  br i1 %186, label %._crit_edge.loopexit, label %187

; <label>:187                                     ; preds = %182, %177
  %188 = fcmp oeq float %180, %z2
  br i1 %188, label %189, label %194

; <label>:189                                     ; preds = %187
  %190 = or i32 %k.01, 2
  %191 = getelementptr inbounds float* %data, i32 %190
  %192 = load float* %191, align 4, !tbaa !10
  %193 = fcmp oeq float %192, %z1
  br i1 %193, label %._crit_edge.loopexit, label %194

; <label>:194                                     ; preds = %159, %.lr.ph, %189, %187, %172, %170
  %195 = add nsw i32 %k.01, 12
  %196 = icmp slt i32 %195, %length
  br i1 %196, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %194, %182, %189, %142, %149, %92, %99, %41, %48
  %.0.ph = phi i32 [ %k.01, %48 ], [ %k.01, %41 ], [ %k.01, %99 ], [ %k.01, %92 ], [ %k.01, %149 ], [ %k.01, %142 ], [ %k.01, %189 ], [ %k.01, %182 ], [ -1, %194 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %0
  %.0 = phi i32 [ -1, %0 ], [ %.0.ph, %._crit_edge.loopexit ]
  ret i32 %.0
}

; Function Attrs: nounwind readonly
define float @chunk_face_light(float* nocapture readonly %data, i32 %k, float %lx, float %ly, float %lz) #1 {
  %1 = add nsw i32 %k, 4
  %2 = getelementptr inbounds float* %data, i32 %1
  %3 = bitcast float* %2 to <2 x float>*
  %4 = add nsw i32 %k, 1
  %5 = getelementptr inbounds float* %data, i32 %4
  %6 = bitcast float* %5 to <2 x float>*
  %7 = load <2 x float>* %6, align 4, !tbaa !10
  %8 = load <2 x float>* %3, align 4, !tbaa !10
  %9 = fsub fast <2 x float> %8, %7
  %10 = add nsw i32 %k, 10
  %11 = getelementptr inbounds float* %data, i32 %10
  %12 = bitcast float* %11 to <2 x float>*
  %13 = load <2 x float>* %12, align 4, !tbaa !10
  %14 = fsub fast <2 x float> %13, %7
  %15 = shufflevector <2 x float> %14, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %16 = fmul fast <2 x float> %9, %15
  %17 = extractelement <2 x float> %16, i32 0
  %18 = extractelement <2 x float> %16, i32 1
  %19 = add nsw i32 %k, 9
  %20 = getelementptr inbounds float* %data, i32 %19
  %21 = load float* %20, align 4, !tbaa !10
  %22 = getelementptr inbounds float* %data, i32 %k
  %23 = load float* %22, align 4, !tbaa !10
  %24 = insertelement <2 x float> undef, float %18, i32 0
  %25 = insertelement <2 x float> %24, float %23, i32 1
  %26 = insertelement <2 x float> undef, float %17, i32 0
  %27 = insertelement <2 x float> %26, float %21, i32 1
  %28 = fsub fast <2 x float> %27, %25
  %29 = extractelement <2 x float> %28, i32 0
  %30 = add nsw i32 %k, 3
  %31 = getelementptr inbounds float* %data, i32 %30
  %32 = load float* %31, align 4, !tbaa !10
  %33 = fsub fast float %32, %23
  %34 = insertelement <2 x float> undef, float %33, i32 0
  %35 = insertelement <2 x float> %34, float %33, i32 1
  %36 = fmul fast <2 x float> %14, %35
  %37 = shufflevector <2 x float> %28, <2 x float> undef, <2 x i32> <i32 1, i32 1>
  %38 = fmul fast <2 x float> %9, %37
  %39 = shufflevector <2 x float> %38, <2 x float> %36, <2 x i32> <i32 0, i32 3>
  %40 = shufflevector <2 x float> %36, <2 x float> %38, <2 x i32> <i32 0, i32 3>
  %41 = fsub fast <2 x float> %40, %39
  %42 = fmul fast float %29, %29
  %43 = fmul <2 x float> %41, %41
  %44 = extractelement <2 x float> %43, i32 1
  %45 = extractelement <2 x float> %43, i32 0
  %46 = fadd fast float %42, %44
  %47 = fadd fast float %45, %46
  %48 = tail call float @llvm.sqrt.f32(float %47) #5
  %49 = fdiv fast float %29, %48
  %50 = fmul fast float %49, %lx
  %51 = insertelement <2 x float> undef, float %48, i32 0
  %52 = insertelement <2 x float> %51, float %48, i32 1
  %53 = fdiv fast <2 x float> %41, %52
  %54 = insertelement <2 x float> undef, float %lz, i32 0
  %55 = insertelement <2 x float> %54, float %ly, i32 1
  %56 = fmul fast <2 x float> %53, %55
  %57 = extractelement <2 x float> %56, i32 0
  %58 = extractelement <2 x float> %56, i32 1
  %59 = fadd fast float %50, %58
  %60 = fadd fast float %59, %57
  ret float %60
}

; Function Attrs: nounwind
define void @chunk_draw_shadow_volume(float* %data, i32 %max) #0 {
  tail call void @glBegin(i32 7) #4
  tail call void @glColor3f(float 1.000000e+00, float 0.000000e+00, float 0.000000e+00) #4
  %1 = icmp sgt i32 %max, 0
  br i1 %1, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %0
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %387
  %k.01 = phi i32 [ %388, %387 ], [ 0, %.lr.ph.preheader ]
  %2 = add nsw i32 %k.01, 4
  %3 = getelementptr inbounds float* %data, i32 %2
  %4 = bitcast float* %3 to <2 x float>*
  %5 = or i32 %k.01, 1
  %6 = getelementptr inbounds float* %data, i32 %5
  %7 = bitcast float* %6 to <2 x float>*
  %8 = load <2 x float>* %7, align 4, !tbaa !10
  %9 = load <2 x float>* %4, align 4, !tbaa !10
  %10 = fsub fast <2 x float> %9, %8
  %11 = add nsw i32 %k.01, 10
  %12 = getelementptr inbounds float* %data, i32 %11
  %13 = bitcast float* %12 to <2 x float>*
  %14 = load <2 x float>* %13, align 4, !tbaa !10
  %15 = fsub fast <2 x float> %14, %8
  %16 = shufflevector <2 x float> %15, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %17 = fmul fast <2 x float> %10, %16
  %18 = extractelement <2 x float> %17, i32 0
  %19 = extractelement <2 x float> %17, i32 1
  %20 = add nsw i32 %k.01, 9
  %21 = getelementptr inbounds float* %data, i32 %20
  %22 = load float* %21, align 4, !tbaa !10
  %23 = getelementptr inbounds float* %data, i32 %k.01
  %24 = load float* %23, align 4, !tbaa !10
  %25 = insertelement <2 x float> undef, float %19, i32 0
  %26 = insertelement <2 x float> %25, float %24, i32 1
  %27 = insertelement <2 x float> undef, float %18, i32 0
  %28 = insertelement <2 x float> %27, float %22, i32 1
  %29 = fsub fast <2 x float> %28, %26
  %30 = extractelement <2 x float> %29, i32 0
  %31 = or i32 %k.01, 3
  %32 = getelementptr inbounds float* %data, i32 %31
  %33 = load float* %32, align 4, !tbaa !10
  %34 = fsub fast float %33, %24
  %35 = insertelement <2 x float> undef, float %34, i32 0
  %36 = insertelement <2 x float> %35, float %34, i32 1
  %37 = fmul fast <2 x float> %15, %36
  %38 = shufflevector <2 x float> %29, <2 x float> undef, <2 x i32> <i32 1, i32 1>
  %39 = fmul fast <2 x float> %10, %38
  %40 = shufflevector <2 x float> %39, <2 x float> %37, <2 x i32> <i32 0, i32 3>
  %41 = shufflevector <2 x float> %37, <2 x float> %39, <2 x i32> <i32 0, i32 3>
  %42 = fsub fast <2 x float> %41, %40
  %43 = fmul fast float %30, %30
  %44 = fmul <2 x float> %42, %42
  %45 = extractelement <2 x float> %44, i32 1
  %46 = extractelement <2 x float> %44, i32 0
  %47 = fadd fast float %43, %45
  %48 = fadd fast float %46, %47
  %49 = tail call float @llvm.sqrt.f32(float %48) #5
  %50 = insertelement <2 x float> undef, float %49, i32 0
  %51 = insertelement <2 x float> %50, float %49, i32 1
  %52 = fdiv fast <2 x float> %42, %51
  %53 = extractelement <2 x float> %52, i32 0
  %54 = extractelement <2 x float> %52, i32 1
  %55 = fadd fast float %54, %53
  %56 = fcmp ult float %55, 0.000000e+00
  %57 = extractelement <2 x float> %8, i32 0
  %58 = extractelement <2 x float> %9, i32 0
  %59 = extractelement <2 x float> %14, i32 0
  br i1 %56, label %387, label %60

; <label>:60                                      ; preds = %.lr.ph
  %61 = or i32 %k.01, 2
  %62 = getelementptr inbounds float* %data, i32 %61
  %63 = load float* %62, align 4, !tbaa !10
  %64 = add nsw i32 %k.01, 5
  %65 = getelementptr inbounds float* %data, i32 %64
  %66 = load float* %65, align 4, !tbaa !10
  %67 = tail call i32 @chunk_find_edge(float* %data, i32 %max, i32 %k.01, float %24, float %57, float %63, float %33, float %58, float %66)
  %68 = add nsw i32 %k.01, 6
  %69 = getelementptr inbounds float* %data, i32 %68
  %70 = load float* %69, align 4, !tbaa !10
  %71 = add nsw i32 %k.01, 7
  %72 = getelementptr inbounds float* %data, i32 %71
  %73 = load float* %72, align 4, !tbaa !10
  %74 = add nsw i32 %k.01, 8
  %75 = getelementptr inbounds float* %data, i32 %74
  %76 = load float* %75, align 4, !tbaa !10
  %77 = tail call i32 @chunk_find_edge(float* %data, i32 %max, i32 %k.01, float %33, float %58, float %66, float %70, float %73, float %76)
  %78 = add nsw i32 %k.01, 11
  %79 = getelementptr inbounds float* %data, i32 %78
  %80 = load float* %79, align 4, !tbaa !10
  %81 = tail call i32 @chunk_find_edge(float* %data, i32 %max, i32 %k.01, float %70, float %73, float %76, float %22, float %59, float %80)
  %82 = tail call i32 @chunk_find_edge(float* %data, i32 %max, i32 %k.01, float %22, float %59, float %80, float %24, float %57, float %63)
  %83 = icmp eq i32 %67, -1
  br i1 %83, label %156, label %84

; <label>:84                                      ; preds = %60
  %85 = add nsw i32 %67, 4
  %86 = getelementptr inbounds float* %data, i32 %85
  %87 = bitcast float* %86 to <2 x float>*
  %88 = add nsw i32 %67, 1
  %89 = getelementptr inbounds float* %data, i32 %88
  %90 = bitcast float* %89 to <2 x float>*
  %91 = load <2 x float>* %90, align 4, !tbaa !10
  %92 = load <2 x float>* %87, align 4, !tbaa !10
  %93 = fsub fast <2 x float> %92, %91
  %94 = add nsw i32 %67, 10
  %95 = getelementptr inbounds float* %data, i32 %94
  %96 = bitcast float* %95 to <2 x float>*
  %97 = load <2 x float>* %96, align 4, !tbaa !10
  %98 = fsub fast <2 x float> %97, %91
  %99 = shufflevector <2 x float> %98, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %100 = fmul fast <2 x float> %93, %99
  %101 = extractelement <2 x float> %100, i32 0
  %102 = extractelement <2 x float> %100, i32 1
  %103 = add nsw i32 %67, 9
  %104 = getelementptr inbounds float* %data, i32 %103
  %105 = load float* %104, align 4, !tbaa !10
  %106 = getelementptr inbounds float* %data, i32 %67
  %107 = load float* %106, align 4, !tbaa !10
  %108 = insertelement <2 x float> undef, float %102, i32 0
  %109 = insertelement <2 x float> %108, float %107, i32 1
  %110 = insertelement <2 x float> undef, float %101, i32 0
  %111 = insertelement <2 x float> %110, float %105, i32 1
  %112 = fsub fast <2 x float> %111, %109
  %113 = extractelement <2 x float> %112, i32 0
  %114 = add nsw i32 %67, 3
  %115 = getelementptr inbounds float* %data, i32 %114
  %116 = load float* %115, align 4, !tbaa !10
  %117 = fsub fast float %116, %107
  %118 = insertelement <2 x float> undef, float %117, i32 0
  %119 = insertelement <2 x float> %118, float %117, i32 1
  %120 = fmul fast <2 x float> %98, %119
  %121 = shufflevector <2 x float> %112, <2 x float> undef, <2 x i32> <i32 1, i32 1>
  %122 = fmul fast <2 x float> %93, %121
  %123 = shufflevector <2 x float> %122, <2 x float> %120, <2 x i32> <i32 0, i32 3>
  %124 = shufflevector <2 x float> %120, <2 x float> %122, <2 x i32> <i32 0, i32 3>
  %125 = fsub fast <2 x float> %124, %123
  %126 = fmul fast float %113, %113
  %127 = fmul <2 x float> %125, %125
  %128 = extractelement <2 x float> %127, i32 1
  %129 = extractelement <2 x float> %127, i32 0
  %130 = fadd fast float %126, %128
  %131 = fadd fast float %129, %130
  %132 = tail call float @llvm.sqrt.f32(float %131) #5
  %133 = insertelement <2 x float> undef, float %132, i32 0
  %134 = insertelement <2 x float> %133, float %132, i32 1
  %135 = fdiv fast <2 x float> %125, %134
  %136 = extractelement <2 x float> %135, i32 0
  %137 = extractelement <2 x float> %135, i32 1
  %138 = fadd fast float %137, %136
  %139 = fcmp olt float %138, 0.000000e+00
  br i1 %139, label %140, label %156

; <label>:140                                     ; preds = %84
  tail call void @glVertex3f(float %24, float %57, float %63) #4
  %141 = load float* %23, align 4, !tbaa !10
  %142 = load float* %6, align 4, !tbaa !10
  %143 = fmul fast float %142, 0x3FF6A02760000000
  %144 = fmul fast float %142, 0xBFDA809D80000000
  %145 = load float* %62, align 4, !tbaa !10
  %146 = fsub fast float %145, %143
  tail call void @glVertex3f(float %141, float %144, float %146) #4
  %147 = load float* %32, align 4, !tbaa !10
  %148 = load float* %3, align 4, !tbaa !10
  %149 = fmul fast float %148, 0x3FF6A02760000000
  %150 = fmul fast float %148, 0xBFDA809D80000000
  %151 = load float* %65, align 4, !tbaa !10
  %152 = fsub fast float %151, %149
  tail call void @glVertex3f(float %147, float %150, float %152) #4
  %153 = load float* %32, align 4, !tbaa !10
  %154 = load float* %3, align 4, !tbaa !10
  %155 = load float* %65, align 4, !tbaa !10
  tail call void @glVertex3f(float %153, float %154, float %155) #4
  br label %156

; <label>:156                                     ; preds = %60, %140, %84
  %157 = icmp eq i32 %77, -1
  br i1 %157, label %233, label %158

; <label>:158                                     ; preds = %156
  %159 = add nsw i32 %77, 4
  %160 = getelementptr inbounds float* %data, i32 %159
  %161 = bitcast float* %160 to <2 x float>*
  %162 = add nsw i32 %77, 1
  %163 = getelementptr inbounds float* %data, i32 %162
  %164 = bitcast float* %163 to <2 x float>*
  %165 = load <2 x float>* %164, align 4, !tbaa !10
  %166 = load <2 x float>* %161, align 4, !tbaa !10
  %167 = fsub fast <2 x float> %166, %165
  %168 = add nsw i32 %77, 10
  %169 = getelementptr inbounds float* %data, i32 %168
  %170 = bitcast float* %169 to <2 x float>*
  %171 = load <2 x float>* %170, align 4, !tbaa !10
  %172 = fsub fast <2 x float> %171, %165
  %173 = shufflevector <2 x float> %172, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %174 = fmul fast <2 x float> %167, %173
  %175 = extractelement <2 x float> %174, i32 0
  %176 = extractelement <2 x float> %174, i32 1
  %177 = add nsw i32 %77, 9
  %178 = getelementptr inbounds float* %data, i32 %177
  %179 = load float* %178, align 4, !tbaa !10
  %180 = getelementptr inbounds float* %data, i32 %77
  %181 = load float* %180, align 4, !tbaa !10
  %182 = insertelement <2 x float> undef, float %176, i32 0
  %183 = insertelement <2 x float> %182, float %181, i32 1
  %184 = insertelement <2 x float> undef, float %175, i32 0
  %185 = insertelement <2 x float> %184, float %179, i32 1
  %186 = fsub fast <2 x float> %185, %183
  %187 = extractelement <2 x float> %186, i32 0
  %188 = add nsw i32 %77, 3
  %189 = getelementptr inbounds float* %data, i32 %188
  %190 = load float* %189, align 4, !tbaa !10
  %191 = fsub fast float %190, %181
  %192 = insertelement <2 x float> undef, float %191, i32 0
  %193 = insertelement <2 x float> %192, float %191, i32 1
  %194 = fmul fast <2 x float> %172, %193
  %195 = shufflevector <2 x float> %186, <2 x float> undef, <2 x i32> <i32 1, i32 1>
  %196 = fmul fast <2 x float> %167, %195
  %197 = shufflevector <2 x float> %196, <2 x float> %194, <2 x i32> <i32 0, i32 3>
  %198 = shufflevector <2 x float> %194, <2 x float> %196, <2 x i32> <i32 0, i32 3>
  %199 = fsub fast <2 x float> %198, %197
  %200 = fmul fast float %187, %187
  %201 = fmul <2 x float> %199, %199
  %202 = extractelement <2 x float> %201, i32 1
  %203 = extractelement <2 x float> %201, i32 0
  %204 = fadd fast float %200, %202
  %205 = fadd fast float %203, %204
  %206 = tail call float @llvm.sqrt.f32(float %205) #5
  %207 = insertelement <2 x float> undef, float %206, i32 0
  %208 = insertelement <2 x float> %207, float %206, i32 1
  %209 = fdiv fast <2 x float> %199, %208
  %210 = extractelement <2 x float> %209, i32 0
  %211 = extractelement <2 x float> %209, i32 1
  %212 = fadd fast float %211, %210
  %213 = fcmp olt float %212, 0.000000e+00
  br i1 %213, label %214, label %233

; <label>:214                                     ; preds = %158
  %215 = load float* %32, align 4, !tbaa !10
  %216 = load float* %3, align 4, !tbaa !10
  %217 = load float* %65, align 4, !tbaa !10
  tail call void @glVertex3f(float %215, float %216, float %217) #4
  %218 = load float* %32, align 4, !tbaa !10
  %219 = load float* %3, align 4, !tbaa !10
  %220 = fmul fast float %219, 0x3FF6A02760000000
  %221 = fmul fast float %219, 0xBFDA809D80000000
  %222 = load float* %65, align 4, !tbaa !10
  %223 = fsub fast float %222, %220
  tail call void @glVertex3f(float %218, float %221, float %223) #4
  %224 = load float* %69, align 4, !tbaa !10
  %225 = load float* %72, align 4, !tbaa !10
  %226 = fmul fast float %225, 0x3FF6A02760000000
  %227 = fmul fast float %225, 0xBFDA809D80000000
  %228 = load float* %75, align 4, !tbaa !10
  %229 = fsub fast float %228, %226
  tail call void @glVertex3f(float %224, float %227, float %229) #4
  %230 = load float* %69, align 4, !tbaa !10
  %231 = load float* %72, align 4, !tbaa !10
  %232 = load float* %75, align 4, !tbaa !10
  tail call void @glVertex3f(float %230, float %231, float %232) #4
  br label %233

; <label>:233                                     ; preds = %156, %214, %158
  %234 = icmp eq i32 %81, -1
  br i1 %234, label %310, label %235

; <label>:235                                     ; preds = %233
  %236 = add nsw i32 %81, 4
  %237 = getelementptr inbounds float* %data, i32 %236
  %238 = bitcast float* %237 to <2 x float>*
  %239 = add nsw i32 %81, 1
  %240 = getelementptr inbounds float* %data, i32 %239
  %241 = bitcast float* %240 to <2 x float>*
  %242 = load <2 x float>* %241, align 4, !tbaa !10
  %243 = load <2 x float>* %238, align 4, !tbaa !10
  %244 = fsub fast <2 x float> %243, %242
  %245 = add nsw i32 %81, 10
  %246 = getelementptr inbounds float* %data, i32 %245
  %247 = bitcast float* %246 to <2 x float>*
  %248 = load <2 x float>* %247, align 4, !tbaa !10
  %249 = fsub fast <2 x float> %248, %242
  %250 = shufflevector <2 x float> %249, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %251 = fmul fast <2 x float> %244, %250
  %252 = extractelement <2 x float> %251, i32 0
  %253 = extractelement <2 x float> %251, i32 1
  %254 = add nsw i32 %81, 9
  %255 = getelementptr inbounds float* %data, i32 %254
  %256 = load float* %255, align 4, !tbaa !10
  %257 = getelementptr inbounds float* %data, i32 %81
  %258 = load float* %257, align 4, !tbaa !10
  %259 = insertelement <2 x float> undef, float %253, i32 0
  %260 = insertelement <2 x float> %259, float %258, i32 1
  %261 = insertelement <2 x float> undef, float %252, i32 0
  %262 = insertelement <2 x float> %261, float %256, i32 1
  %263 = fsub fast <2 x float> %262, %260
  %264 = extractelement <2 x float> %263, i32 0
  %265 = add nsw i32 %81, 3
  %266 = getelementptr inbounds float* %data, i32 %265
  %267 = load float* %266, align 4, !tbaa !10
  %268 = fsub fast float %267, %258
  %269 = insertelement <2 x float> undef, float %268, i32 0
  %270 = insertelement <2 x float> %269, float %268, i32 1
  %271 = fmul fast <2 x float> %249, %270
  %272 = shufflevector <2 x float> %263, <2 x float> undef, <2 x i32> <i32 1, i32 1>
  %273 = fmul fast <2 x float> %244, %272
  %274 = shufflevector <2 x float> %273, <2 x float> %271, <2 x i32> <i32 0, i32 3>
  %275 = shufflevector <2 x float> %271, <2 x float> %273, <2 x i32> <i32 0, i32 3>
  %276 = fsub fast <2 x float> %275, %274
  %277 = fmul fast float %264, %264
  %278 = fmul <2 x float> %276, %276
  %279 = extractelement <2 x float> %278, i32 1
  %280 = extractelement <2 x float> %278, i32 0
  %281 = fadd fast float %277, %279
  %282 = fadd fast float %280, %281
  %283 = tail call float @llvm.sqrt.f32(float %282) #5
  %284 = insertelement <2 x float> undef, float %283, i32 0
  %285 = insertelement <2 x float> %284, float %283, i32 1
  %286 = fdiv fast <2 x float> %276, %285
  %287 = extractelement <2 x float> %286, i32 0
  %288 = extractelement <2 x float> %286, i32 1
  %289 = fadd fast float %288, %287
  %290 = fcmp olt float %289, 0.000000e+00
  br i1 %290, label %291, label %310

; <label>:291                                     ; preds = %235
  %292 = load float* %69, align 4, !tbaa !10
  %293 = load float* %72, align 4, !tbaa !10
  %294 = load float* %75, align 4, !tbaa !10
  tail call void @glVertex3f(float %292, float %293, float %294) #4
  %295 = load float* %69, align 4, !tbaa !10
  %296 = load float* %72, align 4, !tbaa !10
  %297 = fmul fast float %296, 0x3FF6A02760000000
  %298 = fmul fast float %296, 0xBFDA809D80000000
  %299 = load float* %75, align 4, !tbaa !10
  %300 = fsub fast float %299, %297
  tail call void @glVertex3f(float %295, float %298, float %300) #4
  %301 = load float* %21, align 4, !tbaa !10
  %302 = load float* %12, align 4, !tbaa !10
  %303 = fmul fast float %302, 0x3FF6A02760000000
  %304 = fmul fast float %302, 0xBFDA809D80000000
  %305 = load float* %79, align 4, !tbaa !10
  %306 = fsub fast float %305, %303
  tail call void @glVertex3f(float %301, float %304, float %306) #4
  %307 = load float* %21, align 4, !tbaa !10
  %308 = load float* %12, align 4, !tbaa !10
  %309 = load float* %79, align 4, !tbaa !10
  tail call void @glVertex3f(float %307, float %308, float %309) #4
  br label %310

; <label>:310                                     ; preds = %233, %291, %235
  %311 = icmp eq i32 %82, -1
  br i1 %311, label %387, label %312

; <label>:312                                     ; preds = %310
  %313 = add nsw i32 %82, 4
  %314 = getelementptr inbounds float* %data, i32 %313
  %315 = bitcast float* %314 to <2 x float>*
  %316 = add nsw i32 %82, 1
  %317 = getelementptr inbounds float* %data, i32 %316
  %318 = bitcast float* %317 to <2 x float>*
  %319 = load <2 x float>* %318, align 4, !tbaa !10
  %320 = load <2 x float>* %315, align 4, !tbaa !10
  %321 = fsub fast <2 x float> %320, %319
  %322 = add nsw i32 %82, 10
  %323 = getelementptr inbounds float* %data, i32 %322
  %324 = bitcast float* %323 to <2 x float>*
  %325 = load <2 x float>* %324, align 4, !tbaa !10
  %326 = fsub fast <2 x float> %325, %319
  %327 = shufflevector <2 x float> %326, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %328 = fmul fast <2 x float> %321, %327
  %329 = extractelement <2 x float> %328, i32 0
  %330 = extractelement <2 x float> %328, i32 1
  %331 = add nsw i32 %82, 9
  %332 = getelementptr inbounds float* %data, i32 %331
  %333 = load float* %332, align 4, !tbaa !10
  %334 = getelementptr inbounds float* %data, i32 %82
  %335 = load float* %334, align 4, !tbaa !10
  %336 = insertelement <2 x float> undef, float %330, i32 0
  %337 = insertelement <2 x float> %336, float %335, i32 1
  %338 = insertelement <2 x float> undef, float %329, i32 0
  %339 = insertelement <2 x float> %338, float %333, i32 1
  %340 = fsub fast <2 x float> %339, %337
  %341 = extractelement <2 x float> %340, i32 0
  %342 = add nsw i32 %82, 3
  %343 = getelementptr inbounds float* %data, i32 %342
  %344 = load float* %343, align 4, !tbaa !10
  %345 = fsub fast float %344, %335
  %346 = insertelement <2 x float> undef, float %345, i32 0
  %347 = insertelement <2 x float> %346, float %345, i32 1
  %348 = fmul fast <2 x float> %326, %347
  %349 = shufflevector <2 x float> %340, <2 x float> undef, <2 x i32> <i32 1, i32 1>
  %350 = fmul fast <2 x float> %321, %349
  %351 = shufflevector <2 x float> %350, <2 x float> %348, <2 x i32> <i32 0, i32 3>
  %352 = shufflevector <2 x float> %348, <2 x float> %350, <2 x i32> <i32 0, i32 3>
  %353 = fsub fast <2 x float> %352, %351
  %354 = fmul fast float %341, %341
  %355 = fmul <2 x float> %353, %353
  %356 = extractelement <2 x float> %355, i32 1
  %357 = extractelement <2 x float> %355, i32 0
  %358 = fadd fast float %354, %356
  %359 = fadd fast float %357, %358
  %360 = tail call float @llvm.sqrt.f32(float %359) #5
  %361 = insertelement <2 x float> undef, float %360, i32 0
  %362 = insertelement <2 x float> %361, float %360, i32 1
  %363 = fdiv fast <2 x float> %353, %362
  %364 = extractelement <2 x float> %363, i32 0
  %365 = extractelement <2 x float> %363, i32 1
  %366 = fadd fast float %365, %364
  %367 = fcmp olt float %366, 0.000000e+00
  br i1 %367, label %368, label %387

; <label>:368                                     ; preds = %312
  %369 = load float* %21, align 4, !tbaa !10
  %370 = load float* %12, align 4, !tbaa !10
  %371 = load float* %79, align 4, !tbaa !10
  tail call void @glVertex3f(float %369, float %370, float %371) #4
  %372 = load float* %21, align 4, !tbaa !10
  %373 = load float* %12, align 4, !tbaa !10
  %374 = fmul fast float %373, 0x3FF6A02760000000
  %375 = fmul fast float %373, 0xBFDA809D80000000
  %376 = load float* %79, align 4, !tbaa !10
  %377 = fsub fast float %376, %374
  tail call void @glVertex3f(float %372, float %375, float %377) #4
  %378 = load float* %23, align 4, !tbaa !10
  %379 = load float* %6, align 4, !tbaa !10
  %380 = fmul fast float %379, 0x3FF6A02760000000
  %381 = fmul fast float %379, 0xBFDA809D80000000
  %382 = load float* %62, align 4, !tbaa !10
  %383 = fsub fast float %382, %380
  tail call void @glVertex3f(float %378, float %381, float %383) #4
  %384 = load float* %23, align 4, !tbaa !10
  %385 = load float* %6, align 4, !tbaa !10
  %386 = load float* %62, align 4, !tbaa !10
  tail call void @glVertex3f(float %384, float %385, float %386) #4
  br label %387

; <label>:387                                     ; preds = %310, %.lr.ph, %368, %312
  %388 = add nsw i32 %k.01, 12
  %389 = icmp slt i32 %388, %max
  br i1 %389, label %.lr.ph, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %387
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %0
  tail call void @glEnd() #4
  ret void
}

declare void @glBegin(i32) #3

declare void @glColor3f(float, float, float) #3

declare void @glVertex3f(float, float, float) #3

declare void @glEnd() #3

; Function Attrs: nounwind
declare noalias i8* @malloc(i32) #0

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #4

declare void @glNewList(i32, i32) #3

declare void @glColorPointer(i32, i32, i32, i8*) #3

declare void @glVertexPointer(i32, i32, i32, i8*) #3

declare void @glDrawArrays(i32, i32, i32) #3

declare void @glEndList() #3

; Function Attrs: nounwind
declare void @free(i8* nocapture) #0

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #4

; Function Attrs: nounwind
define void @chunk_update_all() #0 {
  %1 = load i32* @chunk_geometry_changed_lenght, align 4, !tbaa !1
  %2 = icmp sgt i32 %1, 0
  br i1 %2, label %.lr.ph17.preheader, label %62

.lr.ph17.preheader:                               ; preds = %0
  br label %.lr.ph17

.lr.ph17:                                         ; preds = %.lr.ph17.preheader, %._crit_edge15
  %k.016 = phi i32 [ %59, %._crit_edge15 ], [ 0, %.lr.ph17.preheader ]
  %3 = getelementptr inbounds [1024 x i32]* @chunk_geometry_changed, i32 0, i32 %k.016
  %4 = load i32* %3, align 4, !tbaa !1
  %5 = srem i32 %4, 32
  %6 = shl nsw i32 %5, 4
  %7 = sdiv i32 %4, 32
  %8 = shl nsw i32 %7, 4
  %9 = getelementptr inbounds [1024 x i32]* @chunk_display_lists, i32 0, i32 %4
  %10 = load i32* %9, align 4, !tbaa !1
  %11 = tail call zeroext i8 @glIsList(i32 %10) #4
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %20, label %13

; <label>:13                                      ; preds = %.lr.ph17
  %14 = load i32* %3, align 4, !tbaa !1
  %15 = getelementptr inbounds [1024 x i32]* @chunk_display_lists, i32 0, i32 %14
  %16 = load i32* %15, align 4, !tbaa !1
  tail call void @glDeleteLists(i32 %16, i32 1) #4
  %17 = load i32* %3, align 4, !tbaa !1
  %18 = getelementptr inbounds [1024 x i32]* @chunk_display_lists_shadowed, i32 0, i32 %17
  %19 = load i32* %18, align 4, !tbaa !1
  tail call void @glDeleteLists(i32 %19, i32 1) #4
  br label %20

; <label>:20                                      ; preds = %.lr.ph17, %13
  %21 = tail call i32 @glGenLists(i32 1) #4
  %22 = load i32* %3, align 4, !tbaa !1
  %23 = getelementptr inbounds [1024 x i32]* @chunk_display_lists, i32 0, i32 %22
  store i32 %21, i32* %23, align 4, !tbaa !1
  %24 = tail call i32 @glGenLists(i32 1) #4
  %25 = load i32* %3, align 4, !tbaa !1
  %26 = getelementptr inbounds [1024 x i32]* @chunk_display_lists_shadowed, i32 0, i32 %25
  store i32 %24, i32* %26, align 4, !tbaa !1
  %27 = getelementptr inbounds [1024 x i32]* @chunk_display_lists, i32 0, i32 %25
  %28 = load i32* %27, align 4, !tbaa !1
  %29 = tail call i32 @chunk_generate(i32 %28, i32 %24, i32 %6, i32 %8)
  %30 = load i32* %3, align 4, !tbaa !1
  %31 = getelementptr inbounds [1024 x i32]* @chunk_max_height, i32 0, i32 %30
  store i32 %29, i32* %31, align 4, !tbaa !1
  %32 = tail call i32 @clock() #4
  %33 = sdiv i32 %32, 1000
  %34 = load i32* %3, align 4, !tbaa !1
  %35 = getelementptr inbounds [1024 x i32]* @chunk_last_update, i32 0, i32 %34
  store i32 %33, i32* %35, align 4, !tbaa !1
  %36 = getelementptr inbounds [1024 x i32]* @chunk_max_height, i32 0, i32 %34
  %37 = load i32* %36, align 4, !tbaa !1
  %38 = icmp sgt i32 %37, 0
  br i1 %38, label %.lr.ph14, label %._crit_edge15

.lr.ph14:                                         ; preds = %20
  %39 = add nsw i32 %37, 15
  %40 = sdiv i32 %39, 16
  %.pre = load i32* @chunk_lighting_changed_lenght, align 4, !tbaa !1
  br label %41

; <label>:41                                      ; preds = %.lr.ph14, %.backedge
  %42 = phi i32 [ %.pre, %.lr.ph14 ], [ %54, %.backedge ]
  %l.012 = phi i32 [ 0, %.lr.ph14 ], [ %43, %.backedge ]
  %43 = add nsw i32 %l.012, 1
  %44 = shl nsw i32 %43, 5
  %45 = sub nsw i32 %34, %44
  %46 = icmp sgt i32 %42, 0
  br i1 %46, label %.lr.ph8.preheader, label %._crit_edge9

.lr.ph8.preheader:                                ; preds = %41
  br label %.lr.ph8

; <label>:47                                      ; preds = %.lr.ph8
  %48 = icmp slt i32 %52, %42
  br i1 %48, label %.lr.ph8, label %._crit_edge9.loopexit

.lr.ph8:                                          ; preds = %.lr.ph8.preheader, %47
  %j.06 = phi i32 [ %52, %47 ], [ 0, %.lr.ph8.preheader ]
  %49 = getelementptr inbounds [1024 x i32]* @chunk_lighting_changed, i32 0, i32 %j.06
  %50 = load i32* %49, align 4, !tbaa !1
  %51 = icmp eq i32 %50, %45
  %52 = add nsw i32 %j.06, 1
  br i1 %51, label %._crit_edge9.loopexit, label %47

._crit_edge9.loopexit:                            ; preds = %.lr.ph8, %47
  %j.0.lcssa.ph = phi i32 [ %52, %47 ], [ %j.06, %.lr.ph8 ]
  br label %._crit_edge9

._crit_edge9:                                     ; preds = %._crit_edge9.loopexit, %41
  %j.0.lcssa = phi i32 [ 0, %41 ], [ %j.0.lcssa.ph, %._crit_edge9.loopexit ]
  %53 = icmp slt i32 %j.0.lcssa, %42
  br i1 %53, label %.backedge, label %56

.backedge:                                        ; preds = %._crit_edge9, %56
  %54 = phi i32 [ %42, %._crit_edge9 ], [ %57, %56 ]
  %55 = icmp slt i32 %43, %40
  br i1 %55, label %41, label %._crit_edge15.loopexit

; <label>:56                                      ; preds = %._crit_edge9
  %57 = add nsw i32 %42, 1
  store i32 %57, i32* @chunk_lighting_changed_lenght, align 4, !tbaa !1
  %58 = getelementptr inbounds [1024 x i32]* @chunk_lighting_changed, i32 0, i32 %42
  store i32 %45, i32* %58, align 4, !tbaa !1
  br label %.backedge

._crit_edge15.loopexit:                           ; preds = %.backedge
  br label %._crit_edge15

._crit_edge15:                                    ; preds = %._crit_edge15.loopexit, %20
  %59 = add nsw i32 %k.016, 1
  %60 = load i32* @chunk_geometry_changed_lenght, align 4, !tbaa !1
  %61 = icmp slt i32 %59, %60
  br i1 %61, label %.lr.ph17, label %._crit_edge18

._crit_edge18:                                    ; preds = %._crit_edge15
  store i32 0, i32* @chunk_geometry_changed_lenght, align 4, !tbaa !1
  br label %62

; <label>:62                                      ; preds = %._crit_edge18, %0
  %63 = load i32* @chunk_lighting_changed_lenght, align 4, !tbaa !1
  %64 = icmp sgt i32 %63, 0
  br i1 %64, label %.lr.ph.preheader, label %101

.lr.ph.preheader:                                 ; preds = %62
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader, %82
  %k1.05 = phi i32 [ %98, %82 ], [ 0, %.lr.ph.preheader ]
  %65 = getelementptr inbounds [1024 x i32]* @chunk_lighting_changed, i32 0, i32 %k1.05
  %66 = load i32* %65, align 4, !tbaa !1
  %67 = srem i32 %66, 32
  %68 = shl nsw i32 %67, 4
  %69 = sdiv i32 %66, 32
  %70 = shl nsw i32 %69, 4
  %71 = getelementptr inbounds [1024 x i32]* @chunk_display_lists, i32 0, i32 %66
  %72 = load i32* %71, align 4, !tbaa !1
  %73 = tail call zeroext i8 @glIsList(i32 %72) #4
  %74 = icmp eq i8 %73, 0
  br i1 %74, label %82, label %75

; <label>:75                                      ; preds = %.lr.ph
  %76 = load i32* %65, align 4, !tbaa !1
  %77 = getelementptr inbounds [1024 x i32]* @chunk_display_lists, i32 0, i32 %76
  %78 = load i32* %77, align 4, !tbaa !1
  tail call void @glDeleteLists(i32 %78, i32 1) #4
  %79 = load i32* %65, align 4, !tbaa !1
  %80 = getelementptr inbounds [1024 x i32]* @chunk_display_lists_shadowed, i32 0, i32 %79
  %81 = load i32* %80, align 4, !tbaa !1
  tail call void @glDeleteLists(i32 %81, i32 1) #4
  br label %82

; <label>:82                                      ; preds = %.lr.ph, %75
  %83 = tail call i32 @glGenLists(i32 1) #4
  %84 = load i32* %65, align 4, !tbaa !1
  %85 = getelementptr inbounds [1024 x i32]* @chunk_display_lists, i32 0, i32 %84
  store i32 %83, i32* %85, align 4, !tbaa !1
  %86 = tail call i32 @glGenLists(i32 1) #4
  %87 = load i32* %65, align 4, !tbaa !1
  %88 = getelementptr inbounds [1024 x i32]* @chunk_display_lists_shadowed, i32 0, i32 %87
  store i32 %86, i32* %88, align 4, !tbaa !1
  %89 = getelementptr inbounds [1024 x i32]* @chunk_display_lists, i32 0, i32 %87
  %90 = load i32* %89, align 4, !tbaa !1
  %91 = tail call i32 @chunk_generate(i32 %90, i32 %86, i32 %68, i32 %70)
  %92 = load i32* %65, align 4, !tbaa !1
  %93 = getelementptr inbounds [1024 x i32]* @chunk_max_height, i32 0, i32 %92
  store i32 %91, i32* %93, align 4, !tbaa !1
  %94 = tail call i32 @clock() #4
  %95 = sdiv i32 %94, 1000
  %96 = load i32* %65, align 4, !tbaa !1
  %97 = getelementptr inbounds [1024 x i32]* @chunk_last_update, i32 0, i32 %96
  store i32 %95, i32* %97, align 4, !tbaa !1
  %98 = add nsw i32 %k1.05, 1
  %99 = load i32* @chunk_lighting_changed_lenght, align 4, !tbaa !1
  %100 = icmp slt i32 %98, %99
  br i1 %100, label %.lr.ph, label %._crit_edge

._crit_edge:                                      ; preds = %82
  store i32 0, i32* @chunk_lighting_changed_lenght, align 4, !tbaa !1
  br label %101

; <label>:101                                     ; preds = %._crit_edge, %62
  ret void
}

declare void @glDeleteLists(i32, i32) #3

; Function Attrs: nounwind
define noalias %struct.kv6_t* @kv6_load(i8* %bytes) #0 {
  %1 = tail call noalias i8* @malloc(i32 40) #4
  %2 = bitcast i8* %1 to %struct.kv6_t*
  %3 = getelementptr inbounds i8* %1, i32 20
  store i8 0, i8* %3, align 1, !tbaa !24
  %4 = getelementptr inbounds i8* %bytes, i32 3
  %5 = load i8* %4, align 1, !tbaa !9
  %6 = zext i8 %5 to i32
  %7 = shl nuw i32 %6, 24
  %8 = getelementptr inbounds i8* %bytes, i32 2
  %9 = load i8* %8, align 1, !tbaa !9
  %10 = zext i8 %9 to i32
  %11 = shl nuw nsw i32 %10, 16
  %12 = or i32 %11, %7
  %13 = getelementptr inbounds i8* %bytes, i32 1
  %14 = load i8* %13, align 1, !tbaa !9
  %15 = zext i8 %14 to i32
  %16 = shl nuw nsw i32 %15, 8
  %17 = or i32 %12, %16
  %18 = load i8* %bytes, align 1, !tbaa !9
  %19 = zext i8 %18 to i32
  %20 = or i32 %17, %19
  %21 = icmp eq i32 %20, 1819833931
  br i1 %21, label %22, label %219

; <label>:22                                      ; preds = %0
  %23 = getelementptr inbounds i8* %bytes, i32 5
  %24 = load i8* %23, align 1, !tbaa !9
  %25 = zext i8 %24 to i16
  %26 = shl nuw i16 %25, 8
  %27 = getelementptr inbounds i8* %bytes, i32 4
  %28 = load i8* %27, align 1, !tbaa !9
  %29 = zext i8 %28 to i16
  %30 = or i16 %26, %29
  %31 = bitcast i8* %1 to <2 x i16>*
  %32 = getelementptr inbounds i8* %bytes, i32 9
  %33 = load i8* %32, align 1, !tbaa !9
  %34 = zext i8 %33 to i16
  %35 = shl nuw i16 %34, 8
  %36 = getelementptr inbounds i8* %bytes, i32 8
  %37 = load i8* %36, align 1, !tbaa !9
  %38 = zext i8 %37 to i16
  %39 = or i16 %35, %38
  %40 = insertelement <2 x i16> undef, i16 %30, i32 0
  %41 = insertelement <2 x i16> %40, i16 %39, i32 1
  store <2 x i16> %41, <2 x i16>* %31, align 2, !tbaa !19
  %42 = getelementptr inbounds i8* %bytes, i32 15
  %43 = load i8* %42, align 1, !tbaa !9
  %44 = zext i8 %43 to i32
  %45 = shl nuw i32 %44, 24
  %46 = getelementptr inbounds i8* %bytes, i32 14
  %47 = load i8* %46, align 1, !tbaa !9
  %48 = zext i8 %47 to i32
  %49 = shl nuw nsw i32 %48, 16
  %50 = or i32 %49, %45
  %51 = getelementptr inbounds i8* %bytes, i32 13
  %52 = load i8* %51, align 1, !tbaa !9
  %53 = zext i8 %52 to i32
  %54 = shl nuw nsw i32 %53, 8
  %55 = or i32 %50, %54
  %56 = getelementptr inbounds i8* %bytes, i32 12
  %57 = load i8* %56, align 1, !tbaa !9
  %58 = zext i8 %57 to i32
  %59 = or i32 %55, %58
  %60 = trunc i32 %59 to i16
  %61 = getelementptr inbounds i8* %1, i32 4
  %62 = bitcast i8* %61 to i16*
  store i16 %60, i16* %62, align 2, !tbaa !26
  %63 = zext i16 %30 to i32
  %64 = zext i16 %39 to i32
  %65 = and i32 %59, 65535
  %66 = shl nuw nsw i32 %63, 2
  %67 = mul i32 %66, %64
  %68 = mul i32 %67, %65
  %69 = tail call noalias i8* @malloc(i32 %68) #4
  %70 = bitcast i8* %69 to i32*
  %71 = getelementptr inbounds i8* %1, i32 36
  %72 = bitcast i8* %71 to i32**
  store i32* %70, i32** %72, align 4, !tbaa !27
  tail call void @llvm.memset.p0i8.i32(i8* %69, i8 0, i32 %68, i32 4, i1 false)
  %73 = getelementptr inbounds i8* %bytes, i32 31
  %74 = load i8* %73, align 1, !tbaa !9
  %75 = zext i8 %74 to i32
  %76 = shl nuw i32 %75, 24
  %77 = getelementptr inbounds i8* %bytes, i32 30
  %78 = load i8* %77, align 1, !tbaa !9
  %79 = zext i8 %78 to i32
  %80 = shl nuw nsw i32 %79, 16
  %81 = or i32 %80, %76
  %82 = getelementptr inbounds i8* %bytes, i32 29
  %83 = load i8* %82, align 1, !tbaa !9
  %84 = zext i8 %83 to i32
  %85 = shl nuw nsw i32 %84, 8
  %86 = or i32 %81, %85
  %87 = getelementptr inbounds i8* %bytes, i32 28
  %88 = load i8* %87, align 1, !tbaa !9
  %89 = zext i8 %88 to i32
  %90 = or i32 %86, %89
  %91 = shl nsw i32 %90, 2
  %92 = tail call noalias i8* @malloc(i32 %91) #4
  %93 = bitcast i8* %92 to i32*
  %94 = shl nsw i32 %90, 1
  %95 = tail call noalias i8* @malloc(i32 %94) #4
  %96 = bitcast i8* %95 to i16*
  %97 = tail call noalias i8* @malloc(i32 %90) #4
  %98 = icmp sgt i32 %90, 0
  br i1 %98, label %.lr.ph20, label %141

.lr.ph20:                                         ; preds = %22
  %99 = shl i32 %90, 3
  br label %100

; <label>:100                                     ; preds = %100, %.lr.ph20
  %index.018 = phi i32 [ 32, %.lr.ph20 ], [ %135, %100 ]
  %k.017 = phi i32 [ 0, %.lr.ph20 ], [ %139, %100 ]
  %101 = or i32 %index.018, 3
  %102 = getelementptr inbounds i8* %bytes, i32 %101
  %103 = load i8* %102, align 1, !tbaa !9
  %104 = zext i8 %103 to i32
  %105 = shl nuw i32 %104, 24
  %106 = or i32 %index.018, 2
  %107 = getelementptr inbounds i8* %bytes, i32 %106
  %108 = load i8* %107, align 1, !tbaa !9
  %109 = zext i8 %108 to i32
  %110 = shl nuw nsw i32 %109, 16
  %111 = or i32 %110, %105
  %112 = or i32 %index.018, 1
  %113 = getelementptr inbounds i8* %bytes, i32 %112
  %114 = load i8* %113, align 1, !tbaa !9
  %115 = zext i8 %114 to i32
  %116 = shl nuw nsw i32 %115, 8
  %117 = or i32 %111, %116
  %118 = getelementptr inbounds i8* %bytes, i32 %index.018
  %119 = load i8* %118, align 1, !tbaa !9
  %120 = zext i8 %119 to i32
  %121 = or i32 %117, %120
  %122 = getelementptr inbounds i32* %93, i32 %k.017
  store i32 %121, i32* %122, align 4, !tbaa !1
  %123 = or i32 %index.018, 4
  %124 = or i32 %index.018, 5
  %125 = getelementptr inbounds i8* %bytes, i32 %124
  %126 = load i8* %125, align 1, !tbaa !9
  %127 = zext i8 %126 to i16
  %128 = shl nuw i16 %127, 8
  %129 = getelementptr inbounds i8* %bytes, i32 %123
  %130 = load i8* %129, align 1, !tbaa !9
  %131 = zext i8 %130 to i16
  %132 = or i16 %128, %131
  %133 = getelementptr inbounds i16* %96, i32 %k.017
  store i16 %132, i16* %133, align 2, !tbaa !19
  %134 = or i32 %index.018, 7
  %135 = add nsw i32 %index.018, 8
  %136 = getelementptr inbounds i8* %bytes, i32 %134
  %137 = load i8* %136, align 1, !tbaa !9
  %138 = getelementptr inbounds i8* %97, i32 %k.017
  store i8 %137, i8* %138, align 1, !tbaa !9
  %139 = add nsw i32 %k.017, 1
  %exitcond = icmp eq i32 %139, %90
  br i1 %exitcond, label %._crit_edge21, label %100

._crit_edge21:                                    ; preds = %100
  %140 = add i32 %99, 32
  br label %141

; <label>:141                                     ; preds = %._crit_edge21, %22
  %index.0.lcssa = phi i32 [ %140, %._crit_edge21 ], [ 32, %22 ]
  %142 = icmp eq i16 %30, 0
  br i1 %142, label %._crit_edge16, label %.preheader.lr.ph

.preheader.lr.ph:                                 ; preds = %141
  %143 = add nsw i32 %66, %index.0.lcssa
  %144 = icmp eq i16 %39, 0
  br label %.preheader

.preheader:                                       ; preds = %.preheader.lr.ph, %216
  %index.115 = phi i32 [ %143, %.preheader.lr.ph ], [ %index.2.lcssa, %216 ]
  %x.013 = phi i32 [ 0, %.preheader.lr.ph ], [ %217, %216 ]
  %blkdata_offset.012 = phi i32 [ 0, %.preheader.lr.ph ], [ %blkdata_offset.1.lcssa, %216 ]
  br i1 %144, label %216, label %.lr.ph8

.lr.ph8:                                          ; preds = %.preheader
  %145 = icmp ugt i16 %39, 1
  %.op = shl nuw nsw i32 %64, 1
  %146 = select i1 %145, i32 %.op, i32 2
  br label %147

; <label>:147                                     ; preds = %.lr.ph8, %212
  %index.27 = phi i32 [ %index.115, %.lr.ph8 ], [ %157, %212 ]
  %y.05 = phi i32 [ 0, %.lr.ph8 ], [ %213, %212 ]
  %blkdata_offset.14 = phi i32 [ %blkdata_offset.012, %.lr.ph8 ], [ %blkdata_offset.2.lcssa, %212 ]
  %148 = add nsw i32 %index.27, 1
  %149 = getelementptr inbounds i8* %bytes, i32 %148
  %150 = load i8* %149, align 1, !tbaa !9
  %151 = zext i8 %150 to i32
  %152 = shl nuw nsw i32 %151, 8
  %153 = getelementptr inbounds i8* %bytes, i32 %index.27
  %154 = load i8* %153, align 1, !tbaa !9
  %155 = zext i8 %154 to i32
  %156 = or i32 %152, %155
  %157 = add nsw i32 %index.27, 2
  %158 = icmp eq i32 %156, 0
  br i1 %158, label %212, label %.lr.ph

.lr.ph:                                           ; preds = %147
  %159 = icmp ugt i32 %156, 1
  %smax = select i1 %159, i32 %156, i32 1
  %160 = icmp ugt i32 %156, 1
  %smax26 = select i1 %160, i32 %156, i32 1
  %backedge.overflow = icmp eq i32 %smax26, 0
  br i1 %backedge.overflow, label %scalar.ph.preheader, label %overflow.checked

overflow.checked:                                 ; preds = %.lr.ph
  %end.idx = add i32 %smax26, %blkdata_offset.14
  %n.vec = and i32 %smax26, 65534
  %end.idx.rnd.down = add i32 %n.vec, %blkdata_offset.14
  %cmp.zero = icmp eq i32 %n.vec, 0
  br i1 %cmp.zero, label %middle.block, label %vector.body.preheader

vector.body.preheader:                            ; preds = %overflow.checked
  br label %vector.body

vector.body:                                      ; preds = %vector.body.preheader, %vector.body
  %index = phi i32 [ %index.next, %vector.body ], [ %blkdata_offset.14, %vector.body.preheader ]
  %induction31 = add i32 %index, 1
  %161 = getelementptr inbounds i32* %93, i32 %index
  %162 = getelementptr inbounds i32* %93, i32 %induction31
  %163 = load i32* %161, align 4, !tbaa !1
  %164 = load i32* %162, align 4, !tbaa !1
  %165 = and i32 %163, 16777215
  %166 = and i32 %164, 16777215
  %167 = getelementptr inbounds i8* %97, i32 %index
  %168 = getelementptr inbounds i8* %97, i32 %induction31
  %169 = load i8* %167, align 1, !tbaa !9
  %170 = load i8* %168, align 1, !tbaa !9
  %171 = zext i8 %169 to i32
  %172 = zext i8 %170 to i32
  %173 = shl nuw i32 %171, 24
  %174 = shl nuw i32 %172, 24
  %175 = or i32 %173, %165
  %176 = or i32 %174, %166
  %177 = getelementptr inbounds i16* %96, i32 %index
  %178 = getelementptr inbounds i16* %96, i32 %induction31
  %179 = load i16* %177, align 2, !tbaa !19
  %180 = load i16* %178, align 2, !tbaa !19
  %181 = zext i16 %179 to i32
  %182 = zext i16 %180 to i32
  %183 = mul i32 %64, %181
  %184 = mul i32 %64, %182
  %185 = add i32 %183, %y.05
  %186 = add i32 %184, %y.05
  %187 = mul i32 %185, %63
  %188 = mul i32 %186, %63
  %189 = add i32 %187, %x.013
  %190 = add i32 %188, %x.013
  %191 = getelementptr inbounds i32* %70, i32 %189
  %192 = getelementptr inbounds i32* %70, i32 %190
  store i32 %175, i32* %191, align 4, !tbaa !1
  store i32 %176, i32* %192, align 4, !tbaa !1
  %index.next = add i32 %index, 2
  %193 = icmp eq i32 %index.next, %end.idx.rnd.down
  br i1 %193, label %middle.block.loopexit, label %vector.body, !llvm.loop !28

middle.block.loopexit:                            ; preds = %vector.body
  br label %middle.block

middle.block:                                     ; preds = %middle.block.loopexit, %overflow.checked
  %resume.val = phi i32 [ 0, %overflow.checked ], [ %n.vec, %middle.block.loopexit ]
  %resume.val27 = phi i32 [ %blkdata_offset.14, %overflow.checked ], [ %end.idx.rnd.down, %middle.block.loopexit ]
  %cmp.n = icmp eq i32 %end.idx, %resume.val27
  br i1 %cmp.n, label %._crit_edge, label %scalar.ph.preheader

scalar.ph.preheader:                              ; preds = %middle.block, %.lr.ph
  %z.03.ph = phi i32 [ 0, %.lr.ph ], [ %resume.val, %middle.block ]
  %blkdata_offset.22.ph = phi i32 [ %blkdata_offset.14, %.lr.ph ], [ %resume.val27, %middle.block ]
  br label %scalar.ph

scalar.ph:                                        ; preds = %scalar.ph.preheader, %scalar.ph
  %z.03 = phi i32 [ %209, %scalar.ph ], [ %z.03.ph, %scalar.ph.preheader ]
  %blkdata_offset.22 = phi i32 [ %208, %scalar.ph ], [ %blkdata_offset.22.ph, %scalar.ph.preheader ]
  %194 = getelementptr inbounds i32* %93, i32 %blkdata_offset.22
  %195 = load i32* %194, align 4, !tbaa !1
  %196 = and i32 %195, 16777215
  %197 = getelementptr inbounds i8* %97, i32 %blkdata_offset.22
  %198 = load i8* %197, align 1, !tbaa !9
  %199 = zext i8 %198 to i32
  %200 = shl nuw i32 %199, 24
  %201 = or i32 %200, %196
  %202 = getelementptr inbounds i16* %96, i32 %blkdata_offset.22
  %203 = load i16* %202, align 2, !tbaa !19
  %204 = zext i16 %203 to i32
  %205 = mul i32 %64, %204
  %tmp = add i32 %205, %y.05
  %tmp1 = mul i32 %tmp, %63
  %206 = add i32 %tmp1, %x.013
  %207 = getelementptr inbounds i32* %70, i32 %206
  store i32 %201, i32* %207, align 4, !tbaa !1
  %208 = add nsw i32 %blkdata_offset.22, 1
  %209 = add nsw i32 %z.03, 1
  %210 = icmp slt i32 %209, %156
  br i1 %210, label %scalar.ph, label %._crit_edge.loopexit, !llvm.loop !29

._crit_edge.loopexit:                             ; preds = %scalar.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %middle.block
  %211 = add i32 %blkdata_offset.14, %smax
  br label %212

; <label>:212                                     ; preds = %147, %._crit_edge
  %blkdata_offset.2.lcssa = phi i32 [ %211, %._crit_edge ], [ %blkdata_offset.14, %147 ]
  %213 = add nsw i32 %y.05, 1
  %214 = icmp slt i32 %213, %64
  br i1 %214, label %147, label %._crit_edge9

._crit_edge9:                                     ; preds = %212
  %blkdata_offset.2.lcssa.lcssa = phi i32 [ %blkdata_offset.2.lcssa, %212 ]
  %215 = add i32 %index.115, %146
  br label %216

; <label>:216                                     ; preds = %.preheader, %._crit_edge9
  %index.2.lcssa = phi i32 [ %215, %._crit_edge9 ], [ %index.115, %.preheader ]
  %blkdata_offset.1.lcssa = phi i32 [ %blkdata_offset.2.lcssa.lcssa, %._crit_edge9 ], [ %blkdata_offset.012, %.preheader ]
  %217 = add nsw i32 %x.013, 1
  %218 = icmp slt i32 %217, %63
  br i1 %218, label %.preheader, label %._crit_edge16.loopexit

._crit_edge16.loopexit:                           ; preds = %216
  br label %._crit_edge16

._crit_edge16:                                    ; preds = %._crit_edge16.loopexit, %141
  tail call void @free(i8* %92) #4
  tail call void @free(i8* %95) #4
  tail call void @free(i8* %97) #4
  br label %219

; <label>:219                                     ; preds = %._crit_edge16, %0
  ret %struct.kv6_t* %2
}

; Function Attrs: nounwind readonly
define i32 @buffer_read32(i8* nocapture readonly %buffer, i32 %index) #1 {
  %1 = add nsw i32 %index, 3
  %2 = getelementptr inbounds i8* %buffer, i32 %1
  %3 = load i8* %2, align 1, !tbaa !9
  %4 = zext i8 %3 to i32
  %5 = shl nuw i32 %4, 24
  %6 = add nsw i32 %index, 2
  %7 = getelementptr inbounds i8* %buffer, i32 %6
  %8 = load i8* %7, align 1, !tbaa !9
  %9 = zext i8 %8 to i32
  %10 = shl nuw nsw i32 %9, 16
  %11 = or i32 %10, %5
  %12 = add nsw i32 %index, 1
  %13 = getelementptr inbounds i8* %buffer, i32 %12
  %14 = load i8* %13, align 1, !tbaa !9
  %15 = zext i8 %14 to i32
  %16 = shl nuw nsw i32 %15, 8
  %17 = or i32 %11, %16
  %18 = getelementptr inbounds i8* %buffer, i32 %index
  %19 = load i8* %18, align 1, !tbaa !9
  %20 = zext i8 %19 to i32
  %21 = or i32 %17, %20
  ret i32 %21
}

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i32(i8* nocapture, i8, i32, i32, i1) #4

; Function Attrs: nounwind readonly
define zeroext i16 @buffer_read16(i8* nocapture readonly %buffer, i32 %index) #1 {
  %1 = add nsw i32 %index, 1
  %2 = getelementptr inbounds i8* %buffer, i32 %1
  %3 = load i8* %2, align 1, !tbaa !9
  %4 = zext i8 %3 to i16
  %5 = shl nuw i16 %4, 8
  %6 = getelementptr inbounds i8* %buffer, i32 %index
  %7 = load i8* %6, align 1, !tbaa !9
  %8 = zext i8 %7 to i16
  %9 = or i16 %5, %8
  ret i16 %9
}

; Function Attrs: nounwind readonly
define zeroext i8 @buffer_read8(i8* nocapture readonly %buffer, i32 %index) #1 {
  %1 = getelementptr inbounds i8* %buffer, i32 %index
  %2 = load i8* %1, align 1, !tbaa !9
  ret i8 %2
}

; Function Attrs: nounwind
define void @kv6_render(%struct.kv6_t* nocapture %kv6, i8 zeroext %red, i8 zeroext %green, i8 zeroext %blue) #0 {
  %1 = getelementptr inbounds %struct.kv6_t* %kv6, i32 0, i32 6
  %2 = load i8* %1, align 1, !tbaa !24
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %.preheader13, label %._crit_edge53

._crit_edge53:                                    ; preds = %0
  %.pre54 = getelementptr inbounds %struct.kv6_t* %kv6, i32 0, i32 7
  br label %148

.preheader13:                                     ; preds = %0
  %4 = getelementptr inbounds %struct.kv6_t* %kv6, i32 0, i32 0
  %5 = load i16* %4, align 2, !tbaa !30
  %6 = icmp eq i16 %5, 0
  br i1 %6, label %._crit_edge44, label %.preheader12.lr.ph

.preheader12.lr.ph:                               ; preds = %.preheader13
  %7 = getelementptr inbounds %struct.kv6_t* %kv6, i32 0, i32 1
  %8 = load i16* %7, align 2, !tbaa !31
  %9 = icmp eq i16 %8, 0
  %10 = zext i16 %5 to i32
  %11 = getelementptr inbounds %struct.kv6_t* %kv6, i32 0, i32 2
  %12 = getelementptr inbounds %struct.kv6_t* %kv6, i32 0, i32 10
  br label %.preheader12

.preheader12:                                     ; preds = %.preheader12.lr.ph, %._crit_edge39
  %size.043 = phi i32 [ 0, %.preheader12.lr.ph ], [ %size.1.lcssa, %._crit_edge39 ]
  %x.041 = phi i32 [ 0, %.preheader12.lr.ph ], [ %28, %._crit_edge39 ]
  br i1 %9, label %._crit_edge39, label %.preheader11.lr.ph

.preheader11.lr.ph:                               ; preds = %.preheader12
  %13 = load i16* %11, align 2, !tbaa !26
  %14 = icmp eq i16 %13, 0
  %15 = zext i16 %8 to i32
  br label %.preheader11

.preheader11:                                     ; preds = %.preheader11.lr.ph, %._crit_edge34
  %size.138 = phi i32 [ %size.043, %.preheader11.lr.ph ], [ %size.2.lcssa, %._crit_edge34 ]
  %y.036 = phi i32 [ 0, %.preheader11.lr.ph ], [ %26, %._crit_edge34 ]
  br i1 %14, label %._crit_edge34, label %.lr.ph33

.lr.ph33:                                         ; preds = %.preheader11
  %16 = load i32** %12, align 4, !tbaa !27
  %17 = zext i16 %13 to i32
  br label %18

; <label>:18                                      ; preds = %.lr.ph33, %18
  %size.232 = phi i32 [ %size.138, %.lr.ph33 ], [ %size.2., %18 ]
  %z.031 = phi i32 [ 0, %.lr.ph33 ], [ %24, %18 ]
  %19 = mul i32 %15, %z.031
  %tmp = add i32 %19, %y.036
  %tmp7 = mul i32 %tmp, %10
  %20 = add i32 %tmp7, %x.041
  %21 = getelementptr inbounds i32* %16, i32 %20
  %22 = load i32* %21, align 4, !tbaa !1
  %not. = icmp ne i32 %22, 0
  %23 = zext i1 %not. to i32
  %size.2. = add nsw i32 %23, %size.232
  %24 = add nsw i32 %z.031, 1
  %25 = icmp slt i32 %24, %17
  br i1 %25, label %18, label %._crit_edge34.loopexit

._crit_edge34.loopexit:                           ; preds = %18
  %size.2..lcssa = phi i32 [ %size.2., %18 ]
  br label %._crit_edge34

._crit_edge34:                                    ; preds = %._crit_edge34.loopexit, %.preheader11
  %size.2.lcssa = phi i32 [ %size.138, %.preheader11 ], [ %size.2..lcssa, %._crit_edge34.loopexit ]
  %26 = add nsw i32 %y.036, 1
  %27 = icmp slt i32 %26, %15
  br i1 %27, label %.preheader11, label %._crit_edge39.loopexit

._crit_edge39.loopexit:                           ; preds = %._crit_edge34
  %size.2.lcssa.lcssa = phi i32 [ %size.2.lcssa, %._crit_edge34 ]
  br label %._crit_edge39

._crit_edge39:                                    ; preds = %._crit_edge39.loopexit, %.preheader12
  %size.1.lcssa = phi i32 [ %size.043, %.preheader12 ], [ %size.2.lcssa.lcssa, %._crit_edge39.loopexit ]
  %28 = add nsw i32 %x.041, 1
  %29 = icmp slt i32 %28, %10
  br i1 %29, label %.preheader12, label %._crit_edge44.loopexit

._crit_edge44.loopexit:                           ; preds = %._crit_edge39
  %size.1.lcssa.lcssa = phi i32 [ %size.1.lcssa, %._crit_edge39 ]
  br label %._crit_edge44

._crit_edge44:                                    ; preds = %._crit_edge44.loopexit, %.preheader13
  %30 = phi i16 [ 0, %.preheader13 ], [ %5, %._crit_edge44.loopexit ]
  %size.0.lcssa = phi i32 [ 0, %.preheader13 ], [ %size.1.lcssa.lcssa, %._crit_edge44.loopexit ]
  %31 = mul nsw i32 %size.0.lcssa, 3
  %32 = tail call noalias i8* @malloc(i32 %31) #4
  %33 = getelementptr inbounds %struct.kv6_t* %kv6, i32 0, i32 8
  store i8* %32, i8** %33, align 4, !tbaa !32
  %34 = mul i32 %size.0.lcssa, 6
  %35 = tail call noalias i8* @malloc(i32 %34) #4
  %36 = bitcast i8* %35 to i16*
  %37 = getelementptr inbounds %struct.kv6_t* %kv6, i32 0, i32 9
  store i16* %36, i16** %37, align 4, !tbaa !33
  %38 = icmp eq i16 %30, 0
  br i1 %38, label %._crit_edge29, label %.preheader10.lr.ph

.preheader10.lr.ph:                               ; preds = %._crit_edge44
  %39 = getelementptr inbounds %struct.kv6_t* %kv6, i32 0, i32 1
  %40 = getelementptr inbounds %struct.kv6_t* %kv6, i32 0, i32 2
  %41 = getelementptr inbounds %struct.kv6_t* %kv6, i32 0, i32 10
  %42 = zext i8 %red to i32
  %43 = zext i8 %green to i32
  %44 = zext i8 %blue to i32
  %.pre = load i16* %39, align 2, !tbaa !31
  br label %.preheader10

.preheader10:                                     ; preds = %.preheader10.lr.ph, %131
  %45 = phi i16 [ %.pre, %.preheader10.lr.ph ], [ %132, %131 ]
  %46 = phi i16 [ %30, %.preheader10.lr.ph ], [ %133, %131 ]
  %47 = phi i16 [ %.pre, %.preheader10.lr.ph ], [ %134, %131 ]
  %x1.027 = phi i32 [ 0, %.preheader10.lr.ph ], [ %135, %131 ]
  %index_vertex.026 = phi i32 [ 0, %.preheader10.lr.ph ], [ %index_vertex.1.lcssa, %131 ]
  %index_color.025 = phi i32 [ 0, %.preheader10.lr.ph ], [ %index_color.1.lcssa, %131 ]
  %48 = icmp eq i16 %47, 0
  br i1 %48, label %131, label %.preheader.lr.ph

.preheader.lr.ph:                                 ; preds = %.preheader10
  %49 = trunc i32 %x1.027 to i16
  %.pre48 = load i16* %40, align 2, !tbaa !26
  br label %.preheader

.preheader:                                       ; preds = %.preheader.lr.ph, %._crit_edge
  %50 = phi i16 [ %.pre48, %.preheader.lr.ph ], [ %125, %._crit_edge ]
  %51 = phi i16 [ %45, %.preheader.lr.ph ], [ %126, %._crit_edge ]
  %52 = phi i16 [ %.pre48, %.preheader.lr.ph ], [ %127, %._crit_edge ]
  %y2.020 = phi i32 [ 0, %.preheader.lr.ph ], [ %128, %._crit_edge ]
  %index_vertex.119 = phi i32 [ %index_vertex.026, %.preheader.lr.ph ], [ %index_vertex.2.lcssa, %._crit_edge ]
  %index_color.118 = phi i32 [ %index_color.025, %.preheader.lr.ph ], [ %index_color.2.lcssa, %._crit_edge ]
  %53 = icmp eq i16 %52, 0
  br i1 %53, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %.preheader
  %54 = sub nsw i32 0, %y2.020
  %55 = trunc i32 %54 to i16
  br label %._crit_edge50

._crit_edge50:                                    ; preds = %120, %.lr.ph
  %56 = phi i16 [ %50, %.lr.ph ], [ %121, %120 ]
  %57 = phi i16 [ %51, %.lr.ph ], [ %.pre51, %120 ]
  %z3.016 = phi i32 [ 0, %.lr.ph ], [ %122, %120 ]
  %index_vertex.215 = phi i32 [ %index_vertex.119, %.lr.ph ], [ %index_vertex.3, %120 ]
  %index_color.214 = phi i32 [ %index_color.118, %.lr.ph ], [ %index_color.3, %120 ]
  %58 = load i16* %4, align 2, !tbaa !30
  %59 = zext i16 %58 to i32
  %60 = zext i16 %57 to i32
  %61 = mul i32 %60, %z3.016
  %tmp8 = add i32 %61, %y2.020
  %tmp9 = mul i32 %tmp8, %59
  %62 = add i32 %tmp9, %x1.027
  %63 = load i32** %41, align 4, !tbaa !27
  %64 = getelementptr inbounds i32* %63, i32 %62
  %65 = load i32* %64, align 4, !tbaa !1
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %120, label %67

; <label>:67                                      ; preds = %._crit_edge50
  %68 = and i32 %65, 255
  %69 = lshr i32 %65, 8
  %70 = and i32 %69, 255
  %71 = lshr i32 %65, 16
  %72 = and i32 %71, 255
  %73 = lshr i32 %65, 24
  %74 = or i32 %69, %65
  %75 = or i32 %74, %71
  %76 = and i32 %75, 255
  %77 = icmp eq i32 %76, 0
  %. = select i1 %77, i32 %44, i32 %68
  %.56 = select i1 %77, i32 %43, i32 %70
  %.57 = select i1 %77, i32 %42, i32 %72
  %78 = sitofp i32 %.57 to float
  %79 = sitofp i32 %73 to float
  %80 = fmul fast float %79, 0x3F60101020000000
  %81 = fadd fast float %80, 5.000000e-01
  %82 = add nsw i32 %index_color.214, 1
  %83 = load i8** %33, align 4, !tbaa !32
  %84 = getelementptr inbounds i8* %83, i32 %index_color.214
  %85 = sitofp i32 %.56 to float
  %86 = insertelement <2 x float> undef, float %78, i32 0
  %87 = insertelement <2 x float> %86, float %85, i32 1
  %88 = fmul fast <2 x float> %87, <float 0x3F70101020000000, float 0x3F70101020000000>
  %89 = insertelement <2 x float> undef, float %81, i32 0
  %90 = insertelement <2 x float> %89, float %81, i32 1
  %91 = fmul fast <2 x float> %90, %88
  %92 = fmul fast <2 x float> %91, <float 2.550000e+02, float 2.550000e+02>
  %93 = extractelement <2 x float> %92, i32 0
  %94 = extractelement <2 x float> %92, i32 1
  %95 = fptoui float %93 to i8
  store i8 %95, i8* %84, align 1, !tbaa !9
  %96 = fptoui float %94 to i8
  %97 = add nsw i32 %index_color.214, 2
  %98 = load i8** %33, align 4, !tbaa !32
  %99 = getelementptr inbounds i8* %98, i32 %82
  store i8 %96, i8* %99, align 1, !tbaa !9
  %100 = sitofp i32 %. to float
  %101 = fmul fast float %100, 0x3F70101020000000
  %102 = fmul fast float %81, %101
  %103 = fmul fast float %102, 2.550000e+02
  %104 = fptoui float %103 to i8
  %105 = add nsw i32 %index_color.214, 3
  %106 = load i8** %33, align 4, !tbaa !32
  %107 = getelementptr inbounds i8* %106, i32 %97
  store i8 %104, i8* %107, align 1, !tbaa !9
  %108 = add nsw i32 %index_vertex.215, 1
  %109 = load i16** %37, align 4, !tbaa !33
  %110 = getelementptr inbounds i16* %109, i32 %index_vertex.215
  store i16 %49, i16* %110, align 2, !tbaa !19
  %111 = load i16* %40, align 2, !tbaa !26
  %112 = zext i16 %111 to i32
  %113 = sub nsw i32 %112, %z3.016
  %114 = trunc i32 %113 to i16
  %115 = getelementptr inbounds i16* %109, i32 %108
  %116 = bitcast i16* %115 to <2 x i16>*
  %117 = add nsw i32 %index_vertex.215, 3
  %118 = insertelement <2 x i16> undef, i16 %114, i32 0
  %119 = insertelement <2 x i16> %118, i16 %55, i32 1
  store <2 x i16> %119, <2 x i16>* %116, align 2, !tbaa !19
  %.pre52 = load i16* %40, align 2, !tbaa !26
  br label %120

; <label>:120                                     ; preds = %._crit_edge50, %67
  %121 = phi i16 [ %.pre52, %67 ], [ %56, %._crit_edge50 ]
  %index_color.3 = phi i32 [ %105, %67 ], [ %index_color.214, %._crit_edge50 ]
  %index_vertex.3 = phi i32 [ %117, %67 ], [ %index_vertex.215, %._crit_edge50 ]
  %122 = add nsw i32 %z3.016, 1
  %123 = zext i16 %121 to i32
  %124 = icmp slt i32 %122, %123
  %.pre51 = load i16* %39, align 2, !tbaa !31
  br i1 %124, label %._crit_edge50, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %120
  %.pre51.lcssa = phi i16 [ %.pre51, %120 ]
  %index_vertex.3.lcssa = phi i32 [ %index_vertex.3, %120 ]
  %index_color.3.lcssa = phi i32 [ %index_color.3, %120 ]
  %.lcssa = phi i16 [ %121, %120 ]
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.preheader
  %125 = phi i16 [ %50, %.preheader ], [ %.lcssa, %._crit_edge.loopexit ]
  %126 = phi i16 [ %51, %.preheader ], [ %.pre51.lcssa, %._crit_edge.loopexit ]
  %127 = phi i16 [ 0, %.preheader ], [ %.lcssa, %._crit_edge.loopexit ]
  %index_vertex.2.lcssa = phi i32 [ %index_vertex.119, %.preheader ], [ %index_vertex.3.lcssa, %._crit_edge.loopexit ]
  %index_color.2.lcssa = phi i32 [ %index_color.118, %.preheader ], [ %index_color.3.lcssa, %._crit_edge.loopexit ]
  %128 = add nsw i32 %y2.020, 1
  %129 = zext i16 %126 to i32
  %130 = icmp slt i32 %128, %129
  br i1 %130, label %.preheader, label %._crit_edge22

._crit_edge22:                                    ; preds = %._crit_edge
  %index_color.2.lcssa.lcssa = phi i32 [ %index_color.2.lcssa, %._crit_edge ]
  %index_vertex.2.lcssa.lcssa = phi i32 [ %index_vertex.2.lcssa, %._crit_edge ]
  %.lcssa59 = phi i16 [ %126, %._crit_edge ]
  %.pre47 = load i16* %4, align 2, !tbaa !30
  br label %131

; <label>:131                                     ; preds = %.preheader10, %._crit_edge22
  %132 = phi i16 [ %.lcssa59, %._crit_edge22 ], [ %45, %.preheader10 ]
  %133 = phi i16 [ %.pre47, %._crit_edge22 ], [ %46, %.preheader10 ]
  %134 = phi i16 [ %.lcssa59, %._crit_edge22 ], [ 0, %.preheader10 ]
  %index_vertex.1.lcssa = phi i32 [ %index_vertex.2.lcssa.lcssa, %._crit_edge22 ], [ %index_vertex.026, %.preheader10 ]
  %index_color.1.lcssa = phi i32 [ %index_color.2.lcssa.lcssa, %._crit_edge22 ], [ %index_color.025, %.preheader10 ]
  %135 = add nsw i32 %x1.027, 1
  %136 = zext i16 %133 to i32
  %137 = icmp slt i32 %135, %136
  br i1 %137, label %.preheader10, label %._crit_edge29.loopexit

._crit_edge29.loopexit:                           ; preds = %131
  %index_vertex.1.lcssa.lcssa = phi i32 [ %index_vertex.1.lcssa, %131 ]
  br label %._crit_edge29

._crit_edge29:                                    ; preds = %._crit_edge29.loopexit, %._crit_edge44
  %index_vertex.0.lcssa = phi i32 [ 0, %._crit_edge44 ], [ %index_vertex.1.lcssa.lcssa, %._crit_edge29.loopexit ]
  %138 = tail call i32 @glGenLists(i32 1) #4
  %139 = getelementptr inbounds %struct.kv6_t* %kv6, i32 0, i32 7
  store i32 %138, i32* %139, align 4, !tbaa !34
  tail call void @glEnableClientState(i32 32886) #4
  tail call void @glEnableClientState(i32 32884) #4
  %140 = load i32* %139, align 4, !tbaa !34
  tail call void @glNewList(i32 %140, i32 4864) #4
  %141 = load i16** %37, align 4, !tbaa !33
  %142 = bitcast i16* %141 to i8*
  tail call void @glVertexPointer(i32 3, i32 5122, i32 0, i8* %142) #4
  %143 = load i8** %33, align 4, !tbaa !32
  tail call void @glColorPointer(i32 3, i32 5121, i32 0, i8* %143) #4
  %144 = sdiv i32 %index_vertex.0.lcssa, 3
  tail call void @glDrawArrays(i32 0, i32 0, i32 %144) #4
  tail call void @glEndList() #4
  tail call void @glDisableClientState(i32 32884) #4
  tail call void @glDisableClientState(i32 32886) #4
  %145 = load i16** %37, align 4, !tbaa !33
  %146 = bitcast i16* %145 to i8*
  tail call void @free(i8* %146) #4
  %147 = load i8** %33, align 4, !tbaa !32
  tail call void @free(i8* %147) #4
  store i8 1, i8* %1, align 1, !tbaa !24
  br label %148

; <label>:148                                     ; preds = %._crit_edge53, %._crit_edge29
  %.pre-phi = phi i32* [ %.pre54, %._crit_edge53 ], [ %139, %._crit_edge29 ]
  %149 = load i32* %.pre-phi, align 4, !tbaa !34
  tail call void @glCallList(i32 %149) #4
  ret void
}

; Function Attrs: nounwind
define noalias i8* @file_load(i8* nocapture readonly %name) #0 {
  %1 = tail call %struct._IO_FILE* @fopen(i8* %name, i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0)) #4
  %2 = tail call i32 @fseek(%struct._IO_FILE* %1, i32 0, i32 2) #4
  %3 = tail call i32 @ftell(%struct._IO_FILE* %1) #4
  %4 = tail call noalias i8* @malloc(i32 %3) #4
  %5 = tail call i32 @fseek(%struct._IO_FILE* %1, i32 0, i32 0) #4
  %6 = tail call i32 @fread(i8* %4, i32 %3, i32 1, %struct._IO_FILE* %1) #4
  %7 = tail call i32 @fclose(%struct._IO_FILE* %1) #4
  ret i8* %4
}

; Function Attrs: nounwind
declare noalias %struct._IO_FILE* @fopen(i8* nocapture readonly, i8* nocapture readonly) #0

; Function Attrs: nounwind
declare i32 @fseek(%struct._IO_FILE* nocapture, i32, i32) #0

; Function Attrs: nounwind
declare i32 @ftell(%struct._IO_FILE* nocapture) #0

; Function Attrs: nounwind
declare i32 @fread(i8* nocapture, i32, i32, %struct._IO_FILE* nocapture) #0

; Function Attrs: nounwind
declare i32 @fclose(%struct._IO_FILE* nocapture) #0

; Function Attrs: nounwind
define void @ogl_reshape(i32 %width, i32 %height) #0 {
  tail call void @glViewport(i32 0, i32 0, i32 %width, i32 %height) #4
  store i32 %width, i32* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 5), align 4, !tbaa !35
  store i32 %height, i32* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 6), align 4, !tbaa !36
  ret void
}

declare void @glViewport(i32, i32, i32, i32) #3

; Function Attrs: nounwind
define void @ogl_init() #0 {
  %vertex = alloca i8*, align 4
  %fragment = alloca i8*, align 4
  %data = alloca i32, align 4
  store i8 1, i8* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 0), align 4, !tbaa !37
  store i8 0, i8* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 1), align 1, !tbaa !38
  store i8 0, i8* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 7), align 4, !tbaa !39
  store i8 0, i8* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 2), align 2, !tbaa !23
  store i8 1, i8* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 3), align 1, !tbaa !14
  store float 2.560000e+02, float* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 4), align 4, !tbaa !12
  tail call void @glDisable(i32 34037) #4
  tail call void @glEnable(i32 2929) #4
  tail call void @glEnable(i32 2884) #4
  tail call void @glCullFace(i32 1029) #4
  tail call void @glFrontFace(i32 2305) #4
  tail call void @glHint(i32 3152, i32 4354) #4
  tail call void @glClearDepth(double 1.000000e+00) #4
  tail call void @glDepthFunc(i32 515) #4
  tail call void @glShadeModel(i32 7425) #4
  %1 = tail call i32 bitcast (i32 (...)* @glXGetProcAddress to i32 (i8*)*)(i8* getelementptr inbounds ([19 x i8]* @.str1, i32 0, i32 0)) #4
  %2 = inttoptr i32 %1 to void (i32, float*)*
  store void (i32, float*)* %2, void (i32, float*)** @glPointParameterfv, align 4, !tbaa !5
  %3 = load i8* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 0), align 4, !tbaa !37
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %76

; <label>:5                                       ; preds = %0
  %6 = tail call i32 bitcast (i32 (...)* @glXGetProcAddress to i32 (i8*)*)(i8* getelementptr inbounds ([15 x i8]* @.str2, i32 0, i32 0)) #4
  %7 = inttoptr i32 %6 to i32 (i32)*
  store i32 (i32)* %7, i32 (i32)** @glCreateShader, align 4, !tbaa !5
  %8 = tail call i32 bitcast (i32 (...)* @glXGetProcAddress to i32 (i8*)*)(i8* getelementptr inbounds ([15 x i8]* @.str3, i32 0, i32 0)) #4
  %9 = inttoptr i32 %8 to void (i32, i32, i8**, i32*)*
  store void (i32, i32, i8**, i32*)* %9, void (i32, i32, i8**, i32*)** @glShaderSource, align 4, !tbaa !5
  %10 = tail call i32 bitcast (i32 (...)* @glXGetProcAddress to i32 (i8*)*)(i8* getelementptr inbounds ([16 x i8]* @.str4, i32 0, i32 0)) #4
  %11 = inttoptr i32 %10 to void (i32)*
  store void (i32)* %11, void (i32)** @glCompileShader, align 4, !tbaa !5
  %12 = tail call i32 bitcast (i32 (...)* @glXGetProcAddress to i32 (i8*)*)(i8* getelementptr inbounds ([16 x i8]* @.str5, i32 0, i32 0)) #4
  %13 = inttoptr i32 %12 to i32 ()*
  store i32 ()* %13, i32 ()** @glCreateProgram, align 4, !tbaa !5
  %14 = tail call i32 bitcast (i32 (...)* @glXGetProcAddress to i32 (i8*)*)(i8* getelementptr inbounds ([15 x i8]* @.str6, i32 0, i32 0)) #4
  %15 = inttoptr i32 %14 to void (i32, i32)*
  store void (i32, i32)* %15, void (i32, i32)** @glAttachShader, align 4, !tbaa !5
  %16 = tail call i32 bitcast (i32 (...)* @glXGetProcAddress to i32 (i8*)*)(i8* getelementptr inbounds ([14 x i8]* @.str7, i32 0, i32 0)) #4
  %17 = inttoptr i32 %16 to void (i32)*
  store void (i32)* %17, void (i32)** @glLinkProgram, align 4, !tbaa !5
  %18 = tail call i32 bitcast (i32 (...)* @glXGetProcAddress to i32 (i8*)*)(i8* getelementptr inbounds ([13 x i8]* @.str8, i32 0, i32 0)) #4
  %19 = inttoptr i32 %18 to void (i32)*
  store void (i32)* %19, void (i32)** @glUseProgram, align 4, !tbaa !5
  %20 = tail call i32 bitcast (i32 (...)* @glXGetProcAddress to i32 (i8*)*)(i8* getelementptr inbounds ([21 x i8]* @.str9, i32 0, i32 0)) #4
  %21 = inttoptr i32 %20 to i32 (i32, i8*)*
  store i32 (i32, i8*)* %21, i32 (i32, i8*)** @glGetUniformLocation, align 4, !tbaa !5
  %22 = tail call i32 bitcast (i32 (...)* @glXGetProcAddress to i32 (i8*)*)(i8* getelementptr inbounds ([12 x i8]* @.str10, i32 0, i32 0)) #4
  %23 = inttoptr i32 %22 to void (i32, float)*
  store void (i32, float)* %23, void (i32, float)** @glUniform1f, align 4, !tbaa !5
  %24 = tail call i32 bitcast (i32 (...)* @glXGetProcAddress to i32 (i8*)*)(i8* getelementptr inbounds ([12 x i8]* @.str11, i32 0, i32 0)) #4
  %25 = inttoptr i32 %24 to void (i32, float, float, float, float)*
  store void (i32, float, float, float, float)* %25, void (i32, float, float, float, float)** @glUniform4f, align 4, !tbaa !5
  %26 = tail call i32 bitcast (i32 (...)* @glXGetProcAddress to i32 (i8*)*)(i8* getelementptr inbounds ([12 x i8]* @.str12, i32 0, i32 0)) #4
  %27 = inttoptr i32 %26 to void (i32, i32)*
  store void (i32, i32)* %27, void (i32, i32)** @glUniform1i, align 4, !tbaa !5
  %28 = load i32 (i32)** @glCreateShader, align 4, !tbaa !5
  %29 = tail call i32 %28(i32 35633) #4
  %30 = tail call %struct._IO_FILE* @fopen(i8* getelementptr inbounds ([14 x i8]* @.str13, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0)) #4
  %31 = tail call i32 @fseek(%struct._IO_FILE* %30, i32 0, i32 2) #4
  %32 = tail call i32 @ftell(%struct._IO_FILE* %30) #4
  %33 = tail call noalias i8* @malloc(i32 %32) #4
  %34 = tail call i32 @fseek(%struct._IO_FILE* %30, i32 0, i32 0) #4
  %35 = tail call i32 @fread(i8* %33, i32 %32, i32 1, %struct._IO_FILE* %30) #4
  %36 = tail call i32 @fclose(%struct._IO_FILE* %30) #4
  store i8* %33, i8** %vertex, align 4, !tbaa !5
  %37 = tail call %struct._IO_FILE* @fopen(i8* getelementptr inbounds ([16 x i8]* @.str14, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0)) #4
  %38 = tail call i32 @fseek(%struct._IO_FILE* %37, i32 0, i32 2) #4
  %39 = tail call i32 @ftell(%struct._IO_FILE* %37) #4
  %40 = tail call noalias i8* @malloc(i32 %39) #4
  %41 = tail call i32 @fseek(%struct._IO_FILE* %37, i32 0, i32 0) #4
  %42 = tail call i32 @fread(i8* %40, i32 %39, i32 1, %struct._IO_FILE* %37) #4
  %43 = tail call i32 @fclose(%struct._IO_FILE* %37) #4
  store i8* %40, i8** %fragment, align 4, !tbaa !5
  %44 = load void (i32, i32, i8**, i32*)** @glShaderSource, align 4, !tbaa !5
  call void %44(i32 %29, i32 1, i8** %vertex, i32* null) #4
  %45 = load void (i32)** @glCompileShader, align 4, !tbaa !5
  call void %45(i32 %29) #4
  %46 = load i32 (i32)** @glCreateShader, align 4, !tbaa !5
  %47 = call i32 %46(i32 35632) #4
  %48 = load void (i32, i32, i8**, i32*)** @glShaderSource, align 4, !tbaa !5
  call void %48(i32 %47, i32 1, i8** %fragment, i32* null) #4
  %49 = load void (i32)** @glCompileShader, align 4, !tbaa !5
  call void %49(i32 %47) #4
  %50 = load i32 ()** @glCreateProgram, align 4, !tbaa !5
  %51 = call i32 %50() #4
  %52 = load void (i32, i32)** @glAttachShader, align 4, !tbaa !5
  call void %52(i32 %51, i32 %29) #4
  %53 = load void (i32, i32)** @glAttachShader, align 4, !tbaa !5
  call void %53(i32 %51, i32 %47) #4
  %54 = load void (i32)** @glLinkProgram, align 4, !tbaa !5
  call void %54(i32 %51) #4
  %55 = load void (i32)** @glUseProgram, align 4, !tbaa !5
  call void %55(i32 %51) #4
  %56 = load i32 (i32, i8*)** @glGetUniformLocation, align 4, !tbaa !5
  %57 = call i32 %56(i32 %51, i8* getelementptr inbounds ([11 x i8]* @.str15, i32 0, i32 0)) #4
  store i32 %57, i32* @uniform_point_size, align 4, !tbaa !1
  %58 = load i32 (i32, i8*)** @glGetUniformLocation, align 4, !tbaa !5
  %59 = call i32 %58(i32 %51, i8* getelementptr inbounds ([18 x i8]* @.str16, i32 0, i32 0)) #4
  store i32 %59, i32* @uniform_near_plane_height, align 4, !tbaa !1
  %60 = load i32 (i32, i8*)** @glGetUniformLocation, align 4, !tbaa !5
  %61 = call i32 %60(i32 %51, i8* getelementptr inbounds ([9 x i8]* @.str17, i32 0, i32 0)) #4
  store i32 %61, i32* @uniform_camera_x, align 4, !tbaa !1
  %62 = load i32 (i32, i8*)** @glGetUniformLocation, align 4, !tbaa !5
  %63 = call i32 %62(i32 %51, i8* getelementptr inbounds ([9 x i8]* @.str18, i32 0, i32 0)) #4
  store i32 %63, i32* @uniform_camera_z, align 4, !tbaa !1
  %64 = load i32 (i32, i8*)** @glGetUniformLocation, align 4, !tbaa !5
  %65 = call i32 %64(i32 %51, i8* getelementptr inbounds ([13 x i8]* @.str19, i32 0, i32 0)) #4
  store i32 %65, i32* @uniform_fog_distance, align 4, !tbaa !1
  %66 = load i32 (i32, i8*)** @glGetUniformLocation, align 4, !tbaa !5
  %67 = call i32 %66(i32 %51, i8* getelementptr inbounds ([11 x i8]* @.str20, i32 0, i32 0)) #4
  store i32 %67, i32* @uniform_map_size_x, align 4, !tbaa !1
  %68 = load i32 (i32, i8*)** @glGetUniformLocation, align 4, !tbaa !5
  %69 = call i32 %68(i32 %51, i8* getelementptr inbounds ([11 x i8]* @.str21, i32 0, i32 0)) #4
  store i32 %69, i32* @uniform_map_size_z, align 4, !tbaa !1
  %70 = load i32 (i32, i8*)** @glGetUniformLocation, align 4, !tbaa !5
  %71 = call i32 %70(i32 %51, i8* getelementptr inbounds ([10 x i8]* @.str22, i32 0, i32 0)) #4
  store i32 %71, i32* @uniform_fog_color, align 4, !tbaa !1
  %72 = load i32 (i32, i8*)** @glGetUniformLocation, align 4, !tbaa !5
  %73 = call i32 %72(i32 %51, i8* getelementptr inbounds ([25 x i8]* @.str23, i32 0, i32 0)) #4
  store i32 %73, i32* @uniform_setting_color_correction, align 4, !tbaa !1
  %74 = load i32 (i32, i8*)** @glGetUniformLocation, align 4, !tbaa !5
  %75 = call i32 %74(i32 %51, i8* getelementptr inbounds ([8 x i8]* @.str24, i32 0, i32 0)) #4
  store i32 %75, i32* @uniform_draw_ui, align 4, !tbaa !1
  call void @glEnable(i32 34370) #4
  br label %76

; <label>:76                                      ; preds = %0, %5
  %77 = load i8* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 7), align 4, !tbaa !39
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %80, label %79

; <label>:79                                      ; preds = %76
  call void @glEnable(i32 32925) #4
  call void @glHint(i32 34100, i32 4354) #4
  br label %80

; <label>:80                                      ; preds = %76, %79
  %81 = load i8* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 0), align 4, !tbaa !37
  %82 = icmp eq i8 %81, 0
  br i1 %82, label %83, label %85

; <label>:83                                      ; preds = %80
  %84 = call i32 @genTexture(i8* getelementptr inbounds ([12288 x i8]* @color_correction, i32 0, i32 0), i32 16, i32 16, i32 16)
  store i32 %84, i32* @texture_color_correction, align 4, !tbaa !1
  br label %85

; <label>:85                                      ; preds = %80, %83
  %86 = call i32 @clock() #4
  %87 = sdiv i32 %86, 1000
  store i32 %87, i32* @fps_last_update, align 4, !tbaa !1
  call void @llvm.memset.p0i8.i32(i8* bitcast ([128 x i32]* @overlay_textures_id to i8*), i8 0, i32 512, i32 4, i1 false)
  call void @llvm.memset.p0i8.i32(i8* bitcast ([128 x i32]* @overlay_textures_data to i8*), i8 0, i32 512, i32 4, i1 false)
  call void @llvm.memset.p0i8.i32(i8* bitcast ([128 x i32]* @kv6_name to i8*), i8 0, i32 512, i32 4, i1 false)
  call void @llvm.memset.p0i8.i32(i8* bitcast ([128 x %struct.kv6_t*]* @kv6_model to i8*), i8 0, i32 512, i32 4, i1 false)
  call void @glEnable(i32 3553) #4
  call void @glGenTextures(i32 1, i32* @texture_checkerboard) #4
  %88 = load i32* @texture_checkerboard, align 4, !tbaa !1
  call void @glBindTexture(i32 3553, i32 %88) #4
  store i32 -8355585, i32* %data, align 4
  %89 = bitcast i32* %data to i8*
  call void @glTexImage2D(i32 3553, i32 0, i32 6406, i32 2, i32 2, i32 0, i32 6406, i32 5121, i8* %89) #4
  call void @glTexParameteri(i32 3553, i32 10242, i32 10497) #4
  call void @glTexParameteri(i32 3553, i32 10243, i32 10497) #4
  call void @glTexParameteri(i32 3553, i32 10241, i32 9728) #4
  call void @glTexParameteri(i32 3553, i32 10240, i32 9728) #4
  call void @glBindTexture(i32 3553, i32 0) #4
  call void @glDisable(i32 3553) #4
  ret void
}

declare void @glDisable(i32) #3

declare void @glEnable(i32) #3

declare void @glCullFace(i32) #3

declare void @glFrontFace(i32) #3

declare void @glHint(i32, i32) #3

declare void @glClearDepth(double) #3

declare void @glDepthFunc(i32) #3

declare void @glShadeModel(i32) #3

declare i32 @glXGetProcAddress(...) #3

; Function Attrs: nounwind
define i32 @genTexture(i8* %data, i32 %width, i32 %height, i32 %depth) #0 {
  %texture = alloca i32, align 4
  tail call void @glEnable(i32 32879) #4
  call void @glGenTextures(i32 1, i32* %texture) #4
  %1 = load i32* %texture, align 4, !tbaa !1
  call void @glBindTexture(i32 32879, i32 %1) #4
  call void @glTexImage3D(i32 32879, i32 0, i32 6407, i32 %width, i32 %height, i32 %depth, i32 0, i32 6407, i32 5121, i8* %data) #4
  call void @glTexParameteri(i32 32879, i32 10242, i32 33071) #4
  call void @glTexParameteri(i32 32879, i32 10243, i32 33071) #4
  call void @glTexParameteri(i32 32879, i32 32882, i32 33071) #4
  call void @glTexParameteri(i32 32879, i32 10241, i32 9729) #4
  call void @glTexParameteri(i32 32879, i32 10240, i32 9729) #4
  call void @glBindTexture(i32 32879, i32 0) #4
  call void @glDisable(i32 32879) #4
  %2 = load i32* %texture, align 4, !tbaa !1
  ret i32 %2
}

declare void @glGenTextures(i32, i32*) #3

declare void @glBindTexture(i32, i32) #3

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture, i8* nocapture readonly, i32, i32, i1) #4

declare void @glTexImage2D(i32, i32, i32, i32, i32, i32, i32, i32, i8*) #3

declare void @glTexParameteri(i32, i32, i32) #3

; Function Attrs: nounwind
define void @ogl_display() #0 {
  %fog_color = alloca [4 x float], align 4
  %1 = bitcast [4 x float]* %fog_color to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %1, i8* bitcast ([4 x float]* @ogl_display.fog_color to i8*), i32 16, i32 4, i1 false)
  tail call void @glClearColor(float 5.000000e-01, float 0x3FED1D14E0000000, float 1.000000e+00, float 1.000000e+00) #4
  %2 = load i8* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 0), align 4, !tbaa !37
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %9, label %4

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds [4 x float]* %fog_color, i32 0, i32 0
  tail call void @glFogi(i32 2917, i32 9729) #4
  call void @glFogfv(i32 2918, float* %5) #4
  %6 = load float* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 4), align 4, !tbaa !12
  %7 = fmul fast float %6, 3.750000e-01
  call void @glFogf(i32 2915, float %7) #4
  %8 = load float* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 4), align 4, !tbaa !12
  call void @glFogf(i32 2916, float %8) #4
  call void @glEnable(i32 2912) #4
  br label %35

; <label>:9                                       ; preds = %0
  tail call void @glDisable(i32 2912) #4
  %10 = load void (i32, float)** @glUniform1f, align 4, !tbaa !5
  %11 = load i32* @uniform_fog_distance, align 4, !tbaa !1
  %12 = load float* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 4), align 4, !tbaa !12
  tail call void %10(i32 %11, float %12) #4
  %13 = load void (i32, float)** @glUniform1f, align 4, !tbaa !5
  %14 = load i32* @uniform_camera_x, align 4, !tbaa !1
  %15 = load float* @camera_x, align 4, !tbaa !10
  tail call void %13(i32 %14, float %15) #4
  %16 = load void (i32, float)** @glUniform1f, align 4, !tbaa !5
  %17 = load i32* @uniform_camera_z, align 4, !tbaa !1
  %18 = load float* @camera_z, align 4, !tbaa !10
  tail call void %16(i32 %17, float %18) #4
  %19 = load void (i32, float)** @glUniform1f, align 4, !tbaa !5
  %20 = load i32* @uniform_map_size_x, align 4, !tbaa !1
  %21 = load i32* @map_size_x, align 4, !tbaa !1
  %22 = sitofp i32 %21 to float
  tail call void %19(i32 %20, float %22) #4
  %23 = load void (i32, float)** @glUniform1f, align 4, !tbaa !5
  %24 = load i32* @uniform_map_size_z, align 4, !tbaa !1
  %25 = load i32* @map_size_z, align 4, !tbaa !1
  %26 = sitofp i32 %25 to float
  tail call void %23(i32 %24, float %26) #4
  %27 = load void (i32, float, float, float, float)** @glUniform4f, align 4, !tbaa !5
  %28 = load i32* @uniform_fog_color, align 4, !tbaa !1
  tail call void %27(i32 %28, float 5.000000e-01, float 0x3FED1D14E0000000, float 1.000000e+00, float 1.000000e+00) #4
  %29 = load void (i32, i32)** @glUniform1i, align 4, !tbaa !5
  %30 = load i32* @uniform_setting_color_correction, align 4, !tbaa !1
  %31 = load i8* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 1), align 1, !tbaa !38
  %32 = zext i8 %31 to i32
  tail call void %29(i32 %30, i32 %32) #4
  %33 = load void (i32, i32)** @glUniform1i, align 4, !tbaa !5
  %34 = load i32* @uniform_draw_ui, align 4, !tbaa !1
  tail call void %33(i32 %34, i32 0) #4
  br label %35

; <label>:35                                      ; preds = %9, %4
  %36 = load i16* bitcast ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings to i16*), align 4
  %37 = trunc i16 %36 to i8
  %38 = icmp ne i8 %37, 0
  %39 = icmp ult i16 %36, 256
  %or.cond = or i1 %38, %39
  br i1 %or.cond, label %42, label %40

; <label>:40                                      ; preds = %35
  call void @glEnable(i32 32879) #4
  %41 = load i32* @texture_color_correction, align 4, !tbaa !1
  call void @glBindTexture(i32 32879, i32 %41) #4
  br label %45

; <label>:42                                      ; preds = %35
  %43 = icmp eq i8 %37, 0
  br i1 %43, label %44, label %45

; <label>:44                                      ; preds = %42
  call void @glDisable(i32 32879) #4
  br label %45

; <label>:45                                      ; preds = %42, %44, %40
  call void @chunk_update_all()
  %46 = load i8* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 2), align 2, !tbaa !23
  %47 = zext i8 %46 to i32
  %48 = shl nuw nsw i32 %47, 10
  %49 = or i32 %48, 16640
  call void @glClear(i32 %49) #4
  %50 = load i8* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 0), align 4, !tbaa !37
  %51 = icmp eq i8 %50, 0
  call void @glMatrixMode(i32 5889) #4
  call void @glLoadIdentity() #4
  %52 = load float* @camera_fov, align 4, !tbaa !10
  %53 = fpext float %52 to double
  %54 = load i32* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 5), align 4, !tbaa !35
  %55 = sitofp i32 %54 to float
  %56 = load i32* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 6), align 4, !tbaa !36
  %57 = sitofp i32 %56 to float
  %58 = fdiv fast float %55, %57
  %59 = fpext float %58 to double
  %60 = load float* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 4), align 4, !tbaa !12
  br i1 %51, label %83, label %61

; <label>:61                                      ; preds = %45
  %62 = fadd fast float %60, 1.920000e+02
  %63 = fpext float %62 to double
  call void @gluPerspective(double %53, double %59, double 0x3FB99999A0000000, double %63) #4
  call void @glMatrixMode(i32 5888) #4
  call void @glLoadIdentity() #4
  %64 = load float* @camera_x, align 4, !tbaa !10
  %65 = fpext float %64 to double
  %66 = load float* @camera_y, align 4, !tbaa !10
  %67 = fpext float %66 to double
  %68 = load float* @camera_z, align 4, !tbaa !10
  %69 = fpext float %68 to double
  %70 = load float* @camera_rot_x, align 4, !tbaa !10
  %71 = fpext float %70 to double
  %72 = call double @sin(double %71) #5
  %73 = load float* @camera_rot_y, align 4, !tbaa !10
  %74 = fpext float %73 to double
  %75 = call double @sin(double %74) #5
  %76 = fmul fast double %72, %75
  %77 = fadd fast double %65, %76
  %78 = call double @cos(double %74) #5
  %79 = fadd fast double %67, %78
  %80 = call double @cos(double %71) #5
  %81 = fmul fast double %75, %80
  %82 = fadd fast double %69, %81
  call void @gluLookAt(double %65, double %67, double %69, double %77, double %79, double %82, double 0.000000e+00, double 1.000000e+00, double 0.000000e+00) #4
  br label %105

; <label>:83                                      ; preds = %45
  %84 = fadd fast float %60, 6.400000e+01
  %85 = fpext float %84 to double
  call void @gluPerspective(double %53, double %59, double 0x3FB99999A0000000, double %85) #4
  %86 = load float* @camera_x, align 4, !tbaa !10
  %87 = fpext float %86 to double
  %88 = load float* @camera_y, align 4, !tbaa !10
  %89 = fpext float %88 to double
  %90 = load float* @camera_z, align 4, !tbaa !10
  %91 = fpext float %90 to double
  %92 = load float* @camera_rot_x, align 4, !tbaa !10
  %93 = fpext float %92 to double
  %94 = call double @sin(double %93) #5
  %95 = load float* @camera_rot_y, align 4, !tbaa !10
  %96 = fpext float %95 to double
  %97 = call double @sin(double %96) #5
  %98 = fmul fast double %94, %97
  %99 = fadd fast double %87, %98
  %100 = call double @cos(double %96) #5
  %101 = fadd fast double %89, %100
  %102 = call double @cos(double %93) #5
  %103 = fmul fast double %97, %102
  %104 = fadd fast double %91, %103
  call void @gluLookAt(double %87, double %89, double %91, double %99, double %101, double %104, double 0.000000e+00, double 1.000000e+00, double 0.000000e+00) #4
  call void @glMatrixMode(i32 5888) #4
  call void @glLoadIdentity() #4
  br label %105

; <label>:105                                     ; preds = %83, %61
  call void @camera_ExtractFrustum()
  %106 = load i8* @chunk_geometry_rebuild, align 1, !tbaa !9
  %107 = icmp eq i8 %106, 0
  br i1 %107, label %108, label %199

; <label>:108                                     ; preds = %105
  %109 = load i16* bitcast (i8* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 2) to i16*), align 2
  %110 = trunc i16 %109 to i8
  %111 = icmp eq i8 %110, 0
  %112 = icmp ult i16 %109, 256
  br i1 %111, label %122, label %113

; <label>:113                                     ; preds = %108
  br i1 %112, label %115, label %114

; <label>:114                                     ; preds = %113
  call void @glShadeModel(i32 7425) #4
  br label %drawScene.exit

; <label>:115                                     ; preds = %113
  call void @glShadeModel(i32 7424) #4
  br label %drawScene.exit

drawScene.exit:                                   ; preds = %114, %115
  %116 = call float @chunk_draw_visible(i8 zeroext 1) #4
  call void @glShadeModel(i32 7424) #4
  call void @glEnable(i32 2960) #4
  call void @glDepthMask(i8 zeroext 0) #4
  call void @glColorMask(i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0) #4
  call void @glStencilFunc(i32 519, i32 0, i32 0) #4
  call void @glCullFace(i32 1028) #4
  call void @glStencilOp(i32 7680, i32 7680, i32 34055) #4
  call void @glCullFace(i32 1029) #4
  call void @glStencilOp(i32 7680, i32 7680, i32 34056) #4
  call void @glDepthMask(i8 zeroext 1) #4
  call void @glColorMask(i8 zeroext 1, i8 zeroext 1, i8 zeroext 1, i8 zeroext 1) #4
  call void @glCullFace(i32 1029) #4
  call void @glStencilFunc(i32 514, i32 0, i32 255) #4
  call void @glStencilOp(i32 7680, i32 7680, i32 7680) #4
  %117 = load i8* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 3), align 1, !tbaa !14
  %118 = icmp eq i8 %117, 0
  br i1 %118, label %120, label %119

; <label>:119                                     ; preds = %drawScene.exit
  call void @glShadeModel(i32 7425) #4
  br label %drawScene.exit4

; <label>:120                                     ; preds = %drawScene.exit
  call void @glShadeModel(i32 7424) #4
  br label %drawScene.exit4

drawScene.exit4:                                  ; preds = %119, %120
  %121 = call float @chunk_draw_visible(i8 zeroext 0) #4
  call void @glShadeModel(i32 7424) #4
  call void @glDisable(i32 2960) #4
  br label %126

; <label>:122                                     ; preds = %108
  br i1 %112, label %124, label %123

; <label>:123                                     ; preds = %122
  call void @glShadeModel(i32 7425) #4
  br label %drawScene.exit5

; <label>:124                                     ; preds = %122
  call void @glShadeModel(i32 7424) #4
  br label %drawScene.exit5

drawScene.exit5:                                  ; preds = %123, %124
  %125 = call float @chunk_draw_visible(i8 zeroext 0) #4
  call void @glShadeModel(i32 7424) #4
  br label %126

; <label>:126                                     ; preds = %drawScene.exit5, %drawScene.exit4
  %per.0 = phi float [ %121, %drawScene.exit4 ], [ %125, %drawScene.exit5 ]
  call void @glPolygonMode(i32 1032, i32 6913) #4
  call void @glEnable(i32 10754) #4
  call void @glPolygonOffset(float 0.000000e+00, float -5.000000e+02) #4
  call void @glDisable(i32 2884) #4
  call void @glLineWidth(float 1.000000e+00) #4
  call void @glBegin(i32 7) #4
  call void @glColor4f(float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00) #4
  %127 = load float* @wireframe_x, align 4, !tbaa !10
  %128 = load float* @wireframe_y, align 4, !tbaa !10
  %129 = load float* @wireframe_z, align 4, !tbaa !10
  call void @glVertex3f(float %127, float %128, float %129) #4
  %130 = load float* @wireframe_x, align 4, !tbaa !10
  %131 = fadd fast float %130, 1.000000e+00
  %132 = load float* @wireframe_y, align 4, !tbaa !10
  %133 = load float* @wireframe_z, align 4, !tbaa !10
  call void @glVertex3f(float %131, float %132, float %133) #4
  %134 = load float* @wireframe_x, align 4, !tbaa !10
  %135 = fadd fast float %134, 1.000000e+00
  %136 = load float* @wireframe_y, align 4, !tbaa !10
  %137 = load float* @wireframe_z, align 4, !tbaa !10
  %138 = fadd fast float %137, 1.000000e+00
  call void @glVertex3f(float %135, float %136, float %138) #4
  %139 = load float* @wireframe_x, align 4, !tbaa !10
  %140 = load float* @wireframe_y, align 4, !tbaa !10
  %141 = load float* @wireframe_z, align 4, !tbaa !10
  %142 = fadd fast float %141, 1.000000e+00
  call void @glVertex3f(float %139, float %140, float %142) #4
  %143 = load float* @wireframe_x, align 4, !tbaa !10
  %144 = load float* @wireframe_y, align 4, !tbaa !10
  %145 = fadd fast float %144, 1.000000e+00
  %146 = load float* @wireframe_z, align 4, !tbaa !10
  call void @glVertex3f(float %143, float %145, float %146) #4
  %147 = load float* @wireframe_x, align 4, !tbaa !10
  %148 = fadd fast float %147, 1.000000e+00
  %149 = load float* @wireframe_y, align 4, !tbaa !10
  %150 = fadd fast float %149, 1.000000e+00
  %151 = load float* @wireframe_z, align 4, !tbaa !10
  call void @glVertex3f(float %148, float %150, float %151) #4
  %152 = load float* @wireframe_x, align 4, !tbaa !10
  %153 = fadd fast float %152, 1.000000e+00
  %154 = load float* @wireframe_y, align 4, !tbaa !10
  %155 = fadd fast float %154, 1.000000e+00
  %156 = load float* @wireframe_z, align 4, !tbaa !10
  %157 = fadd fast float %156, 1.000000e+00
  call void @glVertex3f(float %153, float %155, float %157) #4
  %158 = load float* @wireframe_x, align 4, !tbaa !10
  %159 = load float* @wireframe_y, align 4, !tbaa !10
  %160 = fadd fast float %159, 1.000000e+00
  %161 = load float* @wireframe_z, align 4, !tbaa !10
  %162 = fadd fast float %161, 1.000000e+00
  call void @glVertex3f(float %158, float %160, float %162) #4
  %163 = load float* @wireframe_x, align 4, !tbaa !10
  %164 = load float* @wireframe_y, align 4, !tbaa !10
  %165 = load float* @wireframe_z, align 4, !tbaa !10
  call void @glVertex3f(float %163, float %164, float %165) #4
  %166 = load float* @wireframe_x, align 4, !tbaa !10
  %167 = fadd fast float %166, 1.000000e+00
  %168 = load float* @wireframe_y, align 4, !tbaa !10
  %169 = load float* @wireframe_z, align 4, !tbaa !10
  call void @glVertex3f(float %167, float %168, float %169) #4
  %170 = load float* @wireframe_x, align 4, !tbaa !10
  %171 = fadd fast float %170, 1.000000e+00
  %172 = load float* @wireframe_y, align 4, !tbaa !10
  %173 = fadd fast float %172, 1.000000e+00
  %174 = load float* @wireframe_z, align 4, !tbaa !10
  call void @glVertex3f(float %171, float %173, float %174) #4
  %175 = load float* @wireframe_x, align 4, !tbaa !10
  %176 = load float* @wireframe_y, align 4, !tbaa !10
  %177 = fadd fast float %176, 1.000000e+00
  %178 = load float* @wireframe_z, align 4, !tbaa !10
  call void @glVertex3f(float %175, float %177, float %178) #4
  %179 = load float* @wireframe_x, align 4, !tbaa !10
  %180 = load float* @wireframe_y, align 4, !tbaa !10
  %181 = load float* @wireframe_z, align 4, !tbaa !10
  %182 = fadd fast float %181, 1.000000e+00
  call void @glVertex3f(float %179, float %180, float %182) #4
  %183 = load float* @wireframe_x, align 4, !tbaa !10
  %184 = fadd fast float %183, 1.000000e+00
  %185 = load float* @wireframe_y, align 4, !tbaa !10
  %186 = load float* @wireframe_z, align 4, !tbaa !10
  %187 = fadd fast float %186, 1.000000e+00
  call void @glVertex3f(float %184, float %185, float %187) #4
  %188 = load float* @wireframe_x, align 4, !tbaa !10
  %189 = fadd fast float %188, 1.000000e+00
  %190 = load float* @wireframe_y, align 4, !tbaa !10
  %191 = fadd fast float %190, 1.000000e+00
  %192 = load float* @wireframe_z, align 4, !tbaa !10
  %193 = fadd fast float %192, 1.000000e+00
  call void @glVertex3f(float %189, float %191, float %193) #4
  %194 = load float* @wireframe_x, align 4, !tbaa !10
  %195 = load float* @wireframe_y, align 4, !tbaa !10
  %196 = fadd fast float %195, 1.000000e+00
  %197 = load float* @wireframe_z, align 4, !tbaa !10
  %198 = fadd fast float %197, 1.000000e+00
  call void @glVertex3f(float %194, float %196, float %198) #4
  call void @glEnd() #4
  call void @glEnable(i32 2884) #4
  call void @glPolygonOffset(float 0.000000e+00, float 0.000000e+00) #4
  call void @glDisable(i32 10754) #4
  call void @glPolygonMode(i32 1032, i32 6914) #4
  br label %203

; <label>:199                                     ; preds = %105
  %200 = load i32* @chunk_geometry_rebuild_state, align 4, !tbaa !1
  %201 = sitofp i32 %200 to float
  %202 = fmul fast float %201, 9.765625e-04
  br label %203

; <label>:203                                     ; preds = %199, %126
  %per.1 = phi float [ %202, %199 ], [ %per.0, %126 ]
  %204 = load float* @camera_x, align 4, !tbaa !10
  %205 = load i32* @map_size_x, align 4, !tbaa !1
  %206 = sitofp i32 %205 to float
  %207 = fsub fast float %206, %204
  %208 = fcmp olt float %204, %207
  %. = select i1 %208, float %204, float %207
  %209 = load float* @camera_z, align 4, !tbaa !10
  %210 = load i32* @map_size_z, align 4, !tbaa !1
  %211 = sitofp i32 %210 to float
  %212 = fsub fast float %211, %209
  %213 = fcmp olt float %209, %212
  %214 = select i1 %213, float %209, float %212
  %215 = fcmp olt float %., %214
  %216 = select i1 %215, float %., float %214
  %217 = fcmp olt float %216, 1.200000e+01
  br i1 %217, label %218, label %342

; <label>:218                                     ; preds = %203
  call void @glDisable(i32 2884) #4
  call void @glEnable(i32 3042) #4
  call void @glEnable(i32 3553) #4
  call void @glBlendFunc(i32 770, i32 771) #4
  %219 = load i32* @texture_checkerboard, align 4, !tbaa !1
  call void @glBindTexture(i32 3553, i32 %219) #4
  %220 = fmul fast float %216, 6.250000e-02
  %221 = fsub fast float 7.500000e-01, %220
  call void @glColor4f(float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float %221) #4
  call void @glBegin(i32 7) #4
  call void @glTexCoord2f(float 0.000000e+00, float 0.000000e+00) #4
  call void @glVertex3f(float 0xBFB99999A0000000, float 0xBFB99999A0000000, float 0xBFB99999A0000000) #4
  %222 = load i32* @map_size_y, align 4, !tbaa !1
  %223 = sdiv i32 %222, 4
  %224 = sitofp i32 %223 to float
  call void @glTexCoord2f(float 0.000000e+00, float %224) #4
  %225 = load i32* @map_size_y, align 4, !tbaa !1
  %226 = sitofp i32 %225 to float
  %227 = fadd fast float %226, 0x3FB99999A0000000
  call void @glVertex3f(float 0xBFB99999A0000000, float %227, float 0xBFB99999A0000000) #4
  %228 = load i32* @map_size_x, align 4, !tbaa !1
  %229 = sdiv i32 %228, 4
  %230 = sitofp i32 %229 to float
  %231 = load i32* @map_size_y, align 4, !tbaa !1
  %232 = sdiv i32 %231, 4
  %233 = sitofp i32 %232 to float
  call void @glTexCoord2f(float %230, float %233) #4
  %234 = load i32* @map_size_x, align 4, !tbaa !1
  %235 = sitofp i32 %234 to float
  %236 = fadd fast float %235, 0x3FB99999A0000000
  %237 = load i32* @map_size_y, align 4, !tbaa !1
  %238 = sitofp i32 %237 to float
  %239 = fadd fast float %238, 0x3FB99999A0000000
  call void @glVertex3f(float %236, float %239, float 0xBFB99999A0000000) #4
  %240 = load i32* @map_size_x, align 4, !tbaa !1
  %241 = sdiv i32 %240, 4
  %242 = sitofp i32 %241 to float
  call void @glTexCoord2f(float %242, float 0.000000e+00) #4
  %243 = load i32* @map_size_x, align 4, !tbaa !1
  %244 = sitofp i32 %243 to float
  %245 = fadd fast float %244, 0x3FB99999A0000000
  call void @glVertex3f(float %245, float 0xBFB99999A0000000, float 0xBFB99999A0000000) #4
  call void @glTexCoord2f(float 0.000000e+00, float 0.000000e+00) #4
  call void @glVertex3f(float 0xBFB99999A0000000, float 0xBFB99999A0000000, float 0xBFB99999A0000000) #4
  %246 = load i32* @map_size_y, align 4, !tbaa !1
  %247 = sdiv i32 %246, 4
  %248 = sitofp i32 %247 to float
  call void @glTexCoord2f(float %248, float 0.000000e+00) #4
  %249 = load i32* @map_size_y, align 4, !tbaa !1
  %250 = sitofp i32 %249 to float
  %251 = fadd fast float %250, 0x3FB99999A0000000
  call void @glVertex3f(float 0xBFB99999A0000000, float %251, float 0xBFB99999A0000000) #4
  %252 = load i32* @map_size_y, align 4, !tbaa !1
  %253 = sdiv i32 %252, 4
  %254 = sitofp i32 %253 to float
  %255 = load i32* @map_size_z, align 4, !tbaa !1
  %256 = sdiv i32 %255, 4
  %257 = sitofp i32 %256 to float
  call void @glTexCoord2f(float %254, float %257) #4
  %258 = load i32* @map_size_y, align 4, !tbaa !1
  %259 = sitofp i32 %258 to float
  %260 = fadd fast float %259, 0x3FB99999A0000000
  %261 = load i32* @map_size_z, align 4, !tbaa !1
  %262 = sitofp i32 %261 to float
  %263 = fadd fast float %262, 0x3FB99999A0000000
  call void @glVertex3f(float 0xBFB99999A0000000, float %260, float %263) #4
  %264 = load i32* @map_size_z, align 4, !tbaa !1
  %265 = sdiv i32 %264, 4
  %266 = sitofp i32 %265 to float
  call void @glTexCoord2f(float 0.000000e+00, float %266) #4
  %267 = load i32* @map_size_z, align 4, !tbaa !1
  %268 = sitofp i32 %267 to float
  %269 = fadd fast float %268, 0x3FB99999A0000000
  call void @glVertex3f(float 0xBFB99999A0000000, float 0xBFB99999A0000000, float %269) #4
  call void @glTexCoord2f(float 0.000000e+00, float 0.000000e+00) #4
  %270 = load i32* @map_size_z, align 4, !tbaa !1
  %271 = sitofp i32 %270 to float
  %272 = fadd fast float %271, 0x3FB99999A0000000
  call void @glVertex3f(float 0xBFB99999A0000000, float 0xBFB99999A0000000, float %272) #4
  %273 = load i32* @map_size_y, align 4, !tbaa !1
  %274 = sdiv i32 %273, 4
  %275 = sitofp i32 %274 to float
  call void @glTexCoord2f(float 0.000000e+00, float %275) #4
  %276 = load i32* @map_size_y, align 4, !tbaa !1
  %277 = sitofp i32 %276 to float
  %278 = fadd fast float %277, 0x3FB99999A0000000
  %279 = load i32* @map_size_z, align 4, !tbaa !1
  %280 = sitofp i32 %279 to float
  %281 = fadd fast float %280, 0x3FB99999A0000000
  call void @glVertex3f(float 0xBFB99999A0000000, float %278, float %281) #4
  %282 = load i32* @map_size_x, align 4, !tbaa !1
  %283 = sdiv i32 %282, 4
  %284 = sitofp i32 %283 to float
  %285 = load i32* @map_size_y, align 4, !tbaa !1
  %286 = sdiv i32 %285, 4
  %287 = sitofp i32 %286 to float
  call void @glTexCoord2f(float %284, float %287) #4
  %288 = load i32* @map_size_x, align 4, !tbaa !1
  %289 = sitofp i32 %288 to float
  %290 = fadd fast float %289, 0x3FB99999A0000000
  %291 = load i32* @map_size_y, align 4, !tbaa !1
  %292 = sitofp i32 %291 to float
  %293 = fadd fast float %292, 0x3FB99999A0000000
  %294 = load i32* @map_size_z, align 4, !tbaa !1
  %295 = sitofp i32 %294 to float
  %296 = fadd fast float %295, 0x3FB99999A0000000
  call void @glVertex3f(float %290, float %293, float %296) #4
  %297 = load i32* @map_size_x, align 4, !tbaa !1
  %298 = sdiv i32 %297, 4
  %299 = sitofp i32 %298 to float
  call void @glTexCoord2f(float %299, float 0.000000e+00) #4
  %300 = load i32* @map_size_x, align 4, !tbaa !1
  %301 = sitofp i32 %300 to float
  %302 = fadd fast float %301, 0x3FB99999A0000000
  %303 = load i32* @map_size_z, align 4, !tbaa !1
  %304 = sitofp i32 %303 to float
  %305 = fadd fast float %304, 0x3FB99999A0000000
  call void @glVertex3f(float %302, float 0xBFB99999A0000000, float %305) #4
  call void @glTexCoord2f(float 0.000000e+00, float 0.000000e+00) #4
  %306 = load i32* @map_size_x, align 4, !tbaa !1
  %307 = sitofp i32 %306 to float
  %308 = fadd fast float %307, 0x3FB99999A0000000
  call void @glVertex3f(float %308, float 0xBFB99999A0000000, float 0xBFB99999A0000000) #4
  %309 = load i32* @map_size_y, align 4, !tbaa !1
  %310 = sdiv i32 %309, 4
  %311 = sitofp i32 %310 to float
  call void @glTexCoord2f(float %311, float 0.000000e+00) #4
  %312 = load i32* @map_size_x, align 4, !tbaa !1
  %313 = sitofp i32 %312 to float
  %314 = fadd fast float %313, 0x3FB99999A0000000
  %315 = load i32* @map_size_y, align 4, !tbaa !1
  %316 = sitofp i32 %315 to float
  %317 = fadd fast float %316, 0x3FB99999A0000000
  call void @glVertex3f(float %314, float %317, float 0xBFB99999A0000000) #4
  %318 = load i32* @map_size_y, align 4, !tbaa !1
  %319 = sdiv i32 %318, 4
  %320 = sitofp i32 %319 to float
  %321 = load i32* @map_size_z, align 4, !tbaa !1
  %322 = sdiv i32 %321, 4
  %323 = sitofp i32 %322 to float
  call void @glTexCoord2f(float %320, float %323) #4
  %324 = load i32* @map_size_x, align 4, !tbaa !1
  %325 = sitofp i32 %324 to float
  %326 = fadd fast float %325, 0x3FB99999A0000000
  %327 = load i32* @map_size_y, align 4, !tbaa !1
  %328 = sitofp i32 %327 to float
  %329 = fadd fast float %328, 0x3FB99999A0000000
  %330 = load i32* @map_size_z, align 4, !tbaa !1
  %331 = sitofp i32 %330 to float
  %332 = fadd fast float %331, 0x3FB99999A0000000
  call void @glVertex3f(float %326, float %329, float %332) #4
  %333 = load i32* @map_size_z, align 4, !tbaa !1
  %334 = sdiv i32 %333, 4
  %335 = sitofp i32 %334 to float
  call void @glTexCoord2f(float 0.000000e+00, float %335) #4
  %336 = load i32* @map_size_x, align 4, !tbaa !1
  %337 = sitofp i32 %336 to float
  %338 = fadd fast float %337, 0x3FB99999A0000000
  %339 = load i32* @map_size_z, align 4, !tbaa !1
  %340 = sitofp i32 %339 to float
  %341 = fadd fast float %340, 0x3FB99999A0000000
  call void @glVertex3f(float %338, float 0xBFB99999A0000000, float %341) #4
  call void @glEnd() #4
  call void @glBindTexture(i32 3553, i32 0) #4
  call void @glDisable(i32 3553) #4
  call void @glDisable(i32 3042) #4
  call void @glEnable(i32 2884) #4
  br label %342

; <label>:342                                     ; preds = %218, %203
  %343 = call i32 @clock() #4
  %344 = sdiv i32 %343, 1000
  %345 = load i32* @time_last_frame, align 4, !tbaa !1
  %346 = sub nsw i32 %344, %345
  %347 = sitofp i32 %346 to float
  %348 = call i32 @clock() #4
  %349 = sdiv i32 %348, 1000
  store i32 %349, i32* @time_last_frame, align 4, !tbaa !1
  %350 = fdiv fast float 0x408F3FFFE0000000, %347
  %351 = load float* @fps_max, align 4, !tbaa !10
  %352 = fcmp ogt float %350, %351
  br i1 %352, label %353, label %354

; <label>:353                                     ; preds = %342
  store float %350, float* @fps_max, align 4, !tbaa !10
  br label %354

; <label>:354                                     ; preds = %353, %342
  %355 = load float* @fps_min, align 4, !tbaa !10
  %356 = fcmp olt float %350, %355
  br i1 %356, label %357, label %358

; <label>:357                                     ; preds = %354
  store float %350, float* @fps_min, align 4, !tbaa !10
  br label %358

; <label>:358                                     ; preds = %357, %354
  %359 = call i32 @clock() #4
  %360 = sdiv i32 %359, 1000
  %361 = load i32* @fps_last_update, align 4, !tbaa !1
  %362 = sub nsw i32 %360, %361
  %363 = icmp sgt i32 %362, 500
  br i1 %363, label %vector.body.preheader, label %386

vector.body.preheader:                            ; preds = %358
  br label %vector.body

vector.body:                                      ; preds = %vector.body.preheader, %vector.body
  %index = phi i32 [ %index.next, %vector.body ], [ 0, %vector.body.preheader ]
  %364 = or i32 %index, 1
  %365 = getelementptr inbounds [100 x float]* @fps_last, i32 0, i32 %364
  %366 = bitcast float* %365 to <4 x float>*
  %wide.load = load <4 x float>* %366, align 4, !tbaa !10
  %367 = getelementptr inbounds [100 x float]* @fps_last, i32 0, i32 %index
  %368 = bitcast float* %367 to <4 x float>*
  store <4 x float> %wide.load, <4 x float>* %368, align 4, !tbaa !10
  %369 = getelementptr inbounds [100 x float]* @per_last, i32 0, i32 %364
  %370 = bitcast float* %369 to <4 x float>*
  %wide.load7 = load <4 x float>* %370, align 4, !tbaa !10
  %371 = getelementptr inbounds [100 x float]* @per_last, i32 0, i32 %index
  %372 = bitcast float* %371 to <4 x float>*
  store <4 x float> %wide.load7, <4 x float>* %372, align 4, !tbaa !10
  %index.next = add i32 %index, 4
  %373 = icmp eq i32 %index.next, 96
  br i1 %373, label %.preheader.preheader, label %vector.body, !llvm.loop !40

.preheader.preheader:                             ; preds = %vector.body
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader
  %374 = load float* getelementptr inbounds ([100 x float]* @fps_last, i32 0, i32 97), align 4, !tbaa !10
  store float %374, float* getelementptr inbounds ([100 x float]* @fps_last, i32 0, i32 96), align 4, !tbaa !10
  %375 = load float* getelementptr inbounds ([100 x float]* @per_last, i32 0, i32 97), align 4, !tbaa !10
  store float %375, float* getelementptr inbounds ([100 x float]* @per_last, i32 0, i32 96), align 4, !tbaa !10
  %376 = load float* getelementptr inbounds ([100 x float]* @fps_last, i32 0, i32 98), align 4, !tbaa !10
  store float %376, float* getelementptr inbounds ([100 x float]* @fps_last, i32 0, i32 97), align 4, !tbaa !10
  %377 = load float* getelementptr inbounds ([100 x float]* @per_last, i32 0, i32 98), align 4, !tbaa !10
  store float %377, float* getelementptr inbounds ([100 x float]* @per_last, i32 0, i32 97), align 4, !tbaa !10
  %378 = load float* getelementptr inbounds ([100 x float]* @fps_last, i32 0, i32 99), align 4, !tbaa !10
  store float %378, float* getelementptr inbounds ([100 x float]* @fps_last, i32 0, i32 98), align 4, !tbaa !10
  %379 = load float* getelementptr inbounds ([100 x float]* @per_last, i32 0, i32 99), align 4, !tbaa !10
  store float %379, float* getelementptr inbounds ([100 x float]* @per_last, i32 0, i32 98), align 4, !tbaa !10
  %380 = load float* @fps_max, align 4, !tbaa !10
  %381 = load float* @fps_min, align 4, !tbaa !10
  %382 = fadd fast float %380, %381
  %383 = fmul fast float %382, 5.000000e-01
  store float %383, float* getelementptr inbounds ([100 x float]* @fps_last, i32 0, i32 99), align 4, !tbaa !10
  store float %per.1, float* getelementptr inbounds ([100 x float]* @per_last, i32 0, i32 99), align 4, !tbaa !10
  store float 0.000000e+00, float* @fps_max, align 4, !tbaa !10
  store float 1.000000e+06, float* @fps_min, align 4, !tbaa !10
  %384 = call i32 @clock() #4
  %385 = sdiv i32 %384, 1000
  store i32 %385, i32* @fps_last_update, align 4, !tbaa !1
  br label %386

; <label>:386                                     ; preds = %.preheader, %358
  %387 = load i8* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 0), align 4, !tbaa !37
  %388 = icmp eq i8 %387, 0
  br i1 %388, label %390, label %389

; <label>:389                                     ; preds = %386
  call void @glDisable(i32 2912) #4
  br label %393

; <label>:390                                     ; preds = %386
  %391 = load void (i32, i32)** @glUniform1i, align 4, !tbaa !5
  %392 = load i32* @uniform_draw_ui, align 4, !tbaa !1
  call void %391(i32 %392, i32 1) #4
  br label %393

; <label>:393                                     ; preds = %390, %389
  %394 = load i8* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 0), align 4, !tbaa !37
  %395 = icmp eq i8 %394, 0
  br i1 %395, label %397, label %396

; <label>:396                                     ; preds = %393
  call void @glEnable(i32 2912) #4
  br label %400

; <label>:397                                     ; preds = %393
  %398 = load void (i32, i32)** @glUniform1i, align 4, !tbaa !5
  %399 = load i32* @uniform_draw_ui, align 4, !tbaa !1
  call void %398(i32 %399, i32 0) #4
  br label %400

; <label>:400                                     ; preds = %397, %396
  call void @glClear(i32 1024) #4
  ret void
}

declare void @glClearColor(float, float, float, float) #3

declare void @glFogi(i32, i32) #3

declare void @glFogfv(i32, float*) #3

declare void @glFogf(i32, float) #3

declare void @glClear(i32) #3

declare void @glMatrixMode(i32) #3

declare void @glLoadIdentity() #3

declare void @gluPerspective(double, double, double, double) #3

declare void @gluLookAt(double, double, double, double, double, double, double, double, double) #3

; Function Attrs: nounwind readnone
declare double @sin(double) #2

; Function Attrs: nounwind readnone
declare double @cos(double) #2

; Function Attrs: nounwind
define float @drawScene(i8 zeroext %shadowed) #0 {
  %1 = load i8* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 3), align 1, !tbaa !14
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %4, label %3

; <label>:3                                       ; preds = %0
  tail call void @glShadeModel(i32 7425) #4
  br label %5

; <label>:4                                       ; preds = %0
  tail call void @glShadeModel(i32 7424) #4
  br label %5

; <label>:5                                       ; preds = %4, %3
  %6 = tail call float @chunk_draw_visible(i8 zeroext %shadowed)
  tail call void @glShadeModel(i32 7424) #4
  ret float %6
}

declare void @glDepthMask(i8 zeroext) #3

declare void @glColorMask(i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext) #3

declare void @glStencilFunc(i32, i32, i32) #3

declare void @glStencilOp(i32, i32, i32) #3

declare void @glPolygonOffset(float, float) #3

declare void @glColor4f(float, float, float, float) #3

declare void @glBlendFunc(i32, i32) #3

declare void @glTexCoord2f(float, float) #3

; Function Attrs: nounwind
define void @ogl_map_vxl_load(i8* nocapture readonly %data, i32 %x, i32 %y, i32 %z) #0 {
  %1 = load i32* @map_size_x, align 4, !tbaa !1
  %2 = load i32* @map_size_y, align 4, !tbaa !1
  %3 = mul nsw i32 %2, %1
  %4 = load i32* @map_size_z, align 4, !tbaa !1
  %5 = mul nsw i32 %3, %4
  %6 = mul nsw i32 %y, %x
  %7 = mul nsw i32 %6, %z
  %8 = icmp slt i32 %5, %7
  br i1 %8, label %9, label %15

; <label>:9                                       ; preds = %0
  %10 = load i64** @map_colors, align 4, !tbaa !5
  %11 = bitcast i64* %10 to i8*
  %12 = shl i32 %7, 3
  %13 = tail call i8* @realloc(i8* %11, i32 %12) #4
  %14 = bitcast i8* %13 to i64*
  store i64* %14, i64** @map_colors, align 4, !tbaa !5
  br label %15

; <label>:15                                      ; preds = %9, %0
  store i32 %x, i32* @map_size_x, align 4, !tbaa !1
  store i32 %y, i32* @map_size_y, align 4, !tbaa !1
  store i32 %z, i32* @map_size_z, align 4, !tbaa !1
  %16 = icmp sgt i32 %x, 0
  br i1 %16, label %.preheader4.lr.ph, label %._crit_edge12

._crit_edge12:                                    ; preds = %15
  %.pre = load i64** @map_colors, align 4, !tbaa !5
  br label %._crit_edge10

.preheader4.lr.ph:                                ; preds = %15
  %17 = icmp sgt i32 %z, 0
  %18 = icmp sgt i32 %y, 0
  %19 = load i64** @map_colors, align 4, !tbaa !5
  br label %.preheader4

.preheader4:                                      ; preds = %.preheader4.lr.ph, %._crit_edge7
  %x1.08 = phi i32 [ 0, %.preheader4.lr.ph ], [ %38, %._crit_edge7 ]
  br i1 %17, label %.preheader.preheader, label %._crit_edge7

.preheader.preheader:                             ; preds = %.preheader4
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %._crit_edge
  %z2.06 = phi i32 [ %37, %._crit_edge ], [ 0, %.preheader.preheader ]
  br i1 %18, label %.lr.ph.preheader, label %._crit_edge

.lr.ph.preheader:                                 ; preds = %.preheader
  %backedge.overflow = icmp eq i32 %y, 0
  br i1 %backedge.overflow, label %.lr.ph.preheader15, label %overflow.checked

overflow.checked:                                 ; preds = %.lr.ph.preheader
  %n.vec = and i32 %y, -2
  %cmp.zero = icmp eq i32 %n.vec, 0
  br i1 %cmp.zero, label %middle.block, label %vector.body.preheader

vector.body.preheader:                            ; preds = %overflow.checked
  br label %vector.body

vector.body:                                      ; preds = %vector.body.preheader, %vector.body
  %index = phi i32 [ %index.next, %vector.body ], [ 0, %vector.body.preheader ]
  %induction1314 = or i32 %index, 1
  %20 = mul nsw i32 %index, %z
  %21 = mul nsw i32 %induction1314, %z
  %22 = add nsw i32 %20, %z2.06
  %23 = add nsw i32 %21, %z2.06
  %24 = mul nsw i32 %22, %x
  %25 = mul nsw i32 %23, %x
  %26 = add nsw i32 %24, %x1.08
  %27 = add nsw i32 %25, %x1.08
  %28 = getelementptr inbounds i64* %19, i32 %26
  %29 = getelementptr inbounds i64* %19, i32 %27
  store i64 4294967295, i64* %28, align 4, !tbaa !7
  store i64 4294967295, i64* %29, align 4, !tbaa !7
  %index.next = add i32 %index, 2
  %30 = icmp eq i32 %index.next, %n.vec
  br i1 %30, label %middle.block.loopexit, label %vector.body, !llvm.loop !41

middle.block.loopexit:                            ; preds = %vector.body
  br label %middle.block

middle.block:                                     ; preds = %middle.block.loopexit, %overflow.checked
  %resume.val = phi i32 [ 0, %overflow.checked ], [ %n.vec, %middle.block.loopexit ]
  %cmp.n = icmp eq i32 %resume.val, %y
  br i1 %cmp.n, label %._crit_edge, label %.lr.ph.preheader15

.lr.ph.preheader15:                               ; preds = %middle.block, %.lr.ph.preheader
  %y3.05.ph = phi i32 [ 0, %.lr.ph.preheader ], [ %resume.val, %middle.block ]
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph.preheader15, %.lr.ph
  %y3.05 = phi i32 [ %36, %.lr.ph ], [ %y3.05.ph, %.lr.ph.preheader15 ]
  %31 = mul nsw i32 %y3.05, %z
  %32 = add nsw i32 %31, %z2.06
  %33 = mul nsw i32 %32, %x
  %34 = add nsw i32 %33, %x1.08
  %35 = getelementptr inbounds i64* %19, i32 %34
  store i64 4294967295, i64* %35, align 4, !tbaa !7
  %36 = add nsw i32 %y3.05, 1
  %exitcond = icmp eq i32 %36, %y
  br i1 %exitcond, label %._crit_edge.loopexit, label %.lr.ph, !llvm.loop !42

._crit_edge.loopexit:                             ; preds = %.lr.ph
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %middle.block, %.preheader
  %37 = add nsw i32 %z2.06, 1
  %exitcond11 = icmp eq i32 %37, %z
  br i1 %exitcond11, label %._crit_edge7.loopexit, label %.preheader

._crit_edge7.loopexit:                            ; preds = %._crit_edge
  br label %._crit_edge7

._crit_edge7:                                     ; preds = %._crit_edge7.loopexit, %.preheader4
  %38 = add nsw i32 %x1.08, 1
  %39 = icmp slt i32 %38, %x
  br i1 %39, label %.preheader4, label %._crit_edge10.loopexit

._crit_edge10.loopexit:                           ; preds = %._crit_edge7
  br label %._crit_edge10

._crit_edge10:                                    ; preds = %._crit_edge10.loopexit, %._crit_edge12
  %40 = phi i64* [ %.pre, %._crit_edge12 ], [ %19, %._crit_edge10.loopexit ]
  tail call void @map_vxl_load(i8* %data, i64* %40) #4
  ret void
}

; Function Attrs: nounwind
declare noalias i8* @realloc(i8* nocapture, i32) #0

; Function Attrs: nounwind
define void @ogl_chunk_rebuild_all() #0 {
  store i8 1, i8* @chunk_geometry_rebuild, align 1, !tbaa !9
  store i32 0, i32* @chunk_geometry_rebuild_state, align 4, !tbaa !1
  ret void
}

; Function Attrs: nounwind
define void @ogl_map_set(i32 %x, i32 %y, i32 %z, i64 %color) #0 {
  tail call void @map_set(i32 %x, i32 %y, i32 %z, i64 %color)
  ret void
}

; Function Attrs: nounwind readonly
define i64 @ogl_map_get(i32 %x, i32 %y, i32 %z) #1 {
  %1 = or i32 %y, %x
  %2 = or i32 %1, %z
  %3 = icmp slt i32 %2, 0
  br i1 %3, label %map_get.exit, label %4

; <label>:4                                       ; preds = %0
  %5 = load i32* @map_size_x, align 4, !tbaa !1
  %6 = icmp sgt i32 %5, %x
  %7 = load i32* @map_size_y, align 4
  %8 = icmp sgt i32 %7, %y
  %or.cond.i = and i1 %6, %8
  br i1 %or.cond.i, label %9, label %map_get.exit

; <label>:9                                       ; preds = %4
  %10 = load i32* @map_size_z, align 4, !tbaa !1
  %11 = icmp sgt i32 %10, %z
  br i1 %11, label %12, label %map_get.exit

; <label>:12                                      ; preds = %9
  %13 = mul nsw i32 %10, %y
  %14 = add nsw i32 %13, %z
  %15 = mul nsw i32 %14, %5
  %16 = add nsw i32 %15, %x
  %17 = load i64** @map_colors, align 4, !tbaa !5
  %18 = getelementptr inbounds i64* %17, i32 %16
  %19 = load i64* %18, align 4, !tbaa !7
  br label %map_get.exit

map_get.exit:                                     ; preds = %0, %4, %9, %12
  %.0.i = phi i64 [ %19, %12 ], [ 4294967295, %9 ], [ 4294967295, %4 ], [ 4294967295, %0 ]
  ret i64 %.0.i
}

; Function Attrs: nounwind readnone
define void @ogl_particle_create(i32 %color, float %x, float %y, float %z, float %velocity, float %velocity_y, i32 %amount, float %min_size, float %max_size) #2 {
  ret void
}

; Function Attrs: nounwind
define void @ogl_display_min() #0 {
  tail call void @glClear(i32 16384) #4
  ret void
}

; Function Attrs: nounwind
define i32 @ogl_deprecation_state() #0 {
  %1 = load i8* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 0), align 4, !tbaa !37
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %7, label %3

; <label>:3                                       ; preds = %0
  %4 = tail call i8* @glGetString(i32 7939) #4
  %5 = tail call i8* @strstr(i8* %4, i8* getelementptr inbounds ([32 x i8]* @.str25, i32 0, i32 0)) #6
  %6 = icmp eq i8* %5, null
  %. = zext i1 %6 to i32
  %.pre = load i8* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 0), align 4, !tbaa !37
  %phitmp = icmp eq i8 %.pre, 0
  br label %7

; <label>:7                                       ; preds = %3, %0
  %8 = phi i1 [ true, %0 ], [ %phitmp, %3 ]
  %r.0 = phi i32 [ 0, %0 ], [ %., %3 ]
  %9 = or i32 %r.0, 2
  %r.0. = select i1 %8, i32 %r.0, i32 %9
  ret i32 %r.0.
}

; Function Attrs: nounwind readonly
declare i8* @strstr(i8*, i8* nocapture) #1

declare i8* @glGetString(i32) #3

; Function Attrs: nounwind
define void @ogl_set_wireframe(float %x, float %y, float %z) #0 {
  store float %x, float* @wireframe_x, align 4, !tbaa !10
  store float %y, float* @wireframe_y, align 4, !tbaa !10
  store float %z, float* @wireframe_z, align 4, !tbaa !10
  ret void
}

; Function Attrs: nounwind
define void @ogl_render_sprite(i8* %filename, float %x, float %y, float %z, i32 %xsiz, i32 %ysiz, i32 %zsiz, float %dx, float %dy, float %dz, float %rx, float %ry, float %rz) #0 {
  %distance_attenuation.i = alloca [3 x float], align 4
  %1 = ptrtoint i8* %filename to i32
  br label %4

; <label>:2                                       ; preds = %._crit_edge
  %3 = icmp slt i32 %11, 128
  br i1 %3, label %4, label %.thread.loopexit

; <label>:4                                       ; preds = %0, %2
  %free_slot.05 = phi i32 [ -1, %0 ], [ %free_slot.1, %2 ]
  %k.04 = phi i32 [ 0, %0 ], [ %11, %2 ]
  %5 = icmp eq i32 %free_slot.05, -1
  %6 = getelementptr inbounds [128 x i32]* @kv6_name, i32 0, i32 %k.04
  %7 = load i32* %6, align 4, !tbaa !1
  br i1 %5, label %8, label %._crit_edge

; <label>:8                                       ; preds = %4
  %9 = icmp eq i32 %7, 0
  %k.0.free_slot.0 = select i1 %9, i32 %k.04, i32 -1
  br label %._crit_edge

._crit_edge:                                      ; preds = %4, %8
  %free_slot.1 = phi i32 [ %k.0.free_slot.0, %8 ], [ %free_slot.05, %4 ]
  %10 = icmp eq i32 %7, %1
  %11 = add nsw i32 %k.04, 1
  br i1 %10, label %12, label %2

; <label>:12                                      ; preds = %._crit_edge
  %free_slot.1.lcssa = phi i32 [ %free_slot.1, %._crit_edge ]
  %k.04.lcssa = phi i32 [ %k.04, %._crit_edge ]
  %13 = getelementptr inbounds [128 x %struct.kv6_t*]* @kv6_model, i32 0, i32 %k.04.lcssa
  %14 = load %struct.kv6_t** %13, align 4, !tbaa !5
  %15 = icmp eq %struct.kv6_t* %14, null
  br i1 %15, label %.thread, label %29

.thread.loopexit:                                 ; preds = %2
  %free_slot.1.lcssa16 = phi i32 [ %free_slot.1, %2 ]
  br label %.thread

.thread:                                          ; preds = %.thread.loopexit, %12
  %free_slot.117 = phi i32 [ %free_slot.1.lcssa16, %.thread.loopexit ], [ %free_slot.1.lcssa, %12 ]
  %16 = icmp slt i32 %free_slot.117, 0
  br i1 %16, label %56, label %17

; <label>:17                                      ; preds = %.thread
  %18 = getelementptr inbounds [128 x i32]* @kv6_name, i32 0, i32 %free_slot.117
  store i32 %1, i32* %18, align 4, !tbaa !1
  %19 = tail call %struct._IO_FILE* @fopen(i8* %filename, i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0)) #4
  %20 = tail call i32 @fseek(%struct._IO_FILE* %19, i32 0, i32 2) #4
  %21 = tail call i32 @ftell(%struct._IO_FILE* %19) #4
  %22 = tail call noalias i8* @malloc(i32 %21) #4
  %23 = tail call i32 @fseek(%struct._IO_FILE* %19, i32 0, i32 0) #4
  %24 = tail call i32 @fread(i8* %22, i32 %21, i32 1, %struct._IO_FILE* %19) #4
  %25 = tail call i32 @fclose(%struct._IO_FILE* %19) #4
  %26 = tail call %struct.kv6_t* @kv6_load(i8* %22)
  %27 = getelementptr inbounds [128 x %struct.kv6_t*]* @kv6_model, i32 0, i32 %free_slot.117
  store %struct.kv6_t* %26, %struct.kv6_t** %27, align 4, !tbaa !5
  tail call void @free(i8* %22) #4
  %28 = load %struct.kv6_t** %27, align 4, !tbaa !5
  br label %29

; <label>:29                                      ; preds = %17, %12
  %model.1 = phi %struct.kv6_t* [ %28, %17 ], [ %14, %12 ]
  tail call void @glDisable(i32 32925) #4
  tail call void @glColor4f(float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00) #4
  tail call void @glPushMatrix() #4
  tail call void @glTranslatef(float %x, float %y, float %z) #4
  tail call void @glRotatef(float %ry, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00) #4
  tail call void @glRotatef(float %rx, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00) #4
  %30 = fadd fast float %dx, %dy
  %31 = fadd fast float %30, %dz
  %32 = fmul fast float %31, 0x3FD5555560000000
  %33 = bitcast [3 x float]* %distance_attenuation.i to i8*
  call void @llvm.lifetime.start(i64 12, i8* %33)
  %34 = load i32* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 6), align 4, !tbaa !36
  %35 = sitofp i32 %34 to float
  %36 = fpext float %35 to double
  %37 = load float* @camera_fov, align 4, !tbaa !10
  %38 = fmul fast float %37, 0x3F81DF4660000000
  %39 = fpext float %38 to double
  %40 = tail call double @tan(double %39) #5
  %41 = fmul fast double %40, 2.000000e+00
  %42 = fdiv fast double %36, %41
  %43 = fptrunc double %42 to float
  %44 = load i8* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 0), align 4, !tbaa !37
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %50, label %46

; <label>:46                                      ; preds = %29
  %47 = fmul fast float %31, %43
  tail call void @glPointSize(float %47) #4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %33, i8* bitcast ([3 x float]* @update_point_size.distance_attenuation to i8*), i32 12, i32 4, i1 false) #4
  %48 = load void (i32, float*)** @glPointParameterfv, align 4, !tbaa !5
  %49 = getelementptr inbounds [3 x float]* %distance_attenuation.i, i32 0, i32 0
  call void %48(i32 33065, float* %49) #4
  br label %update_point_size.exit

; <label>:50                                      ; preds = %29
  %51 = load void (i32, float)** @glUniform1f, align 4, !tbaa !5
  %52 = load i32* @uniform_point_size, align 4, !tbaa !1
  tail call void %51(i32 %52, float %32) #4
  %53 = load void (i32, float)** @glUniform1f, align 4, !tbaa !5
  %54 = load i32* @uniform_near_plane_height, align 4, !tbaa !1
  tail call void %53(i32 %54, float %43) #4
  br label %update_point_size.exit

update_point_size.exit:                           ; preds = %46, %50
  call void @llvm.lifetime.end(i64 12, i8* %33)
  call void @glScalef(float %32, float %32, float %32) #4
  %55 = sitofp i32 %zsiz to float
  call void @glTranslatef(float 0.000000e+00, float 0.000000e+00, float %55) #4
  call void @kv6_render(%struct.kv6_t* %model.1, i8 zeroext 0, i8 zeroext -1, i8 zeroext 0)
  call void @glPopMatrix() #4
  call void @glEnable(i32 32925) #4
  br label %56

; <label>:56                                      ; preds = %.thread, %update_point_size.exit
  ret void
}

declare void @glRotatef(float, float, float, float) #3

; Function Attrs: nounwind
define void @update_point_size(float %scale) #0 {
  %distance_attenuation = alloca [3 x float], align 4
  %1 = load i32* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 6), align 4, !tbaa !36
  %2 = sitofp i32 %1 to float
  %3 = fpext float %2 to double
  %4 = load float* @camera_fov, align 4, !tbaa !10
  %5 = fmul fast float %4, 0x3F81DF4660000000
  %6 = fpext float %5 to double
  %7 = tail call double @tan(double %6) #5
  %8 = fmul fast double %7, 2.000000e+00
  %9 = fdiv fast double %3, %8
  %10 = fptrunc double %9 to float
  %11 = load i8* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 0), align 4, !tbaa !37
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %19, label %13

; <label>:13                                      ; preds = %0
  %14 = fmul fast float %scale, 3.000000e+00
  %15 = fmul fast float %14, %10
  tail call void @glPointSize(float %15) #4
  %16 = bitcast [3 x float]* %distance_attenuation to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %16, i8* bitcast ([3 x float]* @update_point_size.distance_attenuation to i8*), i32 12, i32 4, i1 false)
  %17 = load void (i32, float*)** @glPointParameterfv, align 4, !tbaa !5
  %18 = getelementptr inbounds [3 x float]* %distance_attenuation, i32 0, i32 0
  call void %17(i32 33065, float* %18) #4
  br label %24

; <label>:19                                      ; preds = %0
  %20 = load void (i32, float)** @glUniform1f, align 4, !tbaa !5
  %21 = load i32* @uniform_point_size, align 4, !tbaa !1
  tail call void %20(i32 %21, float %scale) #4
  %22 = load void (i32, float)** @glUniform1f, align 4, !tbaa !5
  %23 = load i32* @uniform_near_plane_height, align 4, !tbaa !1
  tail call void %22(i32 %23, float %10) #4
  br label %24

; <label>:24                                      ; preds = %19, %13
  ret void
}

declare void @glScalef(float, float, float) #3

; Function Attrs: nounwind
define void @ogl_overlay_setup() #0 {
  tail call void @glMatrixMode(i32 5889) #4
  tail call void @glLoadIdentity() #4
  %1 = load i32* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 5), align 4, !tbaa !35
  %2 = sitofp i32 %1 to double
  %3 = load i32* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 6), align 4, !tbaa !36
  %4 = sitofp i32 %3 to double
  tail call void @gluOrtho2D(double 0.000000e+00, double %2, double 0.000000e+00, double %4) #4
  tail call void @glMatrixMode(i32 5888) #4
  tail call void @glLoadIdentity() #4
  tail call void @glDisable(i32 2929) #4
  tail call void @glDisable(i32 2884) #4
  tail call void @glEnable(i32 3042) #4
  tail call void @glBlendFunc(i32 770, i32 771) #4
  tail call void @glEnable(i32 3553) #4
  ret void
}

declare void @gluOrtho2D(double, double, double, double) #3

; Function Attrs: nounwind
define void @ogl_render_3d_box(float %x, float %y, float %z, float %size, i32 %color) #0 {
  %distance_attenuation.i = alloca [3 x float], align 4
  %1 = lshr i32 %color, 16
  %2 = and i32 %1, 255
  %3 = uitofp i32 %2 to float
  %4 = fmul fast float %3, 0x3F70101020000000
  %5 = lshr i32 %color, 8
  %6 = and i32 %5, 255
  %7 = uitofp i32 %6 to float
  %8 = fmul fast float %7, 0x3F70101020000000
  %9 = and i32 %color, 255
  %10 = uitofp i32 %9 to float
  %11 = fmul fast float %10, 0x3F70101020000000
  tail call void @glColor3f(float %4, float %8, float %11) #4
  tail call void @glDisable(i32 32925) #4
  %12 = bitcast [3 x float]* %distance_attenuation.i to i8*
  call void @llvm.lifetime.start(i64 12, i8* %12)
  %13 = load i32* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 6), align 4, !tbaa !36
  %14 = sitofp i32 %13 to float
  %15 = fpext float %14 to double
  %16 = load float* @camera_fov, align 4, !tbaa !10
  %17 = fmul fast float %16, 0x3F81DF4660000000
  %18 = fpext float %17 to double
  %19 = tail call double @tan(double %18) #5
  %20 = fmul fast double %19, 2.000000e+00
  %21 = fdiv fast double %15, %20
  %22 = fptrunc double %21 to float
  %23 = load i8* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 0), align 4, !tbaa !37
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %30, label %25

; <label>:25                                      ; preds = %0
  %26 = fmul fast float %size, 3.000000e+00
  %27 = fmul fast float %26, %22
  tail call void @glPointSize(float %27) #4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %12, i8* bitcast ([3 x float]* @update_point_size.distance_attenuation to i8*), i32 12, i32 4, i1 false) #4
  %28 = load void (i32, float*)** @glPointParameterfv, align 4, !tbaa !5
  %29 = getelementptr inbounds [3 x float]* %distance_attenuation.i, i32 0, i32 0
  call void %28(i32 33065, float* %29) #4
  br label %update_point_size.exit

; <label>:30                                      ; preds = %0
  %31 = load void (i32, float)** @glUniform1f, align 4, !tbaa !5
  %32 = load i32* @uniform_point_size, align 4, !tbaa !1
  tail call void %31(i32 %32, float %size) #4
  %33 = load void (i32, float)** @glUniform1f, align 4, !tbaa !5
  %34 = load i32* @uniform_near_plane_height, align 4, !tbaa !1
  tail call void %33(i32 %34, float %22) #4
  br label %update_point_size.exit

update_point_size.exit:                           ; preds = %25, %30
  call void @llvm.lifetime.end(i64 12, i8* %12)
  call void @glBegin(i32 0) #4
  call void @glVertex3f(float %x, float %y, float %z) #4
  call void @glEnd() #4
  call void @glEnable(i32 32925) #4
  ret void
}

; Function Attrs: nounwind
define void @ogl_render_hole(float %x, float %y, float %z, float %size, i32 %color, i8 zeroext %side) #0 {
  %1 = icmp eq i8 %side, 4
  br i1 %1, label %2, label %21

; <label>:2                                       ; preds = %0
  %3 = and i32 %color, 255
  %4 = uitofp i32 %3 to float
  %5 = lshr i32 %color, 8
  %6 = and i32 %5, 255
  %7 = uitofp i32 %6 to float
  %8 = lshr i32 %color, 16
  %9 = and i32 %8, 255
  %10 = uitofp i32 %9 to float
  tail call void @glEnable(i32 2960) #4
  tail call void @glStencilFunc(i32 519, i32 1, i32 0) #4
  tail call void @glStencilOp(i32 7680, i32 7680, i32 7681) #4
  tail call void @glColorMask(i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0) #4
  tail call void @glDepthMask(i8 zeroext 0) #4
  tail call void @glEnable(i32 32823) #4
  tail call void @glPolygonOffset(float 0.000000e+00, float -5.000000e+02) #4
  tail call void @glDisable(i32 2884) #4
  tail call void @glPushMatrix() #4
  tail call void @glTranslatef(float %x, float %y, float %z) #4
  tail call void @glBegin(i32 7) #4
  tail call void @glVertex3f(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00) #4
  tail call void @glVertex3f(float 0.000000e+00, float 2.500000e-01, float 0.000000e+00) #4
  tail call void @glVertex3f(float 2.500000e-01, float 2.500000e-01, float 0.000000e+00) #4
  tail call void @glVertex3f(float 2.500000e-01, float 0.000000e+00, float 0.000000e+00) #4
  tail call void @glEnd() #4
  tail call void @glEnable(i32 2884) #4
  tail call void @glPopMatrix() #4
  tail call void @glPolygonOffset(float 0.000000e+00, float 0.000000e+00) #4
  tail call void @glDisable(i32 32823) #4
  tail call void @glColorMask(i8 zeroext 1, i8 zeroext 1, i8 zeroext 1, i8 zeroext 1) #4
  tail call void @glDepthMask(i8 zeroext 1) #4
  tail call void @glDisable(i32 2929) #4
  tail call void @glStencilFunc(i32 514, i32 1, i32 255) #4
  tail call void @glStencilOp(i32 7680, i32 7680, i32 7680) #4
  tail call void @glDisable(i32 2884) #4
  tail call void @glPushMatrix() #4
  %11 = fadd fast float %z, 0xBFA99999A0000000
  tail call void @glTranslatef(float %x, float %y, float %11) #4
  tail call void @glBegin(i32 7) #4
  %12 = fmul fast float %10, 0x3F57215F00000000
  %13 = fmul fast float %7, 0x3F57215F00000000
  %14 = fmul fast float %4, 0x3F57215F00000000
  tail call void @glColor3f(float %12, float %13, float %14) #4
  tail call void @glVertex3f(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00) #4
  tail call void @glVertex3f(float 0.000000e+00, float 2.500000e-01, float 0.000000e+00) #4
  tail call void @glVertex3f(float 2.500000e-01, float 2.500000e-01, float 0.000000e+00) #4
  tail call void @glVertex3f(float 2.500000e-01, float 0.000000e+00, float 0.000000e+00) #4
  %15 = fmul fast float %10, 0x3F5AFC4400000000
  %16 = fmul fast float %7, 0x3F5AFC4400000000
  %17 = fmul fast float %4, 0x3F5AFC4400000000
  tail call void @glColor3f(float %15, float %16, float %17) #4
  tail call void @glVertex3f(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00) #4
  tail call void @glVertex3f(float 0.000000e+00, float 0.000000e+00, float 0x3FA99999A0000000) #4
  tail call void @glVertex3f(float 2.500000e-01, float 0.000000e+00, float 0x3FA99999A0000000) #4
  tail call void @glVertex3f(float 2.500000e-01, float 0.000000e+00, float 0.000000e+00) #4
  tail call void @glColor3f(float %15, float %16, float %17) #4
  tail call void @glVertex3f(float 0.000000e+00, float 2.500000e-01, float 0.000000e+00) #4
  tail call void @glVertex3f(float 0.000000e+00, float 2.500000e-01, float 0x3FA99999A0000000) #4
  tail call void @glVertex3f(float 2.500000e-01, float 2.500000e-01, float 0x3FA99999A0000000) #4
  tail call void @glVertex3f(float 2.500000e-01, float 2.500000e-01, float 0.000000e+00) #4
  %18 = fmul fast float %10, 0x3F5ED72940000000
  %19 = fmul fast float %7, 0x3F5ED72940000000
  %20 = fmul fast float %4, 0x3F5ED72940000000
  tail call void @glColor3f(float %18, float %19, float %20) #4
  tail call void @glVertex3f(float 2.500000e-01, float 0.000000e+00, float 0.000000e+00) #4
  tail call void @glVertex3f(float 2.500000e-01, float 0.000000e+00, float 0x3FA99999A0000000) #4
  tail call void @glVertex3f(float 2.500000e-01, float 2.500000e-01, float 0x3FA99999A0000000) #4
  tail call void @glVertex3f(float 2.500000e-01, float 2.500000e-01, float 0.000000e+00) #4
  tail call void @glColor3f(float %18, float %19, float %20) #4
  tail call void @glVertex3f(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00) #4
  tail call void @glVertex3f(float 0.000000e+00, float 0.000000e+00, float 0x3FA99999A0000000) #4
  tail call void @glVertex3f(float 0.000000e+00, float 2.500000e-01, float 0x3FA99999A0000000) #4
  tail call void @glVertex3f(float 0.000000e+00, float 2.500000e-01, float 0.000000e+00) #4
  tail call void @glEnd() #4
  tail call void @glEnable(i32 2884) #4
  tail call void @glPopMatrix() #4
  tail call void @glStencilFunc(i32 519, i32 0, i32 0) #4
  tail call void @glStencilOp(i32 7680, i32 7680, i32 7681) #4
  tail call void @glColorMask(i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0) #4
  tail call void @glDepthMask(i8 zeroext 0) #4
  tail call void @glEnable(i32 32823) #4
  tail call void @glPolygonOffset(float 0.000000e+00, float -5.000000e+02) #4
  tail call void @glDisable(i32 2884) #4
  tail call void @glPushMatrix() #4
  tail call void @glTranslatef(float %x, float %y, float %z) #4
  tail call void @glBegin(i32 7) #4
  tail call void @glVertex3f(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00) #4
  tail call void @glVertex3f(float 0.000000e+00, float 2.500000e-01, float 0.000000e+00) #4
  tail call void @glVertex3f(float 2.500000e-01, float 2.500000e-01, float 0.000000e+00) #4
  tail call void @glVertex3f(float 2.500000e-01, float 0.000000e+00, float 0.000000e+00) #4
  tail call void @glEnd() #4
  tail call void @glEnable(i32 2884) #4
  tail call void @glPopMatrix() #4
  tail call void @glPolygonOffset(float 0.000000e+00, float 0.000000e+00) #4
  tail call void @glDisable(i32 32823) #4
  tail call void @glColorMask(i8 zeroext 1, i8 zeroext 1, i8 zeroext 1, i8 zeroext 1) #4
  tail call void @glDepthMask(i8 zeroext 1) #4
  tail call void @glEnable(i32 2929) #4
  tail call void @glDisable(i32 2960) #4
  br label %21

; <label>:21                                      ; preds = %2, %0
  ret void
}

; Function Attrs: nounwind readonly
define i32 @ogl_overlay_bind_fullness() #1 {
overflow.checked:
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %overflow.checked
  %index = phi i32 [ 0, %overflow.checked ], [ %index.next, %vector.body ]
  %vec.phi = phi <4 x i32> [ zeroinitializer, %overflow.checked ], [ %8, %vector.body ]
  %vec.phi4 = phi <4 x i32> [ zeroinitializer, %overflow.checked ], [ %9, %vector.body ]
  %0 = getelementptr inbounds [128 x i32]* @overlay_textures_data, i32 0, i32 %index
  %1 = bitcast i32* %0 to <4 x i32>*
  %wide.load = load <4 x i32>* %1, align 4, !tbaa !1
  %.sum10 = or i32 %index, 4
  %2 = getelementptr [128 x i32]* @overlay_textures_data, i32 0, i32 %.sum10
  %3 = bitcast i32* %2 to <4 x i32>*
  %wide.load5 = load <4 x i32>* %3, align 4, !tbaa !1
  %4 = icmp ne <4 x i32> %wide.load, zeroinitializer
  %5 = icmp ne <4 x i32> %wide.load5, zeroinitializer
  %6 = zext <4 x i1> %4 to <4 x i32>
  %7 = zext <4 x i1> %5 to <4 x i32>
  %8 = add nsw <4 x i32> %6, %vec.phi
  %9 = add nsw <4 x i32> %7, %vec.phi4
  %index.next = add i32 %index, 8
  %10 = icmp eq i32 %index.next, 128
  br i1 %10, label %middle.block, label %vector.body, !llvm.loop !43

middle.block:                                     ; preds = %vector.body
  %.lcssa11 = phi <4 x i32> [ %9, %vector.body ]
  %.lcssa = phi <4 x i32> [ %8, %vector.body ]
  %bin.rdx = add <4 x i32> %.lcssa11, %.lcssa
  %rdx.shuf = shufflevector <4 x i32> %bin.rdx, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx7 = add <4 x i32> %bin.rdx, %rdx.shuf
  %rdx.shuf8 = shufflevector <4 x i32> %bin.rdx7, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx9 = add <4 x i32> %bin.rdx7, %rdx.shuf8
  %11 = extractelement <4 x i32> %bin.rdx9, i32 0
  ret i32 %11
}

; Function Attrs: nounwind readonly
define i32 @ogl_kv6_bind_fullness() #1 {
overflow.checked:
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %overflow.checked
  %index = phi i32 [ 0, %overflow.checked ], [ %index.next, %vector.body ]
  %vec.phi = phi <4 x i32> [ zeroinitializer, %overflow.checked ], [ %8, %vector.body ]
  %vec.phi4 = phi <4 x i32> [ zeroinitializer, %overflow.checked ], [ %9, %vector.body ]
  %0 = getelementptr inbounds [128 x i32]* @kv6_name, i32 0, i32 %index
  %1 = bitcast i32* %0 to <4 x i32>*
  %wide.load = load <4 x i32>* %1, align 4, !tbaa !1
  %.sum10 = or i32 %index, 4
  %2 = getelementptr [128 x i32]* @kv6_name, i32 0, i32 %.sum10
  %3 = bitcast i32* %2 to <4 x i32>*
  %wide.load5 = load <4 x i32>* %3, align 4, !tbaa !1
  %4 = icmp ne <4 x i32> %wide.load, zeroinitializer
  %5 = icmp ne <4 x i32> %wide.load5, zeroinitializer
  %6 = zext <4 x i1> %4 to <4 x i32>
  %7 = zext <4 x i1> %5 to <4 x i32>
  %8 = add nsw <4 x i32> %6, %vec.phi
  %9 = add nsw <4 x i32> %7, %vec.phi4
  %index.next = add i32 %index, 8
  %10 = icmp eq i32 %index.next, 128
  br i1 %10, label %middle.block, label %vector.body, !llvm.loop !44

middle.block:                                     ; preds = %vector.body
  %.lcssa11 = phi <4 x i32> [ %9, %vector.body ]
  %.lcssa = phi <4 x i32> [ %8, %vector.body ]
  %bin.rdx = add <4 x i32> %.lcssa11, %.lcssa
  %rdx.shuf = shufflevector <4 x i32> %bin.rdx, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx7 = add <4 x i32> %bin.rdx, %rdx.shuf
  %rdx.shuf8 = shufflevector <4 x i32> %bin.rdx7, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx9 = add <4 x i32> %bin.rdx7, %rdx.shuf8
  %11 = extractelement <4 x i32> %bin.rdx9, i32 0
  ret i32 %11
}

; Function Attrs: nounwind
define void @overlay_bind_texture(i8* %texture, i32 %w, i32 %h) #0 {
  %tex = alloca i32, align 4
  %1 = ptrtoint i8* %texture to i32
  br label %4

; <label>:2                                       ; preds = %._crit_edge20
  %3 = icmp slt i32 %11, 128
  br i1 %3, label %4, label %.thread.loopexit

; <label>:4                                       ; preds = %0, %2
  %free_slot.014 = phi i32 [ -1, %0 ], [ %free_slot.1, %2 ]
  %k.013 = phi i32 [ 0, %0 ], [ %11, %2 ]
  %5 = icmp eq i32 %free_slot.014, -1
  %6 = getelementptr inbounds [128 x i32]* @overlay_textures_data, i32 0, i32 %k.013
  %7 = load i32* %6, align 4, !tbaa !1
  br i1 %5, label %8, label %._crit_edge20

; <label>:8                                       ; preds = %4
  %9 = icmp eq i32 %7, 0
  %k.0.free_slot.0 = select i1 %9, i32 %k.013, i32 -1
  br label %._crit_edge20

._crit_edge20:                                    ; preds = %4, %8
  %free_slot.1 = phi i32 [ %k.0.free_slot.0, %8 ], [ %free_slot.014, %4 ]
  %10 = icmp eq i32 %7, %1
  %11 = add nsw i32 %k.013, 1
  br i1 %10, label %12, label %2

; <label>:12                                      ; preds = %._crit_edge20
  %free_slot.1.lcssa = phi i32 [ %free_slot.1, %._crit_edge20 ]
  %k.013.lcssa = phi i32 [ %k.013, %._crit_edge20 ]
  %13 = getelementptr inbounds [128 x i32]* @overlay_textures_id, i32 0, i32 %k.013.lcssa
  %14 = load i32* %13, align 4, !tbaa !1
  %15 = icmp eq i32 %14, -1
  br i1 %15, label %.thread, label %73

.thread.loopexit:                                 ; preds = %2
  %free_slot.1.lcssa28 = phi i32 [ %free_slot.1, %2 ]
  br label %.thread

.thread:                                          ; preds = %.thread.loopexit, %12
  %free_slot.129 = phi i32 [ %free_slot.1.lcssa28, %.thread.loopexit ], [ %free_slot.1.lcssa, %12 ]
  %16 = icmp eq i32 %free_slot.129, -1
  br i1 %16, label %74, label %17

; <label>:17                                      ; preds = %.thread
  call void @glGenTextures(i32 1, i32* %tex) #4
  %18 = load i32* %tex, align 4, !tbaa !1
  call void @glBindTexture(i32 3553, i32 %18) #4
  %19 = load i8* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 0), align 4, !tbaa !37
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %44, label %21

; <label>:21                                      ; preds = %17
  %22 = call i8* @glGetString(i32 7939) #4
  %23 = call i8* @strstr(i8* %22, i8* getelementptr inbounds ([32 x i8]* @.str25, i32 0, i32 0)) #6
  %24 = icmp eq i8* %23, null
  br i1 %24, label %.preheader3, label %44

.preheader3:                                      ; preds = %21
  %25 = icmp slt i32 %w, 2
  %w2.0.l.0.1 = select i1 %25, i32 1, i32 2
  %26 = icmp slt i32 %h, 2
  %h2.1.1 = select i1 %26, i32 1, i32 2
  %27 = icmp slt i32 %w, 4
  %w2.0.l.0.2 = select i1 %27, i32 %w2.0.l.0.1, i32 4
  %28 = icmp slt i32 %h, 4
  %h2.1.2 = select i1 %28, i32 %h2.1.1, i32 4
  %29 = icmp slt i32 %w, 8
  %w2.0.l.0.3 = select i1 %29, i32 %w2.0.l.0.2, i32 8
  %30 = icmp slt i32 %h, 8
  %h2.1.3 = select i1 %30, i32 %h2.1.2, i32 8
  %31 = icmp slt i32 %w, 16
  %w2.0.l.0.4 = select i1 %31, i32 %w2.0.l.0.3, i32 16
  %32 = icmp slt i32 %h, 16
  %h2.1.4 = select i1 %32, i32 %h2.1.3, i32 16
  %33 = icmp slt i32 %w, 32
  %w2.0.l.0.5 = select i1 %33, i32 %w2.0.l.0.4, i32 32
  %34 = icmp slt i32 %h, 32
  %h2.1.5 = select i1 %34, i32 %h2.1.4, i32 32
  %35 = icmp slt i32 %w, 64
  %w2.0.l.0.6 = select i1 %35, i32 %w2.0.l.0.5, i32 64
  %36 = icmp slt i32 %h, 64
  %h2.1.6 = select i1 %36, i32 %h2.1.5, i32 64
  %37 = icmp slt i32 %w, 128
  %w2.0.l.0.7 = select i1 %37, i32 %w2.0.l.0.6, i32 128
  %38 = icmp slt i32 %h, 128
  %h2.1.7 = select i1 %38, i32 %h2.1.6, i32 128
  %39 = icmp slt i32 %w, 0
  %40 = icmp slt i32 %h, 0
  %w2.0.l.0.9 = select i1 %39, i32 %w2.0.l.0.7, i32 0
  %h2.1.9 = select i1 %40, i32 %h2.1.7, i32 0
  %41 = shl i32 %w2.0.l.0.9, 2
  %42 = mul i32 %41, %h2.1.9
  %43 = call noalias i8* @malloc(i32 %42) #4
  br i1 %40, label %.preheader.lr.ph, label %._crit_edge8

; <label>:44                                      ; preds = %21, %17
  call void @glTexImage2D(i32 3553, i32 0, i32 6408, i32 %w, i32 %h, i32 0, i32 32993, i32 5121, i8* %texture) #4
  br label %69

.preheader.lr.ph:                                 ; preds = %.preheader3
  %45 = sitofp i32 %w2.0.l.0.9 to float
  %46 = sitofp i32 %w to float
  %47 = sitofp i32 %h2.1.9 to float
  %48 = sitofp i32 %h to float
  br label %.preheader

.preheader:                                       ; preds = %._crit_edge, %.preheader.lr.ph
  %y.07 = phi i32 [ 0, %.preheader.lr.ph ], [ %68, %._crit_edge ]
  br i1 %39, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.preheader
  %49 = sitofp i32 %y.07 to float
  %50 = fdiv fast float %49, %47
  %51 = fmul fast float %48, %50
  %52 = mul nsw i32 %y.07, %w2.0.l.0.9
  br label %53

; <label>:53                                      ; preds = %53, %.lr.ph
  %x.06 = phi i32 [ 0, %.lr.ph ], [ %67, %53 ]
  %54 = sitofp i32 %x.06 to float
  %55 = fdiv fast float %54, %45
  %56 = fadd fast float %55, %51
  %57 = fmul fast float %46, %56
  %58 = fptosi float %57 to i32
  %59 = shl nsw i32 %58, 2
  %60 = getelementptr inbounds i8* %texture, i32 %59
  %61 = add nsw i32 %x.06, %52
  %62 = shl nsw i32 %61, 2
  %63 = getelementptr inbounds i8* %43, i32 %62
  %64 = bitcast i8* %60 to <4 x i8>*
  %65 = load <4 x i8>* %64, align 1, !tbaa !9
  %66 = bitcast i8* %63 to <4 x i8>*
  store <4 x i8> %65, <4 x i8>* %66, align 1, !tbaa !9
  %67 = add nsw i32 %x.06, 1
  %exitcond = icmp eq i32 %67, %w2.0.l.0.9
  br i1 %exitcond, label %._crit_edge.loopexit, label %53

._crit_edge.loopexit:                             ; preds = %53
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %.preheader
  %68 = add nsw i32 %y.07, 1
  %exitcond18 = icmp eq i32 %68, %h2.1.9
  br i1 %exitcond18, label %._crit_edge8.loopexit, label %.preheader

._crit_edge8.loopexit:                            ; preds = %._crit_edge
  br label %._crit_edge8

._crit_edge8:                                     ; preds = %._crit_edge8.loopexit, %.preheader3
  call void @glTexImage2D(i32 3553, i32 0, i32 6408, i32 %w2.0.l.0.9, i32 %h2.1.9, i32 0, i32 32993, i32 5121, i8* %43) #4
  call void @free(i8* %43) #4
  br label %69

; <label>:69                                      ; preds = %._crit_edge8, %44
  call void @glTexParameteri(i32 3553, i32 10240, i32 9728) #4
  call void @glTexParameteri(i32 3553, i32 10241, i32 9728) #4
  %70 = load i32* %tex, align 4, !tbaa !1
  %71 = getelementptr inbounds [128 x i32]* @overlay_textures_id, i32 0, i32 %free_slot.129
  store i32 %70, i32* %71, align 4, !tbaa !1
  %72 = getelementptr inbounds [128 x i32]* @overlay_textures_data, i32 0, i32 %free_slot.129
  store i32 %1, i32* %72, align 4, !tbaa !1
  br label %74

; <label>:73                                      ; preds = %12
  tail call void @glBindTexture(i32 3553, i32 %14) #4
  br label %74

; <label>:74                                      ; preds = %.thread, %69, %73
  ret void
}

; Function Attrs: nounwind
define void @ogl_overlay_rect(i8* %texture, i32 %texture_width, i32 %texture_height, i8 zeroext %red, i8 zeroext %green, i8 zeroext %blue, i8 zeroext %alpha, i32 %x, i32 %y, i32 %w, i32 %h) #0 {
  %1 = icmp eq i8* %texture, null
  br i1 %1, label %2, label %3

; <label>:2                                       ; preds = %0
  tail call void @glDisable(i32 3553) #4
  br label %4

; <label>:3                                       ; preds = %0
  tail call void @overlay_bind_texture(i8* %texture, i32 %texture_width, i32 %texture_height)
  br label %4

; <label>:4                                       ; preds = %3, %2
  tail call void @glColor4ub(i8 zeroext %red, i8 zeroext %green, i8 zeroext %blue, i8 zeroext %alpha) #4
  tail call void @glBegin(i32 7) #4
  tail call void @glTexCoord2f(float 0.000000e+00, float 0.000000e+00) #4
  %5 = sitofp i32 %x to float
  %6 = load i32* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 6), align 4, !tbaa !36
  %7 = sub nsw i32 %6, %y
  %8 = sitofp i32 %7 to float
  tail call void @glVertex2f(float %5, float %8) #4
  tail call void @glTexCoord2f(float 1.000000e+00, float 0.000000e+00) #4
  %9 = add nsw i32 %w, %x
  %10 = sitofp i32 %9 to float
  %11 = load i32* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 6), align 4, !tbaa !36
  %12 = sub nsw i32 %11, %y
  %13 = sitofp i32 %12 to float
  tail call void @glVertex2f(float %10, float %13) #4
  tail call void @glTexCoord2f(float 1.000000e+00, float 1.000000e+00) #4
  %14 = load i32* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 6), align 4, !tbaa !36
  %sum = add i32 %h, %y
  %15 = sub i32 %14, %sum
  %16 = sitofp i32 %15 to float
  tail call void @glVertex2f(float %10, float %16) #4
  tail call void @glTexCoord2f(float 0.000000e+00, float 1.000000e+00) #4
  %17 = load i32* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 6), align 4, !tbaa !36
  %18 = sub i32 %17, %sum
  %19 = sitofp i32 %18 to float
  tail call void @glVertex2f(float %5, float %19) #4
  tail call void @glEnd() #4
  br i1 %1, label %20, label %21

; <label>:20                                      ; preds = %4
  tail call void @glEnable(i32 3553) #4
  br label %22

; <label>:21                                      ; preds = %4
  tail call void @glBindTexture(i32 3553, i32 0) #4
  br label %22

; <label>:22                                      ; preds = %21, %20
  ret void
}

declare void @glColor4ub(i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext) #3

declare void @glVertex2f(float, float) #3

; Function Attrs: nounwind
define void @ogl_overlay_rect_sub(i8* %texture, i32 %texture_width, i32 %texture_height, i8 zeroext %red, i8 zeroext %green, i8 zeroext %blue, i8 zeroext %alpha, i32 %x, i32 %y, i32 %w, i32 %h, i32 %src_x, i32 %src_y, i32 %src_w, i32 %src_h) #0 {
  %1 = icmp eq i8* %texture, null
  br i1 %1, label %2, label %3

; <label>:2                                       ; preds = %0
  tail call void @glDisable(i32 3553) #4
  br label %4

; <label>:3                                       ; preds = %0
  tail call void @overlay_bind_texture(i8* %texture, i32 %texture_width, i32 %texture_height)
  br label %4

; <label>:4                                       ; preds = %3, %2
  tail call void @glColor4ub(i8 zeroext %red, i8 zeroext %green, i8 zeroext %blue, i8 zeroext %alpha) #4
  tail call void @glBegin(i32 7) #4
  %5 = sitofp i32 %src_x to float
  %6 = sitofp i32 %texture_width to float
  %7 = fdiv fast float %5, %6
  %8 = sitofp i32 %src_y to float
  %9 = sitofp i32 %texture_height to float
  %10 = fdiv fast float %8, %9
  tail call void @glTexCoord2f(float %7, float %10) #4
  %11 = sitofp i32 %x to float
  %12 = load i32* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 6), align 4, !tbaa !36
  %13 = sub nsw i32 %12, %y
  %14 = sitofp i32 %13 to float
  tail call void @glVertex2f(float %11, float %14) #4
  %15 = add nsw i32 %src_w, %src_x
  %16 = sitofp i32 %15 to float
  %17 = fdiv fast float %16, %6
  tail call void @glTexCoord2f(float %17, float %10) #4
  %18 = add nsw i32 %w, %x
  %19 = sitofp i32 %18 to float
  %20 = load i32* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 6), align 4, !tbaa !36
  %21 = sub nsw i32 %20, %y
  %22 = sitofp i32 %21 to float
  tail call void @glVertex2f(float %19, float %22) #4
  %23 = add nsw i32 %src_h, %src_y
  %24 = sitofp i32 %23 to float
  %25 = fdiv fast float %24, %9
  tail call void @glTexCoord2f(float %17, float %25) #4
  %26 = load i32* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 6), align 4, !tbaa !36
  %sum = add i32 %h, %y
  %27 = sub i32 %26, %sum
  %28 = sitofp i32 %27 to float
  tail call void @glVertex2f(float %19, float %28) #4
  tail call void @glTexCoord2f(float %7, float %25) #4
  %29 = load i32* getelementptr inbounds ({ i8, i8, i8, i8, float, i32, i32, i8, [3 x i8] }* @settings, i32 0, i32 6), align 4, !tbaa !36
  %30 = sub i32 %29, %sum
  %31 = sitofp i32 %30 to float
  tail call void @glVertex2f(float %11, float %31) #4
  tail call void @glEnd() #4
  br i1 %1, label %32, label %33

; <label>:32                                      ; preds = %4
  tail call void @glEnable(i32 3553) #4
  br label %34

; <label>:33                                      ; preds = %4
  tail call void @glBindTexture(i32 3553, i32 0) #4
  br label %34

; <label>:34                                      ; preds = %33, %32
  ret void
}

; Function Attrs: nounwind
define void @ogl_overlay_finish() #0 {
  tail call void @glDisable(i32 3553) #4
  tail call void @glDisable(i32 3042) #4
  tail call void @glEnable(i32 2929) #4
  tail call void @glEnable(i32 2884) #4
  ret void
}

; Function Attrs: nounwind
define i8* @ogl_info(i32 %i) #0 {
  switch i32 %i, label %7 [
    i32 0, label %1
    i32 1, label %3
    i32 2, label %5
  ]

; <label>:1                                       ; preds = %0
  %2 = tail call i8* @glGetString(i32 7938) #4
  br label %7

; <label>:3                                       ; preds = %0
  %4 = tail call i8* @glGetString(i32 7936) #4
  br label %7

; <label>:5                                       ; preds = %0
  %6 = tail call i8* @glGetString(i32 7937) #4
  br label %7

; <label>:7                                       ; preds = %1, %3, %5, %0
  %.0 = phi i8* [ undef, %0 ], [ %6, %5 ], [ %4, %3 ], [ %2, %1 ]
  ret i8* %.0
}

; Function Attrs: nounwind
define void @ogl_camera_setup(float %a, float %b, float %x, float %y, float %z) #0 {
  store float %a, float* @camera_rot_x, align 4, !tbaa !10
  store float %b, float* @camera_rot_y, align 4, !tbaa !10
  store float %x, float* @camera_x, align 4, !tbaa !10
  store float %y, float* @camera_y, align 4, !tbaa !10
  store float %z, float* @camera_z, align 4, !tbaa !10
  ret void
}

; Function Attrs: nounwind
define i32* @camera_terrain_pick(i8 zeroext %mode) #0 {
  %1 = load float* @camera_x, align 4, !tbaa !10
  %2 = load float* @camera_y, align 4, !tbaa !10
  %3 = load float* @camera_z, align 4, !tbaa !10
  %4 = load float* @camera_rot_x, align 4, !tbaa !10
  %5 = fpext float %4 to double
  %6 = tail call double @sin(double %5) #5
  %7 = load float* @camera_rot_y, align 4, !tbaa !10
  %8 = fpext float %7 to double
  %9 = tail call double @sin(double %8) #5
  %10 = tail call double @cos(double %8) #5
  %11 = fmul fast double %10, 0x3F847AE140000000
  %12 = fptrunc double %11 to float
  %13 = tail call double @cos(double %5) #5
  %14 = insertelement <2 x double> undef, double %9, i32 0
  %15 = insertelement <2 x double> %14, double %13, i32 1
  %16 = insertelement <2 x double> undef, double %6, i32 0
  %17 = insertelement <2 x double> %16, double %9, i32 1
  %18 = fmul fast <2 x double> %17, %15
  %19 = fmul fast <2 x double> %18, <double 0x3F847AE140000000, double 0x3F847AE140000000>
  %20 = fptrunc <2 x double> %19 to <2 x float>
  %21 = extractelement <2 x float> %20, i32 0
  %22 = extractelement <2 x float> %20, i32 1
  switch i8 %mode, label %.preheader [
    i8 0, label %.preheader23
    i8 1, label %.preheader25
  ]

.preheader25:                                     ; preds = %0
  %23 = load i32* @map_size_x, align 4, !tbaa !1
  %24 = load i32* @map_size_y, align 4
  %25 = load i32* @map_size_z, align 4, !tbaa !1
  %26 = load i64** @map_colors, align 4, !tbaa !5
  br label %84

.preheader23:                                     ; preds = %0
  %27 = load i32* @map_size_x, align 4, !tbaa !1
  %28 = load i32* @map_size_y, align 4
  %29 = load i32* @map_size_z, align 4, !tbaa !1
  %30 = load i64** @map_colors, align 4, !tbaa !5
  br label %35

.preheader:                                       ; preds = %0
  %31 = load i32* @map_size_x, align 4, !tbaa !1
  %32 = load i32* @map_size_y, align 4
  %33 = load i32* @map_size_z, align 4, !tbaa !1
  %34 = load i64** @map_colors, align 4, !tbaa !5
  br label %113

; <label>:35                                      ; preds = %.preheader23, %map_get.exit21.thread
  %k.042 = phi i32 [ 0, %.preheader23 ], [ %82, %map_get.exit21.thread ]
  %x.041 = phi float [ %1, %.preheader23 ], [ %53, %map_get.exit21.thread ]
  %y.040 = phi float [ %2, %.preheader23 ], [ %55, %map_get.exit21.thread ]
  %z.039 = phi float [ %3, %.preheader23 ], [ %57, %map_get.exit21.thread ]
  %36 = fptosi float %x.041 to i32
  %37 = fptosi float %y.040 to i32
  %38 = fptosi float %z.039 to i32
  %39 = or i32 %37, %38
  %40 = or i32 %39, %36
  %41 = icmp slt i32 %40, 0
  br i1 %41, label %map_get.exit, label %42

; <label>:42                                      ; preds = %35
  %43 = icmp sgt i32 %27, %36
  %44 = icmp sgt i32 %28, %37
  %or.cond.i = and i1 %43, %44
  %45 = icmp sgt i32 %29, %38
  %or.cond69 = and i1 %or.cond.i, %45
  br i1 %or.cond69, label %46, label %map_get.exit

; <label>:46                                      ; preds = %42
  %47 = mul nsw i32 %29, %37
  %48 = add nsw i32 %47, %38
  %49 = mul nsw i32 %48, %27
  %50 = add nsw i32 %49, %36
  %51 = getelementptr inbounds i64* %30, i32 %50
  %52 = load i64* %51, align 4, !tbaa !7
  br label %map_get.exit

map_get.exit:                                     ; preds = %35, %42, %46
  %.0.i = phi i64 [ %52, %46 ], [ 4294967295, %42 ], [ 4294967295, %35 ]
  %53 = fadd fast float %21, %x.041
  %54 = fptosi float %53 to i32
  %55 = fadd fast float %12, %y.040
  %56 = fptosi float %55 to i32
  %57 = fadd fast float %22, %z.039
  %58 = fptosi float %57 to i32
  %59 = or i32 %56, %58
  %60 = or i32 %59, %54
  %61 = icmp slt i32 %60, 0
  br i1 %61, label %map_get.exit21.thread, label %62

; <label>:62                                      ; preds = %map_get.exit
  %63 = icmp sgt i32 %27, %54
  %64 = icmp sgt i32 %28, %56
  %or.cond.i19 = and i1 %63, %64
  %65 = icmp sgt i32 %29, %58
  %or.cond70 = and i1 %or.cond.i19, %65
  br i1 %or.cond70, label %map_get.exit21, label %map_get.exit21.thread

map_get.exit21:                                   ; preds = %62
  %66 = mul nsw i32 %29, %56
  %67 = add nsw i32 %66, %58
  %68 = mul nsw i32 %67, %27
  %69 = add nsw i32 %68, %54
  %70 = getelementptr inbounds i64* %30, i32 %69
  %71 = load i64* %70, align 4, !tbaa !7
  %72 = icmp ne i64 %71, 4294967295
  %73 = icmp eq i64 %.0.i, 4294967295
  %or.cond = and i1 %72, %73
  br i1 %or.cond, label %74, label %map_get.exit21.thread

; <label>:74                                      ; preds = %map_get.exit21
  %.lcssa = phi float [ %55, %map_get.exit21 ]
  %z.039.lcssa = phi float [ %z.039, %map_get.exit21 ]
  %y.040.lcssa = phi float [ %y.040, %map_get.exit21 ]
  %x.041.lcssa = phi float [ %x.041, %map_get.exit21 ]
  %floorf9 = tail call float @floorf(float %.lcssa) #2
  %75 = fcmp olt float %floorf9, 1.000000e+00
  br i1 %75, label %.loopexit, label %76

; <label>:76                                      ; preds = %74
  %floorf10 = tail call float @floorf(float %y.040.lcssa) #2
  %77 = fcmp olt float %floorf10, 1.000000e+00
  br i1 %77, label %.loopexit, label %78

; <label>:78                                      ; preds = %76
  %floorf11 = tail call float @floorf(float %x.041.lcssa) #2
  %79 = fptosi float %floorf11 to i32
  store i32 %79, i32* getelementptr inbounds ([3 x i32]* @camera_terrain_pick.ret, i32 0, i32 0), align 4, !tbaa !1
  %80 = fptosi float %floorf10 to i32
  store i32 %80, i32* getelementptr inbounds ([3 x i32]* @camera_terrain_pick.ret, i32 0, i32 1), align 4, !tbaa !1
  %floorf12 = tail call float @floorf(float %z.039.lcssa) #2
  %81 = fptosi float %floorf12 to i32
  store i32 %81, i32* getelementptr inbounds ([3 x i32]* @camera_terrain_pick.ret, i32 0, i32 2), align 4, !tbaa !1
  br label %.loopexit

map_get.exit21.thread:                            ; preds = %map_get.exit, %62, %map_get.exit21
  %82 = add nsw i32 %k.042, 1
  %83 = icmp slt i32 %82, 2000
  br i1 %83, label %35, label %.loopexit.loopexit85

; <label>:84                                      ; preds = %.preheader25, %map_get.exit18.thread
  %k1.046 = phi i32 [ 0, %.preheader25 ], [ %111, %map_get.exit18.thread ]
  %x.145 = phi float [ %1, %.preheader25 ], [ %108, %map_get.exit18.thread ]
  %y.144 = phi float [ %2, %.preheader25 ], [ %109, %map_get.exit18.thread ]
  %z.143 = phi float [ %3, %.preheader25 ], [ %110, %map_get.exit18.thread ]
  %floorf6 = tail call float @floorf(float %y.144) #2
  %85 = fcmp ogt float %floorf6, 0.000000e+00
  br i1 %85, label %86, label %map_get.exit18.thread

; <label>:86                                      ; preds = %84
  %87 = fptosi float %x.145 to i32
  %88 = fptosi float %y.144 to i32
  %89 = fptosi float %z.143 to i32
  %90 = or i32 %88, %89
  %91 = or i32 %90, %87
  %92 = icmp slt i32 %91, 0
  br i1 %92, label %map_get.exit18.thread, label %93

; <label>:93                                      ; preds = %86
  %94 = icmp sgt i32 %23, %87
  %95 = icmp sgt i32 %24, %88
  %or.cond.i16 = and i1 %94, %95
  %96 = icmp sgt i32 %25, %89
  %or.cond71 = and i1 %or.cond.i16, %96
  br i1 %or.cond71, label %map_get.exit18, label %map_get.exit18.thread

map_get.exit18:                                   ; preds = %93
  %97 = mul nsw i32 %25, %88
  %98 = add nsw i32 %97, %89
  %99 = mul nsw i32 %98, %23
  %100 = add nsw i32 %99, %87
  %101 = getelementptr inbounds i64* %26, i32 %100
  %102 = load i64* %101, align 4, !tbaa !7
  %103 = icmp eq i64 %102, 4294967295
  br i1 %103, label %map_get.exit18.thread, label %104

; <label>:104                                     ; preds = %map_get.exit18
  %floorf6.lcssa = phi float [ %floorf6, %map_get.exit18 ]
  %z.143.lcssa = phi float [ %z.143, %map_get.exit18 ]
  %x.145.lcssa = phi float [ %x.145, %map_get.exit18 ]
  %floorf7 = tail call float @floorf(float %x.145.lcssa) #2
  %105 = fptosi float %floorf7 to i32
  store i32 %105, i32* getelementptr inbounds ([3 x i32]* @camera_terrain_pick.ret26, i32 0, i32 0), align 4, !tbaa !1
  %106 = fptosi float %floorf6.lcssa to i32
  store i32 %106, i32* getelementptr inbounds ([3 x i32]* @camera_terrain_pick.ret26, i32 0, i32 1), align 4, !tbaa !1
  %floorf8 = tail call float @floorf(float %z.143.lcssa) #2
  %107 = fptosi float %floorf8 to i32
  store i32 %107, i32* getelementptr inbounds ([3 x i32]* @camera_terrain_pick.ret26, i32 0, i32 2), align 4, !tbaa !1
  br label %.loopexit

map_get.exit18.thread:                            ; preds = %86, %93, %map_get.exit18, %84
  %108 = fadd fast float %21, %x.145
  %109 = fadd fast float %12, %y.144
  %110 = fadd fast float %22, %z.143
  %111 = add nsw i32 %k1.046, 1
  %112 = icmp slt i32 %111, 2000
  br i1 %112, label %84, label %.loopexit.loopexit86

; <label>:113                                     ; preds = %.preheader, %map_get.exit15.thread
  %k2.038 = phi i32 [ 0, %.preheader ], [ %138, %map_get.exit15.thread ]
  %x.237 = phi float [ %1, %.preheader ], [ %135, %map_get.exit15.thread ]
  %y.236 = phi float [ %2, %.preheader ], [ %136, %map_get.exit15.thread ]
  %z.235 = phi float [ %3, %.preheader ], [ %137, %map_get.exit15.thread ]
  %114 = fptosi float %x.237 to i32
  %115 = fptosi float %y.236 to i32
  %116 = fptosi float %z.235 to i32
  %117 = or i32 %115, %116
  %118 = or i32 %117, %114
  %119 = icmp slt i32 %118, 0
  br i1 %119, label %map_get.exit15.thread, label %120

; <label>:120                                     ; preds = %113
  %121 = icmp sgt i32 %31, %114
  %122 = icmp sgt i32 %32, %115
  %or.cond.i13 = and i1 %121, %122
  %123 = icmp sgt i32 %33, %116
  %or.cond72 = and i1 %or.cond.i13, %123
  br i1 %or.cond72, label %map_get.exit15, label %map_get.exit15.thread

map_get.exit15:                                   ; preds = %120
  %124 = mul nsw i32 %33, %115
  %125 = add nsw i32 %124, %116
  %126 = mul nsw i32 %125, %31
  %127 = add nsw i32 %126, %114
  %128 = getelementptr inbounds i64* %34, i32 %127
  %129 = load i64* %128, align 4, !tbaa !7
  %130 = icmp eq i64 %129, 4294967295
  br i1 %130, label %map_get.exit15.thread, label %131

; <label>:131                                     ; preds = %map_get.exit15
  %z.235.lcssa = phi float [ %z.235, %map_get.exit15 ]
  %y.236.lcssa = phi float [ %y.236, %map_get.exit15 ]
  %x.237.lcssa = phi float [ %x.237, %map_get.exit15 ]
  %floorf = tail call float @floorf(float %x.237.lcssa) #2
  %132 = fptosi float %floorf to i32
  store i32 %132, i32* getelementptr inbounds ([3 x i32]* @camera_terrain_pick.ret27, i32 0, i32 0), align 4, !tbaa !1
  %floorf4 = tail call float @floorf(float %y.236.lcssa) #2
  %133 = fptosi float %floorf4 to i32
  store i32 %133, i32* getelementptr inbounds ([3 x i32]* @camera_terrain_pick.ret27, i32 0, i32 1), align 4, !tbaa !1
  %floorf5 = tail call float @floorf(float %z.235.lcssa) #2
  %134 = fptosi float %floorf5 to i32
  store i32 %134, i32* getelementptr inbounds ([3 x i32]* @camera_terrain_pick.ret27, i32 0, i32 2), align 4, !tbaa !1
  br label %.loopexit

map_get.exit15.thread:                            ; preds = %113, %120, %map_get.exit15
  %135 = fadd fast float %21, %x.237
  %136 = fadd fast float %12, %y.236
  %137 = fadd fast float %22, %z.235
  %138 = add nsw i32 %k2.038, 1
  %139 = icmp slt i32 %138, 2000
  br i1 %139, label %113, label %.loopexit.loopexit

.loopexit.loopexit:                               ; preds = %map_get.exit15.thread
  br label %.loopexit

.loopexit.loopexit85:                             ; preds = %map_get.exit21.thread
  br label %.loopexit

.loopexit.loopexit86:                             ; preds = %map_get.exit18.thread
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit86, %.loopexit.loopexit85, %.loopexit.loopexit, %74, %76, %131, %104, %78
  %.0 = phi i32* [ getelementptr inbounds ([3 x i32]* @camera_terrain_pick.ret, i32 0, i32 0), %78 ], [ getelementptr inbounds ([3 x i32]* @camera_terrain_pick.ret26, i32 0, i32 0), %104 ], [ getelementptr inbounds ([3 x i32]* @camera_terrain_pick.ret27, i32 0, i32 0), %131 ], [ null, %76 ], [ null, %74 ], [ null, %.loopexit.loopexit ], [ null, %.loopexit.loopexit85 ], [ null, %.loopexit.loopexit86 ]
  ret i32* %.0
}

; Function Attrs: nounwind
define void @camera_ExtractFrustum() #0 {
  %proj = alloca [16 x float], align 4
  %modl = alloca [16 x float], align 4
  %1 = bitcast [16 x float]* %proj to i8*
  call void @llvm.lifetime.start(i64 64, i8* %1) #4
  %2 = bitcast [16 x float]* %modl to i8*
  call void @llvm.lifetime.start(i64 64, i8* %2) #4
  %3 = getelementptr inbounds [16 x float]* %proj, i32 0, i32 0
  call void @glGetFloatv(i32 2983, float* %3) #4
  %4 = getelementptr inbounds [16 x float]* %modl, i32 0, i32 0
  call void @glGetFloatv(i32 2982, float* %4) #4
  %5 = load float* %4, align 4, !tbaa !10
  %6 = load float* %3, align 4, !tbaa !10
  %7 = getelementptr inbounds [16 x float]* %modl, i32 0, i32 1
  %8 = load float* %7, align 4, !tbaa !10
  %9 = getelementptr inbounds [16 x float]* %proj, i32 0, i32 4
  %10 = load float* %9, align 4, !tbaa !10
  %11 = getelementptr inbounds [16 x float]* %modl, i32 0, i32 2
  %12 = load float* %11, align 4, !tbaa !10
  %13 = getelementptr inbounds [16 x float]* %proj, i32 0, i32 8
  %14 = load float* %13, align 4, !tbaa !10
  %15 = getelementptr inbounds [16 x float]* %modl, i32 0, i32 3
  %16 = load float* %15, align 4, !tbaa !10
  %17 = getelementptr inbounds [16 x float]* %proj, i32 0, i32 12
  %18 = load float* %17, align 4, !tbaa !10
  %19 = getelementptr inbounds [16 x float]* %proj, i32 0, i32 1
  %20 = load float* %19, align 4, !tbaa !10
  %21 = getelementptr inbounds [16 x float]* %proj, i32 0, i32 5
  %22 = load float* %21, align 4, !tbaa !10
  %23 = getelementptr inbounds [16 x float]* %proj, i32 0, i32 9
  %24 = load float* %23, align 4, !tbaa !10
  %25 = getelementptr inbounds [16 x float]* %proj, i32 0, i32 13
  %26 = load float* %25, align 4, !tbaa !10
  %27 = getelementptr inbounds [16 x float]* %proj, i32 0, i32 2
  %28 = load float* %27, align 4, !tbaa !10
  %29 = getelementptr inbounds [16 x float]* %proj, i32 0, i32 6
  %30 = load float* %29, align 4, !tbaa !10
  %31 = getelementptr inbounds [16 x float]* %proj, i32 0, i32 10
  %32 = load float* %31, align 4, !tbaa !10
  %33 = getelementptr inbounds [16 x float]* %proj, i32 0, i32 14
  %34 = load float* %33, align 4, !tbaa !10
  %35 = getelementptr inbounds [16 x float]* %proj, i32 0, i32 3
  %36 = load float* %35, align 4, !tbaa !10
  %37 = getelementptr inbounds [16 x float]* %proj, i32 0, i32 7
  %38 = load float* %37, align 4, !tbaa !10
  %39 = getelementptr inbounds [16 x float]* %proj, i32 0, i32 11
  %40 = load float* %39, align 4, !tbaa !10
  %41 = getelementptr inbounds [16 x float]* %proj, i32 0, i32 15
  %42 = load float* %41, align 4, !tbaa !10
  %43 = getelementptr inbounds [16 x float]* %modl, i32 0, i32 4
  %44 = load float* %43, align 4, !tbaa !10
  %45 = getelementptr inbounds [16 x float]* %modl, i32 0, i32 5
  %46 = load float* %45, align 4, !tbaa !10
  %47 = getelementptr inbounds [16 x float]* %modl, i32 0, i32 6
  %48 = load float* %47, align 4, !tbaa !10
  %49 = getelementptr inbounds [16 x float]* %modl, i32 0, i32 7
  %50 = load float* %49, align 4, !tbaa !10
  %51 = getelementptr inbounds [16 x float]* %modl, i32 0, i32 8
  %52 = load float* %51, align 4, !tbaa !10
  %53 = getelementptr inbounds [16 x float]* %modl, i32 0, i32 9
  %54 = load float* %53, align 4, !tbaa !10
  %55 = getelementptr inbounds [16 x float]* %modl, i32 0, i32 10
  %56 = load float* %55, align 4, !tbaa !10
  %57 = getelementptr inbounds [16 x float]* %modl, i32 0, i32 11
  %58 = load float* %57, align 4, !tbaa !10
  %59 = getelementptr inbounds [16 x float]* %modl, i32 0, i32 12
  %60 = load float* %59, align 4, !tbaa !10
  %61 = insertelement <4 x float> undef, float %5, i32 0
  %62 = insertelement <4 x float> %61, float %44, i32 1
  %63 = insertelement <4 x float> %62, float %52, i32 2
  %64 = insertelement <4 x float> %63, float %60, i32 3
  %65 = insertelement <4 x float> undef, float %6, i32 0
  %66 = insertelement <4 x float> %65, float %6, i32 1
  %67 = insertelement <4 x float> %66, float %6, i32 2
  %68 = insertelement <4 x float> %67, float %6, i32 3
  %69 = fmul <4 x float> %64, %68
  %70 = getelementptr inbounds [16 x float]* %modl, i32 0, i32 13
  %71 = load float* %70, align 4, !tbaa !10
  %72 = insertelement <4 x float> undef, float %8, i32 0
  %73 = insertelement <4 x float> %72, float %46, i32 1
  %74 = insertelement <4 x float> %73, float %54, i32 2
  %75 = insertelement <4 x float> %74, float %71, i32 3
  %76 = insertelement <4 x float> undef, float %10, i32 0
  %77 = insertelement <4 x float> %76, float %10, i32 1
  %78 = insertelement <4 x float> %77, float %10, i32 2
  %79 = insertelement <4 x float> %78, float %10, i32 3
  %80 = fmul <4 x float> %75, %79
  %81 = fadd <4 x float> %69, %80
  %82 = getelementptr inbounds [16 x float]* %modl, i32 0, i32 14
  %83 = load float* %82, align 4, !tbaa !10
  %84 = insertelement <4 x float> undef, float %12, i32 0
  %85 = insertelement <4 x float> %84, float %48, i32 1
  %86 = insertelement <4 x float> %85, float %56, i32 2
  %87 = insertelement <4 x float> %86, float %83, i32 3
  %88 = insertelement <4 x float> undef, float %14, i32 0
  %89 = insertelement <4 x float> %88, float %14, i32 1
  %90 = insertelement <4 x float> %89, float %14, i32 2
  %91 = insertelement <4 x float> %90, float %14, i32 3
  %92 = fmul <4 x float> %87, %91
  %93 = fadd <4 x float> %81, %92
  %94 = getelementptr inbounds [16 x float]* %modl, i32 0, i32 15
  %95 = load float* %94, align 4, !tbaa !10
  %96 = insertelement <4 x float> undef, float %16, i32 0
  %97 = insertelement <4 x float> %96, float %50, i32 1
  %98 = insertelement <4 x float> %97, float %58, i32 2
  %99 = insertelement <4 x float> %98, float %95, i32 3
  %100 = insertelement <4 x float> undef, float %18, i32 0
  %101 = insertelement <4 x float> %100, float %18, i32 1
  %102 = insertelement <4 x float> %101, float %18, i32 2
  %103 = insertelement <4 x float> %102, float %18, i32 3
  %104 = fmul <4 x float> %99, %103
  %105 = fadd <4 x float> %93, %104
  %106 = insertelement <4 x float> undef, float %20, i32 0
  %107 = insertelement <4 x float> %106, float %20, i32 1
  %108 = insertelement <4 x float> %107, float %20, i32 2
  %109 = insertelement <4 x float> %108, float %20, i32 3
  %110 = fmul <4 x float> %64, %109
  %111 = insertelement <4 x float> undef, float %22, i32 0
  %112 = insertelement <4 x float> %111, float %22, i32 1
  %113 = insertelement <4 x float> %112, float %22, i32 2
  %114 = insertelement <4 x float> %113, float %22, i32 3
  %115 = fmul <4 x float> %75, %114
  %116 = fadd <4 x float> %110, %115
  %117 = insertelement <4 x float> undef, float %24, i32 0
  %118 = insertelement <4 x float> %117, float %24, i32 1
  %119 = insertelement <4 x float> %118, float %24, i32 2
  %120 = insertelement <4 x float> %119, float %24, i32 3
  %121 = fmul <4 x float> %87, %120
  %122 = fadd <4 x float> %116, %121
  %123 = insertelement <4 x float> undef, float %26, i32 0
  %124 = insertelement <4 x float> %123, float %26, i32 1
  %125 = insertelement <4 x float> %124, float %26, i32 2
  %126 = insertelement <4 x float> %125, float %26, i32 3
  %127 = fmul <4 x float> %99, %126
  %128 = fadd <4 x float> %122, %127
  %129 = insertelement <4 x float> undef, float %28, i32 0
  %130 = insertelement <4 x float> %129, float %28, i32 1
  %131 = insertelement <4 x float> %130, float %28, i32 2
  %132 = insertelement <4 x float> %131, float %28, i32 3
  %133 = fmul <4 x float> %64, %132
  %134 = insertelement <4 x float> undef, float %30, i32 0
  %135 = insertelement <4 x float> %134, float %30, i32 1
  %136 = insertelement <4 x float> %135, float %30, i32 2
  %137 = insertelement <4 x float> %136, float %30, i32 3
  %138 = fmul <4 x float> %75, %137
  %139 = fadd <4 x float> %133, %138
  %140 = insertelement <4 x float> undef, float %32, i32 0
  %141 = insertelement <4 x float> %140, float %32, i32 1
  %142 = insertelement <4 x float> %141, float %32, i32 2
  %143 = insertelement <4 x float> %142, float %32, i32 3
  %144 = fmul <4 x float> %87, %143
  %145 = fadd <4 x float> %139, %144
  %146 = insertelement <4 x float> undef, float %34, i32 0
  %147 = insertelement <4 x float> %146, float %34, i32 1
  %148 = insertelement <4 x float> %147, float %34, i32 2
  %149 = insertelement <4 x float> %148, float %34, i32 3
  %150 = fmul <4 x float> %99, %149
  %151 = fadd <4 x float> %145, %150
  %152 = insertelement <4 x float> undef, float %36, i32 0
  %153 = insertelement <4 x float> %152, float %36, i32 1
  %154 = insertelement <4 x float> %153, float %36, i32 2
  %155 = insertelement <4 x float> %154, float %36, i32 3
  %156 = fmul <4 x float> %64, %155
  %157 = insertelement <4 x float> undef, float %38, i32 0
  %158 = insertelement <4 x float> %157, float %38, i32 1
  %159 = insertelement <4 x float> %158, float %38, i32 2
  %160 = insertelement <4 x float> %159, float %38, i32 3
  %161 = fmul <4 x float> %75, %160
  %162 = fadd <4 x float> %156, %161
  %163 = insertelement <4 x float> undef, float %40, i32 0
  %164 = insertelement <4 x float> %163, float %40, i32 1
  %165 = insertelement <4 x float> %164, float %40, i32 2
  %166 = insertelement <4 x float> %165, float %40, i32 3
  %167 = fmul <4 x float> %87, %166
  %168 = fadd <4 x float> %162, %167
  %169 = insertelement <4 x float> undef, float %42, i32 0
  %170 = insertelement <4 x float> %169, float %42, i32 1
  %171 = insertelement <4 x float> %170, float %42, i32 2
  %172 = insertelement <4 x float> %171, float %42, i32 3
  %173 = fmul <4 x float> %99, %172
  %174 = fadd <4 x float> %168, %173
  %175 = fsub <4 x float> %174, %105
  %176 = shufflevector <4 x float> %105, <4 x float> %174, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
  %177 = shufflevector <4 x float> %174, <4 x float> %105, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
  %178 = fadd <4 x float> %176, %177
  %179 = shufflevector <4 x float> %175, <4 x float> %178, <2 x i32> <i32 0, i32 4>
  %180 = shufflevector <4 x float> %175, <4 x float> %178, <2 x i32> <i32 1, i32 5>
  %181 = shufflevector <4 x float> %175, <4 x float> %178, <2 x i32> <i32 2, i32 6>
  %182 = fmul fast <2 x float> %181, %181
  %183 = shufflevector <4 x float> %128, <4 x float> %174, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
  %184 = shufflevector <4 x float> %174, <4 x float> %128, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
  %185 = fadd <4 x float> %183, %184
  %186 = fsub <4 x float> %174, %128
  %187 = shufflevector <4 x float> %185, <4 x float> %186, <2 x i32> <i32 0, i32 4>
  %188 = shufflevector <2 x float> %179, <2 x float> %187, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %189 = fmul fast <4 x float> %188, %188
  %190 = shufflevector <4 x float> %185, <4 x float> %186, <2 x i32> <i32 1, i32 5>
  %191 = shufflevector <2 x float> %180, <2 x float> %190, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %192 = fmul fast <4 x float> %191, %191
  %193 = fadd fast <4 x float> %189, %192
  %194 = shufflevector <4 x float> %185, <4 x float> %186, <2 x i32> <i32 2, i32 6>
  %195 = fmul fast <2 x float> %194, %194
  %196 = shufflevector <2 x float> %182, <2 x float> %195, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %197 = fadd fast <4 x float> %193, %196
  %198 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %197) #5
  %199 = shufflevector <4 x float> %198, <4 x float> undef, <4 x i32> zeroinitializer
  %200 = fdiv <4 x float> %175, %199
  store <4 x float> %200, <4 x float>* bitcast ([6 x [4 x float]]* @frustum to <4 x float>*), align 16, !tbaa !10
  %201 = shufflevector <4 x float> %198, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %202 = fdiv <4 x float> %178, %201
  store <4 x float> %202, <4 x float>* bitcast (float* getelementptr inbounds ([6 x [4 x float]]* @frustum, i32 0, i32 1, i32 0) to <4 x float>*), align 16, !tbaa !10
  %203 = shufflevector <4 x float> %198, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %204 = fdiv <4 x float> %185, %203
  store <4 x float> %204, <4 x float>* bitcast (float* getelementptr inbounds ([6 x [4 x float]]* @frustum, i32 0, i32 2, i32 0) to <4 x float>*), align 16, !tbaa !10
  %205 = shufflevector <4 x float> %198, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %206 = fdiv <4 x float> %186, %205
  store <4 x float> %206, <4 x float>* bitcast (float* getelementptr inbounds ([6 x [4 x float]]* @frustum, i32 0, i32 3, i32 0) to <4 x float>*), align 16, !tbaa !10
  %207 = fsub <4 x float> %174, %151
  %208 = shufflevector <4 x float> %151, <4 x float> %174, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
  %209 = shufflevector <4 x float> %174, <4 x float> %151, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
  %210 = fadd <4 x float> %208, %209
  %211 = shufflevector <4 x float> %207, <4 x float> %210, <2 x i32> <i32 0, i32 4>
  %212 = fmul fast <2 x float> %211, %211
  %213 = shufflevector <4 x float> %207, <4 x float> %210, <2 x i32> <i32 1, i32 5>
  %214 = fmul fast <2 x float> %213, %213
  %215 = fadd fast <2 x float> %212, %214
  %216 = shufflevector <4 x float> %207, <4 x float> %210, <2 x i32> <i32 2, i32 6>
  %217 = fmul fast <2 x float> %216, %216
  %218 = fadd fast <2 x float> %215, %217
  %219 = call <2 x float> @llvm.sqrt.v2f32(<2 x float> %218) #5
  %220 = shufflevector <2 x float> %219, <2 x float> undef, <4 x i32> zeroinitializer
  %221 = fdiv <4 x float> %207, %220
  store <4 x float> %221, <4 x float>* bitcast (float* getelementptr inbounds ([6 x [4 x float]]* @frustum, i32 0, i32 4, i32 0) to <4 x float>*), align 16, !tbaa !10
  %222 = shufflevector <2 x float> %219, <2 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %223 = fdiv <4 x float> %210, %222
  store <4 x float> %223, <4 x float>* bitcast (float* getelementptr inbounds ([6 x [4 x float]]* @frustum, i32 0, i32 5, i32 0) to <4 x float>*), align 16, !tbaa !10
  call void @llvm.lifetime.end(i64 64, i8* %2) #4
  call void @llvm.lifetime.end(i64 64, i8* %1) #4
  ret void
}

declare void @glGetFloatv(i32, float*) #3

; Function Attrs: nounwind readonly
define zeroext i8 @camera_PointInFrustum(float %x, float %y, float %z) #1 {
  br label %3

; <label>:1                                       ; preds = %3
  %2 = icmp slt i32 %21, 6
  br i1 %2, label %3, label %22

; <label>:3                                       ; preds = %0, %1
  %p.01 = phi i32 [ 0, %0 ], [ %21, %1 ]
  %4 = getelementptr inbounds [6 x [4 x float]]* @frustum, i32 0, i32 %p.01, i32 0
  %5 = bitcast float* %4 to <2 x float>*
  %6 = load <2 x float>* %5, align 16, !tbaa !10
  %7 = insertelement <2 x float> undef, float %x, i32 0
  %8 = insertelement <2 x float> %7, float %y, i32 1
  %9 = fmul fast <2 x float> %6, %8
  %10 = extractelement <2 x float> %9, i32 0
  %11 = extractelement <2 x float> %9, i32 1
  %12 = fadd fast float %10, %11
  %13 = getelementptr inbounds [6 x [4 x float]]* @frustum, i32 0, i32 %p.01, i32 2
  %14 = load float* %13, align 8, !tbaa !10
  %15 = fmul fast float %14, %z
  %16 = fadd fast float %12, %15
  %17 = getelementptr inbounds [6 x [4 x float]]* @frustum, i32 0, i32 %p.01, i32 3
  %18 = load float* %17, align 4, !tbaa !10
  %19 = fadd fast float %18, %16
  %20 = fcmp ugt float %19, 0.000000e+00
  %21 = add nsw i32 %p.01, 1
  br i1 %20, label %1, label %22

; <label>:22                                      ; preds = %1, %3
  %.0 = phi i8 [ 0, %3 ], [ 1, %1 ]
  ret i8 %.0
}

declare void @glTexImage3D(i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*) #3

; Function Attrs: nounwind readnone
declare double @tan(double) #2

declare void @glPointSize(float) #3

; Function Attrs: nounwind readnone
declare float @llvm.sqrt.f32(float) #5

declare float @floorf(float)

; Function Attrs: nounwind readnone
declare <2 x float> @llvm.sqrt.v2f32(<2 x float>) #5

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.sqrt.v4f32(<4 x float>) #5

attributes #0 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #2 = { nounwind readnone "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #3 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind readnone }
attributes #6 = { nounwind readonly }

!llvm.ident = !{!0}

!0 = metadata !{metadata !"Debian clang version 3.5.0-10 (tags/RELEASE_350/final) (based on LLVM 3.5.0)"}
!1 = metadata !{metadata !2, metadata !2, i64 0}
!2 = metadata !{metadata !"int", metadata !3, i64 0}
!3 = metadata !{metadata !"omnipotent char", metadata !4, i64 0}
!4 = metadata !{metadata !"Simple C/C++ TBAA"}
!5 = metadata !{metadata !6, metadata !6, i64 0}
!6 = metadata !{metadata !"any pointer", metadata !3, i64 0}
!7 = metadata !{metadata !8, metadata !8, i64 0}
!8 = metadata !{metadata !"long long", metadata !3, i64 0}
!9 = metadata !{metadata !3, metadata !3, i64 0}
!10 = metadata !{metadata !11, metadata !11, i64 0}
!11 = metadata !{metadata !"float", metadata !3, i64 0}
!12 = metadata !{metadata !13, metadata !11, i64 4}
!13 = metadata !{metadata !"RENDER_OPTIONS", metadata !3, i64 0, metadata !3, i64 1, metadata !3, i64 2, metadata !3, i64 3, metadata !11, i64 4, metadata !2, i64 8, metadata !2, i64 12, metadata !3, i64 16}
!14 = metadata !{metadata !13, metadata !3, i64 3}
!15 = metadata !{metadata !15, metadata !16, metadata !17}
!16 = metadata !{metadata !"llvm.loop.vectorize.width", i32 1}
!17 = metadata !{metadata !"llvm.loop.interleave.count", i32 1}
!18 = metadata !{metadata !18, metadata !16, metadata !17}
!19 = metadata !{metadata !20, metadata !20, i64 0}
!20 = metadata !{metadata !"short", metadata !3, i64 0}
!21 = metadata !{metadata !21, metadata !16, metadata !17}
!22 = metadata !{metadata !22, metadata !16, metadata !17}
!23 = metadata !{metadata !13, metadata !3, i64 2}
!24 = metadata !{metadata !25, metadata !3, i64 20}
!25 = metadata !{metadata !"", metadata !20, i64 0, metadata !20, i64 2, metadata !20, i64 4, metadata !11, i64 8, metadata !11, i64 12, metadata !11, i64 16, metadata !3, i64 20, metadata !2, i64 24, metadata !6, i64 28, metadata !6, i64 32, metadata !6, i64 36}
!26 = metadata !{metadata !25, metadata !20, i64 4}
!27 = metadata !{metadata !25, metadata !6, i64 36}
!28 = metadata !{metadata !28, metadata !16, metadata !17}
!29 = metadata !{metadata !29, metadata !16, metadata !17}
!30 = metadata !{metadata !25, metadata !20, i64 0}
!31 = metadata !{metadata !25, metadata !20, i64 2}
!32 = metadata !{metadata !25, metadata !6, i64 28}
!33 = metadata !{metadata !25, metadata !6, i64 32}
!34 = metadata !{metadata !25, metadata !2, i64 24}
!35 = metadata !{metadata !13, metadata !2, i64 8}
!36 = metadata !{metadata !13, metadata !2, i64 12}
!37 = metadata !{metadata !13, metadata !3, i64 0}
!38 = metadata !{metadata !13, metadata !3, i64 1}
!39 = metadata !{metadata !13, metadata !3, i64 16}
!40 = metadata !{metadata !40, metadata !16, metadata !17}
!41 = metadata !{metadata !41, metadata !16, metadata !17}
!42 = metadata !{metadata !42, metadata !16, metadata !17}
!43 = metadata !{metadata !43, metadata !16, metadata !17}
!44 = metadata !{metadata !44, metadata !16, metadata !17}
